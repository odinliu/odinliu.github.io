<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一年一语言之2016</title>
      <link href="/2017/01/07/yi-nian-yi-yu-yan-zhi-2016/"/>
      <url>/2017/01/07/yi-nian-yi-yu-yan-zhi-2016/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>曾经给自己定下一个目标，每年学会一门新编程语言，尽管可能没办法作为工作语言使用，但我始终认为任何语言(特别是现代语言)都有自己的特点，了解其他语言有什么更新更好的解决方案对自己的平时工作还是很有帮助的。毕竟没有任何一门语言是完美的，用最适合的语言解决问题才是关键。</p><p>从毕业以后，已经陆续学习过Javascript、Objective-C、Python之类的了，这个习惯中间断了几年。15年底换了工作之后，陆续接触了一些新的语言，用的比较多的就是Go和Scala了。</p><h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Go作为Google的亲儿子，又是一门新世纪的语言，在业界关注度还是很高的。尽管Go才出了没几年的时间，在工业界已经有很多成熟的应用了，比如Docker这种大型项目。总的来说Go的风格比较像更现代化的C。当时选择Go的主要原因有几个：</p><ul><li>诞生于Google，比较适合互联网开发，从Go的标准库可以看出，Go是一门非常适合互联网服务开发的语言，各种相关的库一应俱全，大厂维护也使这门语言比较可控，不会脱离工业界而走向学术界</li><li>现代语言，面向并发，支持routine，比较典型的CSP模型语言</li><li>语法相对简单，带有一些面向对象特性的面向过程，和我之前“使用一些c++特性的c”的工作语言风格接近</li><li>社区热度高，基本上需要的库都会有开源实现</li><li>很多工业界成熟项目使用Go实现，说明这门语言靠谱</li><li>静态类型，并且开发效率高</li><li>直接编译成二进制，静态链接，分发很简单</li><li>godoc文档生成工具，输出文档很方便</li></ul><p>在花了一些时间熟悉了语法以及一些标准库之后，基本就上手了，写了一个spider/extractor，以及一些web服务。因为整个语言模型和c/c++很像，所以从上手到应用对我来说几乎没有任何成本，写码的感觉也非常爽，配合atom+一些go的插件，实现代码自动格式化，自动import啥的也非常方便，写码体验可以说非常不错。</p><p>优点说完再来谈谈我认为的缺点。首先一个是我觉得Go的构建工具方面做的不好，作为一个工业界应用的语言，竟然要到1.5、1.6版本才有官方的依赖解决方案。这个方案在我看来也并不完美，不能依赖某个库的某个版本，只能按照git的commit checksum去依赖，其实很不友好。尽管有一些第三方的构建工具如govender之类的可以对依赖进行控制，但其实还没有像Rust的Cargo或者Js的npm这一类比较完美的包管理+构建的工具。而且在我看来，很多go的库几乎也没有个版本管理的概念，即使用上govender也是按源码去依赖。就这点来说，很难去管理。</p><p>第二个缺点是Go在语言feature上面还是太少了，比如泛型、对函数式语法的支持之类的现代特性都还很缺乏，而Google在语言级特性上又比较谨慎，可想而之在未来的几年内可能都看不见这些新特性。</p><p>第三个问题是goroutine的健壮性。go的异常处理是panic/recovery机制，但是goroutine的recovery是要靠闭包去实现的，因此，如果你调用了一个第三方库，并且第三方库里的goroutine里写了一个panic并且没有做recovery，那一旦触发panic逻辑，整个程序就core掉了，调用者是没办法在自己的程序中去捕获这个panic并做处理的。比如之前用的一个hbase库，在网络异常时会panic，并且是在goroutine里panic的，作为调用方没办法做捕获重连之类的，只能通过supervisor这种进程管理去提高服务可用性。这个问题我在mail list里问过，Go社区的人确认确实有这个问题，但是他们说第三方库是不应该panic的，除非一些初始化工作就完成不了。但问题就在于，调用者也没办法控制第三方库的质量。</p><p>至于目前看到说的比较多的GC问题，因为还没有用Go做一些真正意义的东西，所以也没什么体会。尽管Go有着这样那样的问题，但不妨碍Go成为一门好语言，而且Go相对来说比较简单，在技术团队，特别是C系的团队里推广起来不是太难，未来也期待用Go做一些真正意义上的工作。</p><p>2016年下半年以来很少写Go，基本上也就用来写一些command line tools了，毕竟静态链接分发太方便了。</p><h2 id="web技术栈"><a href="#web技术栈" class="headerlink" title="web技术栈"></a>web技术栈</h2><p>Go的web框架比较多，最早用的matini，但是性能不如gin所以后期都用gin-gonic了。gin是比较轻量级的web框架，不像beego那种一站式框架全面，但是用来快速写一些restful服务还是不错的，号称性能很好，并且route是zero memory cost，但缺点就是真的太轻了，除了架子啥都没有，还要去选一些log啊、config啊、orm啊之类的，这个考虑结合gin和beego使用吧。</p><p>go的技术栈探索比较少，毕竟标准库就足够强大了。后面再写一些闲码的时候再研究好了。</p><h1 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h1><p>2015-2016接触了很多语言，如果要我选择一个我最喜欢的语言，我选择Scala。我对Scala其实并不陌生，2010年左右，就稍微学习过一些，只是后来转向c/c++之后，就完全抛弃了JVM的东西。当时正值Python/Ruby这些动态语言席卷web开发界，作为一个Java web选手，深深的觉得自己真是落后，很多有点水平的同学都去搞Python啊Ruby啊Erlang啊这些了。但我比较懒，还不想去学Java Web以外的东西，所以就调研了一下Jython和JRuby，发现真是麻烦，正好那个时候讨论next java的也比较多，我正好就看到Scala，说真的那时候的水平还不足以领悟什么Scalability什么Actor什么DSL，选择Scala纯粹是因为特立独行，因为别人都去玩热门的Python/Ruby了，我就非要玩点不一样的，<del>毕竟我就是我，颜色不一样的烟火</del>。</p><p>但说真的，当年Scala是真的难，连面向过程/面向对象都马马虎虎的我，很难去接受什么函数式编程。那时候最热门的Scala的web框架是lift，和熟悉的Java web开发也风格迥异，所以学习Scala也是三天打渔两天晒网，直到10年暑假在淘宝实习期间，才真正能写一些有用的Scala代码。那个时候的感觉是，Scala是一门“学术界语言”，完全是为了教学，设计一堆不实用的feature。后来大四去百度之后，就再也没写过哪怕一行Java，更不要说什么Scala了。</p><p>毕业的时候，在选择带那些书去工作的时候，我曾认为自己这辈子再也不会写Java了，所以把所有Java相关的书全都寄回老家了。然而讽刺的是2015年10月换工作时，去到了一个Java系的公司，不得不重回JVM。刚好那个时候需要写一些Spark，而Spark的“标准语言”刚好就是Scala，上一次没来得及征服的语言，这一次一定要学会。不得不说，经过了5年的发展，Scala已经变得非常接工业界的地气了。重学Scala的过程也非常顺滑，就像和初恋情人旧情复燃一样水到渠成。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>Scala在现代语言里算得上非常全面，语言feature几乎要啥有啥，纯面向对象和函数式编程无缝对接，同时背靠JVM，可以作为无缝调用Java的库，简直是一门站在巨人的肩膀上的语言。因为有非常好的类型推导，是一门具有动态语言风格的编译型语言。因为5年没关注JVM方面的东西，只能推测这些年来Scala是怎么从一个学院型语言转向工业型语言的了。首先一个是Twitter等众多互联网公司开始使用Scala，这使得Scala在互联网服务方面有了许多开源沉淀。第二一个是Scala之父Martin Ordersky从学院教授成为typesafe的创始人，有了商业公司的支持，也让Scala能够更好的服务于工业界，避免闭门造车的尴尬。</p><p>最早Scala的并发模型是Actor，后面Scala放弃了自己官方实现的Actor，把这块全部交给了akka(反正这个项目也是typesafe支持的)，转用了Promise/Future这种基于事件的异步并发模型。就个人感受来说，future的代码写起来更舒服，比actor这种异类来的简单。和5年前相比，Scala放弃了不少纯Scala实现的标准库，而是直接使用Java的，这使得Scala的Library非常精简，几乎都是必要的，同时也方便Java程序员转向Scala，不得不说是这也是一步好棋。</p><p>对于函数式编程方面，因为我之前也没有过什么纯函数式编程语言的经验，单就Scala来说，函数式编程的风格确实能给代码带来非常简洁直观的写码体验。同时大量闭包的应用，也可以做到很多面向对象做不到的事情。同时Scala也是一门纯粹的面向对象的语言，一切皆对象。Scala 2.12也重点优化了JVM byte code生成方面，利用JVM 8的特性，生成执行效率更高的代码，毕竟Scala是在JVM上的语言。</p><p>Scala优点非常多，但也不是没有缺点，这里说说最困扰我的一些问题吧。首先一个，Scala太难了，这意味你很难组建一个水平很高性价比也很高的Scala团队，很难在spring根深蒂固的Java团队中推广Scala，除非他们的自驱力非常强，有学习新东西的动力。</p><p>第二个就是Scala的二进制不兼容问题，目前有2.10和2.11两个主流版本，2.12刚刚release不久，为了1-2年内，可能有三个主流版本并存，虽然语法是兼容的，但2.10和2.11在库上还是有很大差别的。比如2.10就<a href="http://underscore.io/blog/posts/2016/10/11/twenty-two.html" title="Scala and 22">不支持超过22个field</a>的case class、元组什么的，神奇的magic num。虽然目前来说问题不大，但未来可能遇到很多问题，比如我们用spark 1.6是Scala 2.10的，未来一些新的第三方库可能就没有Scala 2.10的版本了，那这些库就没办法在spark里用了，除非升级spark，但这种成本一般会很大。</p><p>第三个是官方库落后开源库，比较典型的是Try/Future这些，因为Twitter算是用Scala最多的互联网公司了，他们也开源了很多很好的Scala工具，但Twitter有很多自己的实现，大概是之前官方库没有这些功能，所以当后面官方添加了这些库以后，使用twitter生态系统的开发者就会面临很尴尬的事情，twitter的框架只用自己的实现，而别的第三方库又用了官方实现，这就很难受。</p><p>第四个就是sbt的问题，真的太慢了，特别是躲在GFW后瑟瑟发抖的中国用户。如果不翻墙，构建项目时可能一整天都解析不了依赖。就算翻了墙，Scala自己的分析速度也让人惆怅。</p><p>第五个就是Scala是一个JVM语言，作为前c/c++开发者，多么希望能用Scala写的程序可以直接编译成二进制啊。当然有一个scala-native项目，就是要这么干，但这个项目目前还在很早期的阶段，就现在看来我认为还有以下一些问题：</p><ul><li>非官方支持，纯社区化开发，目前虽然可用，但还在很早期的阶段</li><li>还使用慢的要死的sbt作为构建工具</li><li>Scala很多标准库是用Java的，因此scala-native需要实现这些java库</li></ul><p>总的来说，Scala已经成为我目前的第一工作语言了，毕竟可以写Java程序还不用写Java代码。</p><h2 id="web技术栈-1"><a href="#web技术栈-1" class="headerlink" title="web技术栈"></a>web技术栈</h2><h3 id="finatra"><a href="#finatra" class="headerlink" title="finatra"></a>finatra</h3><p>用过很多Scala的web框架(目前我们这边后端服务多是restful)，比如spary/akka-http, xitrum, colossus，play等，目前觉得最好用的就是finatra。Twitter开源的，所以不用担心它能不能在生产环境用的问题。finatra的性能也非常不错，如果写一个web服务，我的第一选择就是finatra。当然，也有很多让我不爽的地方，比如不支持websocket；基于finagle/twitter-server构建，需要了解的东西太多；twitter future才是第一公民等等。当然这些都不妨碍我痛并爱着finatra，因为其他框架也或多或少有这样那样的问题。如果有人让我推荐Scala的web框架，我首推finatra。</p><h3 id="akka"><a href="#akka" class="headerlink" title="akka"></a>akka</h3><p>对akka的使用基本是玩票性质的，虽然是用在一个线上服务的很核心的功能里。akka给我的第一感觉是复杂，也确实复杂，它的目标是一个一站式分布式高性能高容错服务解决方案，因此学习成本相对较高。同时actor的系统设计模式也和之前完全不同。不过akka会作为我2017重点去学习的东西的。</p><h3 id="slick"><a href="#slick" class="headerlink" title="slick"></a>slick</h3><p>一个函数式编程风格的orm框架，还挺好用的，写一些需要用到mysql的web服务还是很方便的，也是typesafe支持的项目。然而就是文档语焉不详，学习成本挺高。</p><h1 id="2017展望"><a href="#2017展望" class="headerlink" title="2017展望"></a>2017展望</h1><p>2017年的学习目标不出意外的话，应该在Rust, Ocaml, Haskell之中选择，当然最近php7的势头不错，也有可能玩一下世界上最好的语言。</p><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><p>也是一门现代语言，目标是取代c/c++成为底层系统开发语言，甚至也有用rust写的操作系统。目前rust也是非常年轻，但语言feature，构建工具这些我觉得比go强很多。目前从rust的标准库来看，这门语言还不太适合作为我的工作语言候选，因为它主要还是关注底层。倒是第三方库百家争鸣，一些重要的feature也都是第三方库实现，比如async i/o，routine, future这些，不知道官方打算怎么收编这些库。已经错过了Go和Scala的成长，不希望再错过rust了，因此rust是我2017年的第一目标。</p><h2 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h2><p>因为函数式编程的缘故，特别像学习一门纯的函数式编程语言，Haskell正是FP的佼佼者之一，因此也考虑学一下haskell，而且haskell还能编译成二进制，这很重要。</p><h2 id="OCaml"><a href="#OCaml" class="headerlink" title="OCaml"></a>OCaml</h2><p>对Ocaml感兴趣纯粹是因为有一天翻facebook在github上的开源项目，发现很多Ocaml写的项目，所以有点像学一下这门语言。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>看看2018年的时候，能总结一些什么吧。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
            <tag> Go </tag>
            
            <tag> 一年一语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小试Apache Kudu之基础篇</title>
      <link href="/2016/12/27/xiao-shi-apache-kudu-zhi-ji-chu-pian/"/>
      <url>/2016/12/27/xiao-shi-apache-kudu-zhi-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p><a href="http://kudu.apache.org/" title="A new addition to the open source Apache Hadoop ecosystem, Apache Kudu completes Hadoop&#39;s storage layer to enable fast analytics on fast data.">kudu</a>是Cloudera贡献给Apache的项目，号称是新一代的Hadoop存储，目前还在Beta阶段，但已经有一些企业在用了，比如小米，就曾经给kudu站过台，小米和Cloudera有一些合作的。</p><p>最早知道这个东西，是在某次面试，面一个搞hadoop的，当时因为在用hive，而hive一般改数据是很不方便的，只能按partition去load，我就问那哥们有啥好的解决方案，当时他就提到了kudu。</p><p>那会kudu才0.5版本，感觉还很初级阶段，所以一直懒得研究了。最近发现kudu已经发布了1.1.0版本，感觉已经有点稳定了，所以打算拿kudu来搞事情。</p><h1 id="Apache-Kudu"><a href="#Apache-Kudu" class="headerlink" title="Apache Kudu"></a>Apache Kudu</h1><p>kudu是构建在hadoop生态系统中的一个列存储引擎，官方号称的特性：</p><ul><li>Fast processing of OLAP workloads.</li><li>Integration with MapReduce, Spark and other Hadoop ecosystem components.</li><li>Tight integration with Cloudera Impala, making it a good, mutable alternative to using HDFS with Parquet.</li><li>Strong but flexible consistency model, allowing you to choose consistency requirements on a per-request basis, including the option for strict-serializable consistency.</li><li>Strong performance for running sequential and random workloads simultaneously.</li><li>Easy to administer and manage with Cloudera Manager.</li><li>High availability. Tablet Servers and Masters use the Raft Consensus Algorithm, which ensures that as long as more than half the total number of replicas is available, the tablet is available for reads and writes. For instance, if 2 out of 3 replicas or 3 out of 5 replicas are available, the tablet is available.</li><li>Reads can be serviced by read-only follower tablets, even in the event of a leader tablet failure.</li><li>Structured data model.</li></ul><p>官方也给了一些应用场景：</p><ul><li>Reporting applications where newly-arrived data needs to be immediately available for end users</li><li>Time-series applications that must simultaneously support:<ul><li>queries across large amounts of historic data</li><li>granular queries about an individual entity that must return very quickly</li></ul></li><li>Applications that use predictive models to make real-time decisions with periodic refreshes of the predictive model based on all historic data</li></ul><p>总的来说，kudu+impala的组合，号称可以做到传统OLAP/OLTP的结合，提供海量数据分析的同时，也可以对数据进行增删改。之前曾经用过hbase上的SQL引擎phoenix，速度还是很慢的，很难做一些用户体验敏感的统计分析应用。所以这次把玩kudu+impala的目的，也是看看kudu在提供海量数据存储的同时，能否兼顾查询速度。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>kudu的安装分为两部分，一个是kudu本身的安装，另外一个是安装kudu版本的impala，公司这边用的CDH5.8，装起来比较简单，需要注意的是CDH原本带的impala是不支持kudu的，需要重新安装impala_kudu才行，而且我是删了以后重新安装了一遍。</p><h2 id="kudu"><a href="#kudu" class="headerlink" title="kudu"></a>kudu</h2><p>kudu的安装比较简单，添个parcels就行了，也不需要什么特殊设置，唯一注意的是<code>fs_wal_dir</code>和<code>fs_data_dirs</code>两个参数，前者可以和后者值相同，但不能是后者的子目录。另外需要注意的是，如果在一台服务器上，需要同时运行kudu master和kudu tablet，这两个值需要设置为不同的值，否则就会导致服务无法启动。</p><h2 id="impala-kudu"><a href="#impala-kudu" class="headerlink" title="impala_kudu"></a>impala_kudu</h2><p>安装impala_kudu时遇到问题较多，因为kudu版本迭代比较快，导致文档更新不及时，虽然启动起来没问题，但是建表出现了一些问题。之前我们的impala用了sentry管理权限，但是设置起来很麻烦，所以这次就去掉了。</p><p>需要配置的一共有两点：</p><ul><li><code>Impala Service Environment Advanced Configuration Snippet (Safety Valve)</code>需要加上<code>IMPALA_KUDU=1</code>，这个用中文UI还搜不到，换了英文UI才搜到</li><li><code>Impala Daemon Command Line Argument Advanced Configuration Snippet (Safety Valve)</code>需要配置master的地址，例如<code>-kudu_master_hosts=10.0.1.1:7051</code>，不知道为毛Cloudera Manager为毛不会自己配置</li></ul><p>另外启动impala-shell时，也需要启动impala_kudu版本的，可以通过alternatives修改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">alternatives --display impala-shellalternatives --set impala-shell  /opt/cloudera/parcels/IMPALA_KUDU-2.7.0-3.cdh5.9.0.p0.10/bin/impala-shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>搞定之后，启动impala-shell，执行<code>select if(version() like &#39;%KUDU%&#39;, &quot;all set to go!&quot;, &quot;check your configs&quot;) as s;</code>，如果看到</p><pre class="line-numbers language-none"><code class="language-none">Query: select if(version() like &#39;%KUDU%&#39;, &quot;all set to go!&quot;, &quot;check yourconfigs&quot;) as s+----------------+| s              |+----------------+| all set to go! |+----------------+Fetched 1 row(s) in 0.02s----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就说明可以用了。</p><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p>kudu的文档里的建表语句已经不能在最新版本上用了，<a href="https://issues.cloudera.org/browse/IMPALA-2848" title="Simplify creation of a new Kudu table">IMPALA-2848</a>这个issue已经“简化”了建表语句，同时原来的已经不能用了……这里给个新的例子吧：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CREATE TABLE realtime.binlog (    pk string PRIMARY key,    exec_time STRING,    db_name STRING,    table_name STRING,    event_type STRING,    entry_type STRING,    is_ddl boolean,    before STRING,    after STRING,    ts bigint,    salt bigint)DISTRIBUTE BY HASH INTO 64 BUCKETSSTORED AS KUDU;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>STORED AS KUDU</code>取代了原先的table properties的方式。</p><h1 id="next…"><a href="#next…" class="headerlink" title="next…"></a>next…</h1><p>打算用canal+kudu+impala搞一个mysql binlog搜集查询系统，这样历史的数据变动，就可以记录下来了，定位问题什么的也方便了许多。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="http://kudu.apache.org/docs/">Introducing Apache Kudu</a></li><li><a href="https://www.cloudera.com/documentation/betas/kudu/0-5-0/topics/kudu_installation.html">Installing Kudu</a></li><li><a href="https://www.cloudera.com/documentation/betas/kudu/0-5-0/topics/kudu_impala.html">Installing and Using Impala With Kudu</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
            <tag> kudu </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot学习笔记</title>
      <link href="/2016/12/27/spring-boot-xue-xi-bi-ji/"/>
      <url>/2016/12/27/spring-boot-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="坑了。。。"><a href="#坑了。。。" class="headerlink" title="坑了。。。"></a>坑了。。。</h1><p>这篇blog已经不打算填坑了，一来以后不太会用spring-boot，二来坑填的也没啥意义，所以就这样吧。</p><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>搞Java那还是在5年前上大学的时候，那个时候spring印象中还是2.x，那个时候用spring还要写一大堆的xml配置，简直蛋疼无比。用Java做web开发也是各种蛋疼，还有各种框架，除了spring还有structs/hibernate/ibatis等等。<br>因为团队都是做Java的，而且前段时间也接手了几个SpringMVC的模块，才知道Spring已经进入了4.x的时代了，而且也有了很大改变，更适合于现代互联网web开发了，也不用写什么xml了。所以准备找时间重新学习一下spring4，而且<a href="http://spring.io/">spring.io</a>新推出了一个叫做spring-boot的“微框架”，更适合于做快速web开发。</p><h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><h2 id="pom-xml模板"><a href="#pom-xml模板" class="headerlink" title="pom.xml模板"></a>pom.xml模板</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>myproject<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Inherit defaults from Spring Boot --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0.BUILD-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Add typical dependencies for a web application --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Package as an executable jar --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Add Spring repositories --></span>    <span class="token comment">&lt;!-- (you don't need this if you are using a .RELEASE version) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>spring-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo.spring.io/snapshot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>spring-milestones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo.spring.io/milestone<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>spring-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo.spring.io/snapshot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>spring-milestones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo.spring.io/milestone<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尽管spring-boot还支持除了maven以外的一些构建工具，但是然并卵，生产管理还是用maven的居多，graddle有空可以看看。如果不想用<code>&lt;parent&gt;</code>引入相关依赖，也可以用以下配置：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- Import dependency management from Spring Boot --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0.BUILD-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="annotation"><a href="#annotation" class="headerlink" title="annotation"></a>annotation</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Java1.6时代，annotation其实并没有多大用处，但是在spring-boot中，几乎到处都是annotation。annotation本身有不少好处，可以增强代码复用，并且可以让代码可读性更好。</p><h3 id="RestController和-RequestMapping"><a href="#RestController和-RequestMapping" class="headerlink" title="@RestController和@RequestMapping"></a><code>@RestController</code>和<code>@RequestMapping</code></h3><p>前者用于标注一个类是controller类，可以辅助生成一些功能。而后者是用来标注rest对应的path的。</p><h2 id="spring-boot的一些模块"><a href="#spring-boot的一些模块" class="headerlink" title="spring-boot的一些模块"></a>spring-boot的一些模块</h2><p>| name                                   | 描述                                                                                                                            |<br>| spring-boot-starter                    | 主要包，包括auto-configuration支持、logging、YAML等                                                                             |<br>| spring-boot-starter-actuator           | 应用监控管理                                                                                                                    |<br>| spring-boot-starter-amqp               | Support for the “Advanced Message Queuing Protocol” via spring-rabbit.                                                          |<br>| spring-boot-starter-aop                | Support for aspect-oriented programming including spring-aop and AspectJ.                                                       |<br>| spring-boot-starter-artemis            | Support for “Java Message Service API” via Apache Artemis.                                                                      |<br>| spring-boot-starter-batch              | Support for “Spring Batch” including HSQLDB database.                                                                           |<br>| spring-boot-starter-cache              | Cache的抽象                                                                                                                     |<br>| spring-boot-starter-cloud-connectors   | Support for “Spring Cloud Connectors” which simplifies connecting to services in cloud platforms like Cloud Foundry and Heroku. |<br>| spring-boot-starter-data-elasticsearch | Support for the Elasticsearch search and analytics engine including spring-data-elasticsearch.                                  |<br>| spring-boot-starter-data-gemfire       | Support for the GemFire distributed data store including spring-data-gemfire.                                                   |<br>| spring-boot-starter-data-jpa           | Support for the “Java Persistence API” including spring-data-jpa, spring-orm and Hibernate.                                     |<br>| spring-boot-starter-data-mongodb       | Support for the MongoDB NoSQL Database, including spring-data-mongodb.                                                          |<br>| spring-boot-starter-data-redis         | Support for the REDIS key-value data store, including spring-data-redis.                                                        |<br>| spring-boot-starter-data-rest          | Support for exposing Spring Data repositories over REST via spring-data-rest-webmvc.                                            |<br>| spring-boot-starter-data-solr          | Support for the Apache Solr search platform, including spring-data-solr.                                                        |<br>| spring-boot-starter-freemarker         | Support for the FreeMarker templating engine.                                                                                   |<br>| spring-boot-starter-groovy-templates   | Support for the Groovy templating engine.                                                                                       |<br>| spring-boot-starter-hateoas            | Support for HATEOAS-based RESTful services via spring-hateoas.                                                                  |<br>| spring-boot-starter-hornetq            | Support for “Java Message Service API” via HornetQ.                                                                             |<br>| spring-boot-starter-integration        | Support for common spring-integration modules.                                                                                  |<br>| spring-boot-starter-jdbc               | Support for JDBC databases.                                                                                                     |<br>| spring-boot-starter-jersey             | Support for the Jersey RESTful Web Services framework.                                                                          |<br>| spring-boot-starter-jta-atomikos       | Support for JTA distributed transactions via Atomikos.                                                                          |<br>| spring-boot-starter-jta-bitronix       | Support for JTA distributed transactions via Bitronix.                                                                          |<br>| spring-boot-starter-mail               | Support for javax.mail.                                                                                                         |<br>| spring-boot-starter-mobile             | Support for spring-mobile.                                                                                                      |<br>| spring-boot-starter-mustache           | Support for the Mustache templating engine.                                                                                     |<br>| spring-boot-starter-security           | Support for spring-security.                                                                                                    |<br>| spring-boot-starter-social-facebook    | Support for spring-social-facebook.                                                                                             |<br>| spring-boot-starter-social-linkedin    | Support for spring-social-linkedin.                                                                                             |<br>| spring-boot-starter-social-twitter     | Support for spring-social-twitter.                                                                                              |<br>| spring-boot-starter-test               | Support for common test dependencies, including JUnit, Hamcrest and Mockito along with the spring-test module.                  |<br>| spring-boot-starter-thymeleaf          | Support for the Thymeleaf templating engine, including integration with Spring.                                                 |<br>| spring-boot-starter-velocity           | Support for the Velocity templating engine.                                                                                     |<br>| spring-boot-starter-web                | Support for full-stack web development, including Tomcat and spring-webmvc.                                                     |<br>| spring-boot-starter-websocket          | Support for WebSocket development.                                                                                              |<br>| spring-boot-starter-ws                 | Support for Spring Web Services.                                                                                                |</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="http://docs.spring.io/spring-boot/docs/1.4.0.BUILD-SNAPSHOT/reference/htmlsingle/">Spring Boot Reference Guide</a></li><li><a href="http://www.infoq.com/cn/articles/microframeworks1-spring-boot">深入学习微框架：Spring Boot</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spring-boot </tag>
            
            <tag> Spring </tag>
            
            <tag> restful </tag>
            
            <tag> web开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker上手101</title>
      <link href="/2016/04/11/docker-shang-shou-101/"/>
      <url>/2016/04/11/docker-shang-shou-101/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>久闻docker的大名，之前用daocloud也是用了docker，正好最近有时间，就简单研究了一下。为了避免以后忘记，这里写一篇简单的上手指南。</p><p>介绍docker概念的文章太多了，这里就不赘述了。docker的好处在于可以带着整个系统环境进行分发，避免了部署时各种依赖构建的痛苦。而且轻量级容器不仅可以隔离应用环境，还可以提高机器利用率。相对于虚拟化来说，docker更轻量级一些，避免了不必要的资源浪费。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><p>目前epel源上有docker，看之前的文章docker必须要3.x+以上的kernel，不过显然现在也支持2.6了，这对于还用着RHEL/CentOS 6的广大中国码农来说无疑是个好消息。安装非常简单：</p><p>首先，添加epel源：</p><blockquote><p>wget <a href="http://mirrors.aliyun.com/epel/epel-release-latest-6.noarch.rpm">http://mirrors.aliyun.com/epel/epel-release-latest-6.noarch.rpm</a> &amp;&amp; rpm -ivh epel-release-latest-6.noarch.rpm</p></blockquote><p>然后直接<br><code>$ sudo yum install -y docker-io</code></p><h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><p>先添加源<br><code>$ sudo apt-get install -y apt-transport-https</code></p><p>添加密钥<br><code>$ sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</code></p><p>添加源列表，按自己的系统来，我用的16.04，不过目前还没有对应的源，但是用wily的源:<br><code>deb https://apt.dockerproject.org/repo ubuntu-wily main</code></p><p>然后安装就行了<br><code>$ sudo apt-get update &amp;&amp; sudo apt-get install -y docker-engine</code></p><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><ul><li>查看镜像列表<code>sudo docker images</code></li><li>拉取镜像<code>sudo docker pull [image url]</code></li><li>启动镜像<code>sudo docker run -it golang:alpine /bin/sh</code></li><li>停止<code>sudo docker stop [container id]</code></li><li>删除镜像<code>sudo docker rmi [image id]</code></li><li>构建镜像<code>docker build -t liuyiding/java:1.0 .</code></li></ul><h1 id="自订镜像"><a href="#自订镜像" class="headerlink" title="自订镜像"></a>自订镜像</h1><p>首先要选择一个基础镜像作为构建自己的应用的镜像，这里推荐alpine linux系列的镜像，alpine是一个非常小的linux发行版，非常适合于构建docker镜像，不过官方的alpine不包括glibc，导致类似java都没法运行，我是以<code>frolvlad/alpine-glibc</code>为基础的。</p><p>一个简单的Java环境的Dockerfile例子:</p><pre class="line-numbers language-none"><code class="language-none">FROM frolvlad&#x2F;alpine-glibcMAINTAINER Liu Yiding&lt;odinushuaia@gmail.com&gt;RUN mkdir -p &#x2F;usr&#x2F;javaRUN mkdir -p &#x2F;appADD jdk.1.8.0_65.tar.gz &#x2F;usr&#x2F;java&#x2F;RUN ln -s &#x2F;usr&#x2F;java&#x2F;jdk.1.8.0_65 &#x2F;usr&#x2F;java&#x2F;defaultENV JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;defaultENV CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;rt.jarENV PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构建直接<code>docker build -t liuyiding/java:1.8 .</code>即可。</p><p>再来个自己应用的Dockerfile的例子：</p><pre class="line-numbers language-none"><code class="language-none">FROM liuyiding&#x2F;java:1.8MAINTAINER Liu Yiding&lt;odinushuaia@gmail.com&gt;RUN mkdir -p &#x2F;app&#x2F;uds&#x2F;logsADD uds-assembly-1.1.0.jar &#x2F;app&#x2F;uds&#x2F;ADD start.sh &#x2F;app&#x2F;uds&#x2F;EXPOSE 8888 9990 20880CMD [&quot;&#x2F;bin&#x2F;sh&quot;, &quot;&#x2F;app&#x2F;uds&#x2F;start.sh&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本上非常简单就把自己应用的环境构建好了，再分发的时候也方便。</p><h1 id="registry"><a href="#registry" class="headerlink" title="registry"></a>registry</h1><p>docker的registry相当于一个镜像仓库，可以把构建好的镜像直接push上去，其他的docker机器只要pull回来就可以直接用了。除了公开的dockerhub，还可以搭建自己私有的registry。方法也很简单，只要拉一个registry的镜像就好。比较麻烦的是它要求https协议，还要生成自己的证书，如果没有可以验证的证书，还得自己手动信任。</p><ul><li><p>生成证书</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;opt &amp;&amp; mkdir -p certs &amp;&amp; openssl req \-newkey rsa:4096 -nodes -sha256 -keyout certs&#x2F;domain.key \-x509 -days 365 -out certs&#x2F;domain.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在docker的机器上将domain.crt拷贝至<code>/etc/docker/certs.d/myregistrydomain.com:5000/ca.crt</code></p></li><li><p>安装运行docker-registry</p><pre class="line-numbers language-none"><code class="language-none"> #目前最新版是2.3.1，千万别用latest，因为latest指向的是一个非常低的版本，还是python实现的 $ sudo docker pull registry:2.3.1 $ sudo docker run -d \-v &#x2F;opt&#x2F;registry:&#x2F;var&#x2F;lib&#x2F;registry \-p 5000:5000 \-v &#x2F;opt&#x2F;certs:&#x2F;certs \-e REGISTRY_HTTP_TLS_CERTIFICATE&#x3D;&#x2F;certs&#x2F;domain.crt \-e REGISTRY_HTTP_TLS_KEY&#x3D;&#x2F;certs&#x2F;domain.key \--restart&#x3D;always --name registry registry:2.3.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>之后就可以用myregistrydomain.com:5000作为私有的registry了，在push之前需要打tag</p><pre class="line-numbers language-none"><code class="language-none">$ sudo docker tag liuyiding&#x2F;uds:1.1.0 myregistrydomain.com:5000&#x2F;liuyiding&#x2F;uds:1.1.0$ sudo docker push myregistrydomain.com:5000&#x2F;liuyiding&#x2F;uds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>总的来说，docker上手还是蛮简单的，如果有机会考虑推广一下。公司的线上机器资源利用率非常低，每个月阿里云上机器成本就一大堆，如果用上docker，肯定可以减少不少机器。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://www.docker.com/">docker.com</a></li><li><a href="https://www.gitbook.com/book/yeasy/docker_practice/details">Docker —— 从入门到实践</a></li><li><a href="https://www.v2ex.com/t/266876">如何部署一个 docker registry</a></li><li><a href="https://docs.docker.com/registry/insecure/">Insecure Registry</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> LXC </tag>
            
            <tag> 虚拟化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java/Scala杂记之三</title>
      <link href="/2016/03/28/java-scala-za-ji-zhi-san/"/>
      <url>/2016/03/28/java-scala-za-ji-zhi-san/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>话说前段时间在用spring-boot的时候，还想专门写一篇学习笔记，不过后来嫌麻烦就弃坑了，所以挪到这里简单谈一下好了。最近做了一个服务，最开始用spring-boot，写起来还算简单，但是感觉spring各种约定俗成太多了，如果要想用好需要看的东西太多了，尽管并不耽误做出来，但不求甚解心里还是不踏实。</p><p>后来无聊看了一下twitter的finatra，发现比akka-http/spray简单的多，也更符合常规restful框架的结构，于是用finatra重写了一遍。虽然finatra也有很多不尽如人意的地方，但总体感觉还算满意，写的代码多了不少，但是总体来说有那种一切掌握在手中的感觉。</p><h1 id="spring-boot"><a href="#spring-boot" class="headerlink" title="spring-boot"></a>spring-boot</h1><p>搞Java那还是在5年前上大学的时候，那个时候spring印象中还是2.x，那个时候用spring还要写一大堆的xml配置，简直蛋疼无比。用Java做web开发也是各种蛋疼，还有各种框架，除了spring还有structs/hibernate/ibatis等等。因为团队都是做Java的，而且前段时间也接手了几个SpringMVC的模块，才知道Spring已经进入了4.x的时代了，而且&gt;也有了很大改变，更适合于现代互联网web开发了，也不用写什么xml了。所以准备找时间重新学习一下spring4，而且<a href="http://spring.io/">spring.io</a>新推出了一个叫做spring-boot的“微框架”，更适合于做快速web开发。</p><p>总的来说spring-boot还是不错的，可以在写很少的代码的情况下完成很多功能，也有一套自己的模板，比如spring-data-cassandra用来读写cassandra都非常方便。</p><h2 id="整合spring-boot和dubbo"><a href="#整合spring-boot和dubbo" class="headerlink" title="整合spring-boot和dubbo"></a>整合spring-boot和dubbo</h2><p>之前的项目里用了dubbo，作为一个纯Java的RPC框架，dubbo用起来还是不错的，阿里开源的，侵入性也很小，基本上只要写spring的xml配置文件就好。不过dubbo已经很久没有更新过了，在整合到spring-boot中的时候，花了很多力气，主要也是因为自己对spring-boot的理解不到位。</p><p>之前一直用<code>@SpringBootApplication</code>的，没有写xml，但是dubbo是以xml的方式配的，而如果单加一个bean来启动dubbo的context又会无法注入其他bean，所以这里还是提供一个xml，让spring-boot在启动时读取并初始化dubbo。用<code>@ImportResource(&#123;&quot;classpath:META-INF/spring/application-context.xml&quot;&#125;)</code>即可指定，而在该配置文件中引入dubbo的配置文件即可。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:dubbo-provider.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="spring-boot中配置Hikari-CP"><a href="#spring-boot中配置Hikari-CP" class="headerlink" title="spring-boot中配置Hikari-CP"></a>spring-boot中配置Hikari-CP</h2><p>spring-boot中默认用的是数据库连接池是tomcat-cp，但是tomcat-cp的性能真是渣，既然有号称’the ultimate connection pool’之称的Hikari-CP为啥不用呢，替换也比较简单，在配置文件里指定Hikari-CP的datasourceClass，然后再写一个BeanConfig即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>odinliu<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span></span><span class="token class-name">HikariConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span></span><span class="token class-name">HikariDataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ComponentScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.datasource.username&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.datasource.password&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.datasource.url&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> dataSourceUrl<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.datasource.dataSourceClassName&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> dataSourceClassName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.datasource.poolName&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> poolName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.datasource.connectionTimeout&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> connectionTimeout<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.datasource.maxLifetime&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxLifetime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.datasource.maximumPoolSize&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.datasource.minimumIdle&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> minimumIdle<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.datasource.idleTimeout&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> idleTimeout<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.datasource.prepStmtCacheSize&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> prepStmtCacheSize<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.datasource.prepStmtCacheSqlLimit&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> prepStmtCacheSqlLimit<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">primaryDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Properties</span> dsProps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> dataSourceUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        dsProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        dsProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        dsProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"prepStmtCacheSize"</span><span class="token punctuation">,</span> prepStmtCacheSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        dsProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"prepStmtCacheSqlLimit"</span><span class="token punctuation">,</span> prepStmtCacheSqlLimit<span class="token punctuation">)</span><span class="token punctuation">;</span>        dsProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cachePrepStmts"</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        dsProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"useServerPrepStmts"</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> configProps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"dataSourceClassName"</span><span class="token punctuation">,</span> dataSourceClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"poolName"</span><span class="token punctuation">,</span> poolName<span class="token punctuation">)</span><span class="token punctuation">;</span>        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"maximumPoolSize"</span><span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"minimumIdle"</span><span class="token punctuation">,</span> minimumIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"minimumIdle"</span><span class="token punctuation">,</span> minimumIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"connectionTimeout"</span><span class="token punctuation">,</span> connectionTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"idleTimeout"</span><span class="token punctuation">,</span> idleTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"dataSourceProperties"</span><span class="token punctuation">,</span> dsProps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HikariConfig</span> hc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariConfig</span><span class="token punctuation">(</span>configProps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HikariDataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">(</span>hc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ds<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="sbt-assembly合并策略"><a href="#sbt-assembly合并策略" class="headerlink" title="sbt-assembly合并策略"></a>sbt-assembly合并策略</h1><p>Java里面最蛋疼的问题莫过于依赖冲突，引入各种包的冲突还可以用exclude解决，但是在打’fat-jar’时遇到冲突简直蛋疼菊紧。不过还在sbt可以自己写合并策略，这里记录几个常用的策略吧。</p><h2 id="修改包名大法"><a href="#修改包名大法" class="headerlink" title="修改包名大法"></a>修改包名大法</h2><p>之前在spark中访问cassandra时遇到过一个guava版本冲突的问题，CDH依赖的guava版本比较低，而cassandra需要调用新版本的接口，导致运行时异常，其实只要修改一下自己assembly的包名即可。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">assemblyShadeRules in assembly <span class="token operator">:</span><span class="token operator">=</span> Seq<span class="token punctuation">(</span>  ShadeRule<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"com.google.**"</span> <span class="token operator">-></span> <span class="token string">"shadeio.@1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>inAll<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="合并策略"><a href="#合并策略" class="headerlink" title="合并策略"></a>合并策略</h2><p>netty是很多Java/Scala第三方库都会以来的一个库，但是这个包会蛋疼的带一个<code>io.netty.versions.properties</code>文件，而这个文件各种冲突，其实只要带一个就ok了，这里可以写一个策略。除此之外如果还有包的冲突，也可以指定合并策略，具体如下：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">assemblyMergeStrategy in assembly <span class="token operator">:</span><span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token string">"BUILD"</span> <span class="token keyword">=></span> MergeStrategy<span class="token punctuation">.</span>discard  <span class="token keyword">case</span> m <span class="token keyword">if</span> m<span class="token punctuation">.</span>endsWith<span class="token punctuation">(</span><span class="token string">"io.netty.versions.properties"</span><span class="token punctuation">)</span> <span class="token keyword">=></span> MergeStrategy<span class="token punctuation">.</span>last  <span class="token keyword">case</span> PathList<span class="token punctuation">(</span><span class="token string">"org"</span><span class="token punctuation">,</span> <span class="token string">"aopalliance"</span><span class="token punctuation">,</span> xs @ _<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">=></span> MergeStrategy<span class="token punctuation">.</span>first  <span class="token keyword">case</span> other <span class="token keyword">=></span> MergeStrategy<span class="token punctuation">.</span>defaultMergeStrategy<span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="finatra"><a href="#finatra" class="headerlink" title="finatra"></a>finatra</h1><p>finatra是twitter开源的一个web框架，基于twitter的finagle和twitter-server进行开发，这个框架更像是“使用twitter开源库开发app”的demo，不清楚在twitter内部用的多不多。不过大概用了一下，感觉还可以，尽管很多功能都要自己写，但大体上还是能用的。finatra是模仿sinatra进行开发的，twitter之前是用的ruby，因此才会开发一套finatra吧。</p><p>finatra使用Google Guice作为IOC框架，比spring轻量许多。因为twitter-server自带admin监控台，所以对于服务可控性做的还是挺不错的。finatra中主要有三个概念，module/controller/filter。</p><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>可以看做是提供Guice依赖注入实例的对象，可以在module中管理相关的对象，而其他类中只要注入就好。</p><h1 id="slick"><a href="#slick" class="headerlink" title="slick"></a>slick</h1><p>在选用了finatra作为web框架之后，因为finatra只有web框架，并没有持久层框架，所以一番考虑之后还是选择了更Scala的slick作为持久层框架，一方面是slick就是用scala开发的，更idiomastic一些。另外一方面，slick是lightbend(typesafe)支持的框架，更官方一些。slick可以通过sql生成定义类，当然也可以手写，这里来个手写的例子。</p><h2 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">case</span> <span class="token keyword">class</span> TagDetail<span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> privilege<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> source<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tagType<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">class</span> TagTable<span class="token punctuation">(</span>tag<span class="token operator">:</span> Tag<span class="token punctuation">)</span> <span class="token keyword">extends</span> Table<span class="token punctuation">[</span>TagDetail<span class="token punctuation">]</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token string">"uds_tag"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> id <span class="token operator">=</span> column<span class="token punctuation">[</span><span class="token builtin">Long</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> O<span class="token punctuation">.</span>PrimaryKey<span class="token punctuation">,</span> O<span class="token punctuation">.</span>AutoInc<span class="token punctuation">)</span>  <span class="token keyword">def</span> name <span class="token operator">=</span> column<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> privilege <span class="token operator">=</span> column<span class="token punctuation">[</span>Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"privilege"</span><span class="token punctuation">,</span> O<span class="token punctuation">.</span>Default<span class="token punctuation">[</span>Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Some<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> source <span class="token operator">=</span> column<span class="token punctuation">[</span>Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"source"</span><span class="token punctuation">,</span> O<span class="token punctuation">.</span>Default<span class="token punctuation">[</span>Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Some<span class="token punctuation">(</span><span class="token string">"小麦公社"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> tagType <span class="token operator">=</span> column<span class="token punctuation">[</span>Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> O<span class="token punctuation">.</span>Default<span class="token punctuation">[</span>Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Some<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token operator">*</span> <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> privilege<span class="token punctuation">,</span> source<span class="token punctuation">,</span> tagType<span class="token punctuation">)</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span> <span class="token punctuation">(</span>TagDetail<span class="token punctuation">.</span>tupled<span class="token punctuation">,</span> TagDetail<span class="token punctuation">.</span>unapply<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token annotation punctuation">@Singleton</span><span class="token keyword">class</span> TagDao <span class="token annotation punctuation">@Inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>db<span class="token operator">:</span> MySQLDriver<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>DatabaseDef<span class="token punctuation">,</span> <span class="token annotation punctuation">@DBExecutionContext</span> dbec<span class="token operator">:</span> ExecutionContext<span class="token punctuation">)</span> <span class="token keyword">extends</span> Logging <span class="token punctuation">&#123;</span>  <span class="token keyword">implicit</span> <span class="token keyword">val</span> ec <span class="token operator">=</span> dbec  <span class="token keyword">val</span> tableQuery <span class="token operator">=</span> TableQuery<span class="token punctuation">[</span>TagTable<span class="token punctuation">]</span>  <span class="token keyword">val</span> pagedQuery <span class="token operator">=</span> Compiled<span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token operator">:</span> ConstColumn<span class="token punctuation">[</span><span class="token builtin">Long</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token operator">:</span> ConstColumn<span class="token punctuation">[</span><span class="token builtin">Long</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">=></span> tableQuery<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span>take<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> getTagById<span class="token punctuation">(</span>tid<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> q <span class="token operator">=</span> tableQuery<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>id <span class="token operator">==</span><span class="token operator">=</span> tid<span class="token punctuation">)</span>    db<span class="token punctuation">.</span>run<span class="token punctuation">(</span>q<span class="token punctuation">.</span>result<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">def</span> insertTag<span class="token punctuation">(</span>tag<span class="token operator">:</span> TagDetail<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//val q = tableQuery.map(x => (x.name, x.privilege, x.source, x.tagType)) += (tag.name, tag.privilege, tag.source, tag.tagType)</span>    <span class="token keyword">val</span> q <span class="token operator">=</span> tableQuery returning tableQuery<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>id<span class="token punctuation">)</span> into <span class="token punctuation">(</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token keyword">=></span> ret<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>id <span class="token operator">=</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+=</span> tag    db<span class="token punctuation">.</span>run<span class="token punctuation">(</span>q<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">def</span> getAllTags <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    db<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tableQuery<span class="token punctuation">.</span>result<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">def</span> getTagsByPage<span class="token punctuation">(</span>drop<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> take<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    db<span class="token punctuation">.</span>run<span class="token punctuation">(</span>pagedQuery<span class="token punctuation">(</span>drop<span class="token punctuation">,</span> take<span class="token punctuation">)</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">def</span> getCount <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    db<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tableQuery<span class="token punctuation">.</span>length<span class="token punctuation">.</span>result<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">def</span> deleteTagById<span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    db<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tableQuery<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>id <span class="token operator">==</span><span class="token operator">=</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">def</span> updatePrivilegeById<span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> privilege<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> q <span class="token operator">=</span> <span class="token keyword">for</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">&lt;-</span> tableQuery <span class="token keyword">if</span> t<span class="token punctuation">.</span>id <span class="token operator">==</span><span class="token operator">=</span> id <span class="token punctuation">&#125;</span> <span class="token keyword">yield</span> t<span class="token punctuation">.</span>privilege    db<span class="token punctuation">.</span>run<span class="token punctuation">(</span>q<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Some<span class="token punctuation">(</span>privilege<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">def</span> updateNameById<span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> q <span class="token operator">=</span> <span class="token keyword">for</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">&lt;-</span> tableQuery <span class="token keyword">if</span> t<span class="token punctuation">.</span>id <span class="token operator">==</span><span class="token operator">=</span> id <span class="token punctuation">&#125;</span> <span class="token keyword">yield</span> t<span class="token punctuation">.</span>name    db<span class="token punctuation">.</span>run<span class="token punctuation">(</span>q<span class="token punctuation">.</span>update<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">def</span> updateTagById<span class="token punctuation">(</span>tag<span class="token operator">:</span> TagDetail<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> q <span class="token operator">=</span> <span class="token keyword">for</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">&lt;-</span> tableQuery <span class="token keyword">if</span> t<span class="token punctuation">.</span>id <span class="token operator">==</span><span class="token operator">=</span> tag<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span> <span class="token keyword">yield</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span> t<span class="token punctuation">.</span>privilege<span class="token punctuation">,</span> t<span class="token punctuation">.</span>source<span class="token punctuation">,</span> t<span class="token punctuation">.</span>tagType<span class="token punctuation">)</span>    db<span class="token punctuation">.</span>run<span class="token punctuation">(</span>q<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name<span class="token punctuation">,</span> tag<span class="token punctuation">.</span>privilege<span class="token punctuation">,</span> tag<span class="token punctuation">.</span>source<span class="token punctuation">,</span> tag<span class="token punctuation">.</span>tagType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="future-amp-promise"><a href="#future-amp-promise" class="headerlink" title="future&amp;promise"></a>future&amp;promise</h1><p>最早scala的并发范式是actor，后来akka发展太好了，最新版本的scala已经把actor从标准库移除了。不过scala仍然提供新的并发范式future。future基本上就是异步非阻塞回调的范式，说实话我不太喜欢异步回调，简直反人类。在scala项目中用cassandra，其实是没有官方库的，因此用的java的driver，但为了和slick的异步保持风格统一，因此用future/promise去封装了一下，简单例子如下。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token annotation punctuation">@Singleton</span><span class="token keyword">class</span> UserIdDao <span class="token annotation punctuation">@Inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>accessor<span class="token operator">:</span> UserIdAccessor<span class="token punctuation">,</span>                          <span class="token annotation punctuation">@CassandraExecutionContext</span> cassandraExecutionContext<span class="token operator">:</span> ExecutionContext<span class="token punctuation">)</span>  <span class="token keyword">extends</span> Logging <span class="token punctuation">&#123;</span>  <span class="token keyword">implicit</span> <span class="token keyword">val</span> ec <span class="token operator">=</span> cassandraExecutionContext  <span class="token keyword">def</span> getRowkey<span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> Future<span class="token punctuation">[</span>Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> p <span class="token operator">=</span> Promise<span class="token punctuation">[</span>Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    Future <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> user <span class="token operator">=</span> accessor<span class="token punctuation">.</span>getRowkeyByKey<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          p<span class="token punctuation">.</span>success<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          p<span class="token punctuation">.</span>success<span class="token punctuation">(</span>Some<span class="token punctuation">(</span>user<span class="token punctuation">.</span>getRowkey<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> e<span class="token operator">:</span> Exception <span class="token keyword">=></span>          warn<span class="token punctuation">(</span>s<span class="token string">"get [$key] rowkey failed, $e"</span><span class="token punctuation">)</span>          p<span class="token punctuation">.</span>failure<span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    p<span class="token punctuation">.</span>future  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>future本来是期货的意思，这里其实挺贴近的，表示将来可以拿到的结果。另外一个option，是期权的意思，其实也是表示这个结果可能拿得到，可能拿不到。用这俩单词来表达对应的概念简直233333.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>总得来说Scala还是一门很有表现力的语言的，特别是twitter的一些服务从ruby转向scala之后，给scala社区带来了很多工业界的想法，也让这门语言更贴近于生产。尽管最近看到linkedin从scala转向java8，因为这样那样的理由，但不得不说scala作为后来者没有那么多历史包袱，更容易成为一门具有生产力的语言。当然sbt确实慢的不行行了，还有二进制包版本不兼容之类的问题也是很麻烦。</p><p>还是希望lightbend/typesafe多投入一些精力在scala/sbt上，少一些商业的东西，让社区环境更好。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Scala </tag>
            
            <tag> sbt </tag>
            
            <tag> spring-boot </tag>
            
            <tag> Hikari-CP </tag>
            
            <tag> finatra </tag>
            
            <tag> slick </tag>
            
            <tag> future </tag>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近搞Hadoop集群迁移踩的坑杂记</title>
      <link href="/2016/02/02/zui-jin-gao-hadoop-ji-qun-qian-yi-cai-de-keng-za-ji/"/>
      <url>/2016/02/02/zui-jin-gao-hadoop-ji-qun-qian-yi-cai-de-keng-za-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>最近一段时间都在搞集群迁移。最早公司的hadoop数据集群实在阿里云上的，机器不多，大概4台的样子，据说每个月要花7000多。从成本的角度，公司采购了4台2手服务器(E5-2420 v2 * 2+96G内存)在办公室自己搭数据集群。虽然说机房条件艰苦，没空调就算了，还有暖气呢，但是机器还是挺不错的，比阿里云32G的的机器强多了，4台大概2万，还不够阿里云烧3个月的，理论上只要能用3个月就已经很划算了。</p><p><img src="http://7xi8sr.com1.z0.glb.clouddn.com/network.png" alt="网络拓扑图"></p><p>硬件分配方面，因为磁盘不大，外加后续还有一些其他用途，所以有三台机器直接用的物理机，一台拿出来用esxi做虚拟机。用阿里云很蛋疼的是，要想通过内网访问还得走vpn，而且vpn不太稳定，也就1m左右的速度，和阿里云宣称的上传无限速差多了。而且还有一个蛋疼的问题是，从阿里云的机器访问办公网，由于没有那么多公网ip，所以只能在办公网搭一套vpn，那边需要访问的服务通过vpn接入进来。</p><p>之前公司的hadoop是用的<a href="http://ambari.apache.org/" title="Apache Ambari">ambari</a>搭的，<a href="http://www.cloudera.com/" title="cloudera">cloudera</a>的CDH和ambari的HDP都用过一阵子，个人感觉上HDP没有CDH稳定，而且CDH的管理程序易用性也好于HDP。而且cloudera的市场占有率也好于ambari，参考CentOS之于Red Hat，这种商业公司的开源社区产品在稳定性上应该是好于纯社区版的，尽管ambari后面也有<a href="http://www.hortonworks.com/" title="Hortonworks">Hortonworks</a>这家公司支撑，但是还是更倾向于用CDH。</p><p>既然连全家桶的都变了，自然每一个服务的版本也不可能完全对应兼容，话说回来，哪怕相同全家桶的不同版本，也无法保证兼容不是。</p><h1 id="迁移相关"><a href="#迁移相关" class="headerlink" title="迁移相关"></a>迁移相关</h1><h2 id="Hive导入-导出"><a href="#Hive导入-导出" class="headerlink" title="Hive导入/导出"></a>Hive导入/导出</h2><p>Hive作为一个“数据库”，竟然没有一个逻辑备份工具，我也是醉了。虽然没看过Hive架构、源码，不过从最近的迁移工作中感觉Hive基本文件是存在HDFS上的，而HiveMetaStore(MySQL/PostgreSQL)存储一些元信息，而SQL查询就是编译成MapReduce在HDFS进行查询，所以Hive相对来说比较慢。基本上Hive在HDFS就是采用一定序列化方式的文本文件而已。尽管Hive wiki上有一篇关于怎么<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+ImportExport" title="LanguageManual ImportExport">导入/导出</a>的方法的介绍，但是一点不好用，而且其实没那么麻烦。刚也说了，其实Hive基本数据就是存在HDFS上的，都是存在类似/somepath/hive/warehouse/dbname.db/tablename下的，而schema是存在MetaStore的，如果两边是相同的配置方式，其实只要把warehouse全部distcp到目标集群对应目录下，再把MetaStore给dump还原回去就好了。不过因为这次迁移是从HDP(用的MySQL)迁移到CDH(用的PostgreSQL)，所以并没有直接还原MetaStore，而且用<code>show create table &lt;table_name&gt;;</code>打印出创建Schema的语句，然后在新的目标集群创建新表，然后再通过类似命令<code>load data inpath &#39;/tmp/credit_apply/dt=2016-01-21&#39; into table credit_apply partition (dt=&#39;2016-01-21&#39;);</code>直接导入就好。这里写了一个Perl脚本来生成导入语句：</p><p>这个脚本用来导入本地文件系统数据文件，HDFS上也是类似的，只要稍微改下，去掉inpath前的local。提供的输入是文件完整路径列表，里面需要包含<code>dbname.db/tablename</code>这类信息。</p><pre class="line-numbers language-perl" data-language="perl"><code class="language-perl"><span class="token comment">#!/usr/bin/env perl</span><span class="token keyword">use</span> strict<span class="token punctuation">;</span><span class="token keyword">use</span> warnings<span class="token punctuation">;</span><span class="token keyword">my</span> <span class="token variable">%filter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># ./xiaomai_report.db/zhuanti_site/dt=2015-12-27/000000_0</span><span class="token comment"># load data inpath '/tmp/credit_apply/dt=2016-01-12' into table credit_apply partition (dt='2016-01-12');</span><span class="token keyword">while</span> <span class="token punctuation">(</span>defined <span class="token punctuation">(</span><span class="token keyword">my</span> <span class="token variable">$line</span> <span class="token operator">=</span> <span class="token filehandle symbol">&lt;STDIN></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    chomp <span class="token variable">$line</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$line</span> <span class="token operator">=~</span> <span class="token regex">m/\/([^\/]+)\.db\/([^\/]+)\/(\w\w)=(\d&#123;4&#125;-*\d\d-*\d\d)\/(?:([^=]+)=([^\/]+)\/)*/</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">my</span> <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string">"$1\t$2\t$3\t$4"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>defined <span class="token variable">$5</span> <span class="token operator">and</span> defined <span class="token variable">$6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string">"$key\t$5\t$6"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">unless</span> <span class="token punctuation">(</span>exists <span class="token variable">$filter</span><span class="token punctuation">&#123;</span><span class="token variable">$key</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>defined <span class="token variable">$5</span> <span class="token operator">and</span> defined <span class="token variable">$6</span> <span class="token operator">and</span> <span class="token variable">$5</span> <span class="token operator">ne</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">print</span> STDOUT <span class="token string">"load data local inpath '/var/lib/hive/data/$1.db/$2/$3=$4/$5=$6' OVERWRITE into table $1.$2 "</span><span class="token punctuation">;</span>                <span class="token keyword">print</span> STDOUT <span class="token string">"partition($3='$4',$5='$6');\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">print</span> STDOUT <span class="token string">"load data local inpath '/var/lib/hive/data/$1.db/$2/$3=$4' OVERWRITE into table $1.$2 "</span><span class="token punctuation">;</span>                <span class="token keyword">print</span> STDOUT <span class="token string">"partition($3='$4');\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$filter</span><span class="token punctuation">&#123;</span><span class="token variable">$key</span><span class="token punctuation">&#125;</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HBase-Phoenix-导入-导出"><a href="#HBase-Phoenix-导入-导出" class="headerlink" title="HBase(Phoenix)导入/导出"></a>HBase(Phoenix)导入/导出</h2><p>相较于Hive的傻大粗的迁移方式，HBase就人性化多了，提供了各种小工具方便<a href="https://hbase.apache.org/book.html#_export" title="Export is a utility that will dump the contents of table to HDFS in a sequence file">导入/导出</a>。</p><blockquote><p>$ bin/hbase org.apache.hadoop.hbase.mapreduce.Export <tablename> <outputdir> [<versions> [<starttime> [<endtime>]]]</p></blockquote><p>可以看看手册，不仅仅有导入导出工具，还有一些诸如RowCount的小工具(虽然RowCount并没有输出结果……)，不过坑的是导出好像不能导出表结构，还得自己手动创建，也是蛋疼，好在HBase其实只是知道CF就行了。最坑的是Phoenix，它是有schema的，但是Phoenix坑爹的是它没有命令查看怎么创建的schema，你说你这不是坑爹么……</p><h2 id="CDH安装Apache-Phoenix"><a href="#CDH安装Apache-Phoenix" class="headerlink" title="CDH安装Apache Phoenix"></a><a href="http://blog.cloudera.com/blog/2015/05/apache-phoenix-joins-cloudera-labs/" title="Apache Phoenix Joins Cloudera Labs">CDH安装Apache Phoenix</a></h2><p>值得注意的是，不像HDP，CDH全家桶里并不包含Phoenix，你得单点。好在<a href="http://www.cloudera.com/developers/cloudera-labs.html" title="Cloudera Labs">Cloudera Labs</a>提供了发行版以便尽可能简单的安装使用。那篇文件里介绍的比较详细，怕Cloudera挂了，所以这里留个备胎:</p><ol><li>在<a href="http://archive.cloudera.com/cloudera-labs/phoenix/" title="phoenix">parcels</a>里面添加对应的分支，5.4之前的5.x对应1.1版本，而5.5是对应1.2版本，因为HBase/Spark版本和Phoenix有很大关系，所以还是要找对应的版本，不过好在即使添加错了，安装时也会告诉你错了，就是浪费时间罢了。。。。</li><li>在ClouderaManager里安装</li><li>在HBase的Configuration里修改<code>hbase-site.xml</code>，添加：<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.regionserver.wal.codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>之后重启HBase就可以支持Phoenix了，其实就是添加Phoenix的jar包。</li></ol><p>另外，虽然Phoenix吹的挺牛逼，但是对于复杂查询，速度还是特别慢，默认的timeout是1分钟，很多查询远远不够，可以在<code>hbase-site.xml</code>里添加配置：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 很多文章说是改这个，而且HDP的配置也是加的这个，但是我简单看了一下Phoenix的源码，这个值默认是10分钟，下面keepAlive是1分钟，所以应该调大下面的值，两个都调也可以&lt;property>  &lt;name>phoenix.query.timeoutMs&lt;/name>  &lt;value>180000&lt;/value>&lt;/property>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>phoenix.query.keepAliveMs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>180000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Hive添加额外的Jar包"><a href="#Hive添加额外的Jar包" class="headerlink" title="Hive添加额外的Jar包"></a>Hive添加额外的Jar包</h2><p>公司之前的Hive用了<a href="https://github.com/rcongiu/Hive-JSON-Serde" title="Hive-JSON-Serde">Hive-JSON-Serde</a>用于让Hive支持JSON，他们用的时候一般要在脚本前面加上<code>add jar /path/to/jar</code>，但是这样多蛋疼，让Hive启动时带着多方便。实际上Hive提供了一个环境变量<code>HIVE_AUX_JARS_PATH</code>用来引用额外的jar包，而CM的Hive配置里有Hive Auxiliary JARs Directory这一项，在相关机器上创建一个目录，加到这个环境变量里即可。</p><h2 id="Spark直接引入额外Jar包-Phoenix集成"><a href="#Spark直接引入额外Jar包-Phoenix集成" class="headerlink" title="Spark直接引入额外Jar包(Phoenix集成)"></a>Spark直接引入额外Jar包(Phoenix集成)</h2><p>因为公司用了Phoenix，而Spark默认是不加在相关Driver的，但是每次启动spark-shell/spark-submit时都要带上<code>--jars</code>参数又有点蛋疼，所以还是在CM的Spark配置里找到spark-env.sh的配置，加上：</p><pre class="line-numbers language-none"><code class="language-none">SPARK_DIST_CLASSPATH&#x3D;&quot;$SPARK_DIST_CLASSPATH:&#x2F;opt&#x2F;cloudera&#x2F;parcels&#x2F;CLABS_PHOENIX&#x2F;lib&#x2F;phoenix&#x2F;lib&#x2F;*&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改sqoop的job信息"><a href="#修改sqoop的job信息" class="headerlink" title="修改sqoop的job信息"></a>修改sqoop的job信息</h2><p>公司定时导数据用的sqoop，这是一个RDBMS/Hive之间互导数据的工具，据说sqoop2已经是一个服务了，但是我们用的还是sqoop1代，看起来像是一个普通工具，修改它的任务信息其实也挺简单的，直接修改<code>~/.sqoop/metastore.db.script</code>就行，看起来它是一个sql脚本，但是却是每次运行sqoop都重新执行一遍，大概用的一个mem数据库，不知道可不可以配置成持久化数据库，反正现在弱爆了，本来java启动就慢，每次启动再重构一遍数据表也是蛋疼。不过好处就是改了方便，直接改文本文件就行。</p><h1 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h1><p>终于进入了喜大普奔的踩坑环节，因为hadoop全家桶的各个服务实际上都是独立的社区，所以难免会有兼容性问题，所以这里就变成了各种坑让人踩。像CDH/HDP这种全家桶一般都是有过相关兼容性测试的，所以其实还好，如果自己from scratch搭建一套，估计问题更多，下面说几个比较典型的吧。</p><h2 id="phoenix-spark不支持Spark-1-5"><a href="#phoenix-spark不支持Spark-1-5" class="headerlink" title="phoenix-spark不支持Spark 1.5"></a>phoenix-spark不支持Spark 1.5</h2><p>CDH5.5直接把Spark升级到了1.5版本，而5.4版还是在用1.3，真是挺激进。而phoenix-spark的依赖是Spark1.4，1.5有一些内部结构的变动导致了一些不兼容的问题，详见番号<a href="https://issues.apache.org/jira/browse/PHOENIX-2287" title="Spark Plugin Exception - java.lang.ClassCastException: org.apache.spark.sql.catalyst.expressions.GenericMutableRow cannot be cast to org.apache.spark.sql.Row">PHOENIX-2287</a>，这是我实实在在遇到的一个问题，就是用spark-sql读取phoenix产生的问题，抛出异常：</p><blockquote><p>java.lang.ClassCastException: org.apache.spark.sql.catalyst.expressions.GenericMutableRow cannot be cast to org.apache.spark.sql.Row</p></blockquote><p>找到了官方JIRA上对应的CASE(<a href="https://issues.apache.org/jira/browse/PHOENIX-2287" title="Spark Plugin Exception - java.lang.ClassCastException: org.apache.spark.sql.catalyst.expressions.GenericMutableRow cannot be cast to org.apache.spark.sql.Row">PHOENIX-2287</a>)，看到在phoenix-spark的4.6.0和4.5.3版本已经修复了这个问题，遗憾的是Cloudera Labs提供的phoenix版本正好是4.5.2，并且他们还没提供更新的版本。这个问题直接影响到我们的一个服务的功能了，所以只能自己动手修复。好在开源大法好，cloudera早就将他们的Phoenix的发行版的源码开源了，可以去它的<a href="https://github.com/cloudera-labs/phoenix" title="cloudera-labs/phoenix">github</a>上clone出来。并且自己下载2287上面的patch，用<code>git apply</code>功能打上补丁自己build一个phoenix-spark的jar出来替换掉原先的。需要注意的是，一定要checkout出自己CDH对应的的分支，5.5对应是1.2。替换了jar包之后重启HBase就可以了。</p><h2 id="Hue用sqlite性能问题"><a href="#Hue用sqlite性能问题" class="headerlink" title="Hue用sqlite性能问题"></a>Hue用sqlite性能问题</h2><p>刚装好CDH时Hue总遇到提示<a href="https://community.cloudera.com/t5/Web-UI-Hue-Beeswax/DatabaseError-database-is-locked/td-p/14070" title="DatabaseError: database is locked">DatabaseError: database is locked</a>，而且执行查询经常看不见结果，需要过一会点Recent Queries才能看结果。搜了一下原来是Hue默认用的是sqlite，但是在多用户场景下会存在性能问题，大概是个大锁，所以需要修改一下让它使用pgsql或者mysql。直接在CM的Hue的配置里搜索database相关的就能改了，还是挺方便的。可以参考<a href="http://www.cloudera.com/documentation/enterprise/latest/topics/cdh_ig_hue_database.html" title="Using an External Database for Hue Using the Command Line">reference3</a>。</p><h2 id="CDH5-5中Spark-Hive对于-t分隔符的兼容性问题"><a href="#CDH5-5中Spark-Hive对于-t分隔符的兼容性问题" class="headerlink" title="CDH5.5中Spark-Hive对于\t分隔符的兼容性问题"></a>CDH5.5中Spark-Hive对于\t分隔符的兼容性问题</h2><p>这是遇到的一个比较诡异的问题，google上不知道怎么表达好，也没找到类似的按理，但确实是一个可以复现的问题。之前公司有一些Hive表是用<code>\t</code>分隔字段的，但是导入到新的集群之后，在spark中查询结果，返回的字段全是NULL，将分隔符改成<code>\u0001</code>之后或者没有partition的表就没有任何问题，猜想是一个spark1.5和hive1.1之间兼容性的问题吧，反正spark1.5的兼容性已经见怪不怪了。这个问题我在<a href="http://apache-spark-user-list.1001560.n3.nabble.com/SparkSQL-return-all-null-fields-when-FIELDS-TERMINATED-BY-t-and-have-a-partition-tt26056.html" title="SparkSQL return all null fields when FIELDS TERMINATED BY &#39;\t&#39; and have a partition.">spark-user邮件组</a>里面咨询过，不知道是我表达不好，还是怎样，反正没人鸟我，这个邮件组点击率和回复率都挺低，社区不给力啊。</p><p>下面说一下复现方法：</p><ul><li><p>在hive中创建<code>\t</code>分隔的表，并导入<code>\t</code>分隔的文本文件</p><pre class="line-numbers language-none"><code class="language-none">$ cat &#x2F;var&#x2F;lib&#x2F;hive&#x2F;dataimport&#x2F;mendian&#x2F;target&#x2F;test.txt1       test2       xxxx# in hivehive&gt; create table &#96;tmp.test_d&#96;(&#96;id&#96; int, &#96;name&#96; string) PARTITIONED BY (&#96;dt&#96; string) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;\t&#39;; hive&gt; load data local inpath &#39;&#x2F;var&#x2F;lib&#x2F;hive&#x2F;dataimport&#x2F;mendian&#x2F;target&#x2F;test.txt&#39; OVERWRITE into table tmp.test_d partition(dt&#x3D;&#39;2016-01-25&#39;); hive&gt; select * from tmp.test_d; 1       test    2016-01-25 2       xxxx    2016-01-25 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在spark中查看数据，可以看到除partition字段以外，值全是null</p><pre class="line-numbers language-none"><code class="language-none">scala&gt; sqlContext.sql(&quot;select * from tmp.test_d&quot;).collect res9: Array[org.apache.spark.sql.Row] &#x3D; Array([null,null,2016-01-25], [null,null,2016-01-25]) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>目前解决办法只能是不用<code>\t</code>，全部用<code>\u0001</code>。</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>这次迁移数据还是踩了一些坑的，主要是兼容性方面的问题，所以做集群迁移时，保险期间还是选用相同版本的比较靠谱。总体来说，这两周还是收获颇丰的，至少快速的熟悉了一把hadoop相关的一些工具，对hive/hbase/sqoop/phoenix/spark有了一些新的了解。之前在百度时，基本只用过hadoop streaming，那时候还没有这么多上层工具。现在虽然说对这些工具只是一个了解熟悉，远没有精通，但至少丰富了自己的技术栈，以后遇到问题时可以选择的解决办法又多了一些。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="http://blog.cloudera.com/blog/2015/05/apache-phoenix-joins-cloudera-labs/">Apache Phoenix Joins Cloudera Labs</a></li><li><a href="https://community.cloudera.com/t5/Web-UI-Hue-Beeswax/DatabaseError-database-is-locked/td-p/14070">DatabaseError: database is locked</a></li><li><a href="http://www.cloudera.com/documentation/enterprise/latest/topics/cdh_ig_hue_database.html">Using an External Database for Hue Using the Command Line</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Phoenix </tag>
            
            <tag> HBase </tag>
            
            <tag> Spark </tag>
            
            <tag> Hadoop </tag>
            
            <tag> CDH </tag>
            
            <tag> HDP </tag>
            
            <tag> ambari </tag>
            
            <tag> cloudera </tag>
            
            <tag> Hive </tag>
            
            <tag> Hue </tag>
            
            <tag> 集群迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop流水账之HBase网页库设计</title>
      <link href="/2016/01/04/hadoop-liu-shui-zhang-zhi-hbase-wang-ye-ku-she-ji/"/>
      <url>/2016/01/04/hadoop-liu-shui-zhang-zhi-hbase-wang-ye-ku-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>话说之前挖了一套<a href="http://odinliu.com/2015/11/09/%E5%A4%A7%E5%9E%8B%E5%9D%91%E4%B9%8Bnaive-qie%E6%8A%93%E5%8F%96%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/" title="大型坑之naive-qie抓取系统设计">Naive-Qie</a>的坑，然而<code>Naive-PageDB</code>的坑还没填好呢，我就在脑海里重构了一遍。主要问题在于系统用于生产环境时，随着数据量的增长，就必然会面临单机服务能力有限的问题，虽然数据拆分倒是不难，但是有现成的轮子，自己造一套未免太麻烦。最近正好在学习hadoop的一些上层工具，而且在前厂离职前，也在做数据处理(html/xml等)迁移至hadoop的相关调研。HBase是hadoop上的一套类key-value存储服务，比较适合网页库的场景，所以考虑采用HBase做存储。当然，用上了复杂系统之后，复杂度上去了，可控性降低了，实际上并不是简单可依赖。</p><p>当初知识储备不足，第一个相当的是直接在HDFS上存文件，再用Hadoop Streaming做处理。但其实Hadoop Streaming多以行为单位进行处理，如果强行用于网页的话，还需要自己定义分割程序，有些麻烦。HBase毕竟还是基于key-value的，对于url-content这样类型的数据处理，肯定要比HDFS支持的好。</p><p>以下文章并无工程背景，完全基于作者YY，如果错误，还请帮忙指出。</p><h1 id="HBase基本知识"><a href="#HBase基本知识" class="headerlink" title="HBase基本知识"></a>HBase基本知识</h1><p>HBase是Google BigTable的一个开源实现，正好之前看过一些源码的leveldb实际上也是一个BigTable的屌丝版实现，所以在了解HBase的过程中，有一些概念还是比较熟悉的。</p><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><h3 id="表-Table"><a href="#表-Table" class="headerlink" title="表(Table)"></a>表(Table)</h3><p>HBase里的表给人的概念其实是RDBMS里的库，但是表相当于库里相同主键的数据join到一起了，因此一个表里包含若干row，每个row就是一条数据记录，也就是KV中的key。</p><h3 id="行-Row"><a href="#行-Row" class="headerlink" title="行(Row)"></a>行(Row)</h3><p>Row就是一条数据，一个Row包括了RowKey和一个或者多个Column。RowKey是按字典序进行排序的，因此对于key的设计有助于把相关联的数据保存在一起，一种经典的key设计方式就是使用域名的倒序，例如<code>com.odinliu.hbase</code>和<code>com.odinliu.hadoop</code>，可以把这些数据存在一起，便于批量查询。</p><h3 id="列-Column"><a href="#列-Column" class="headerlink" title="列(Column)"></a>列(Column)</h3><p>Column由<code>&lt;Column Family&gt;:&lt;Column Qualifier&gt;</code>组成，有点像RDBMS中的列。</p><h3 id="列族-Column-Family"><a href="#列族-Column-Family" class="headerlink" title="列族(Column Family)"></a>列族(Column Family)</h3><p>CF有点像RDBMS的表的概念，一个CF中包括了若干Column以及它们的值，CF通常是存储在一起的(HBase是一个面向列的KV存储)。每一个CF都可以设置自己的存储配置，例如是否需要内存缓存、数据如何压缩等等，一个Table中的Row均有相同的若干CF，尽管它们可以为空值，空值不占存储空间。</p><h3 id="Column-Qualifier"><a href="#Column-Qualifier" class="headerlink" title="Column Qualifier"></a>Column Qualifier</h3><p>也就是通常意义上的列，每个列族中的CQ不一定完全一样。</p><h3 id="Cell"><a href="#Cell" class="headerlink" title="Cell"></a>Cell</h3><p>RowKey, Column Family, Column Qualifier, Value, Timestamp唯一确定的某一个版本的值。</p><h3 id="Timestamp"><a href="#Timestamp" class="headerlink" title="Timestamp"></a>Timestamp</h3><p>由于区分版本，可以是数据写入到RegionServer的时间，也可以是用户指定的时间。</p><h1 id="网页库设计"><a href="#网页库设计" class="headerlink" title="网页库设计"></a>网页库设计</h1><p>上面的内容是N久前挖的坑了，后面网页库这部分，目前生产系统也在用，因为量不大，所以暂时也没啥问题。之前挖的大型坑系列，本来是有一篇pagedb的，而且都挖了一点了，不过暂时不打算填了，以这篇代替吧。</p><h2 id="pagedb"><a href="#pagedb" class="headerlink" title="pagedb"></a>pagedb</h2><p>考虑到相同模板的网页可能会批量处理，而HBase的rowkey是按字典序的，因此rowkey的设计是<reverse_domain>@<handler>@<query_string>，例如<code>http://www.example.com/list?id=123</code>的rowkey为<code>com.example.www@/list@id=123</code>。column family两个，<code>mt</code>存储一些网页基本信息，如<code>url</code>, <code>content-type</code>等，<code>dt</code>存储页面内容。即<code>mt:url</code>, <code>mt:cnty</code>, <code>dt:cont</code>三个字段。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://hbase.apache.org/book.html">Apache HBase Reference Guide</a></li><li><a href="http://0b4af6cdc2f0c5998459-c0245c5c937c5dedcca3f1764ecc9b2f.r43.cf2.rackcdn.com/9353-login1210_khurana.pdf">Introduction to HBase Schema Design</a></li><li><a href="http://jimbojw.com/wiki/index.php?title=Understanding_Hbase_and_BigTable">Understanding HBase and BigTable</a></li><li><a href="http://static.googleusercontent.com/media/research.google.com/zh-CN//archive/bigtable-osdi06.pdf">Bigtable: A Distributed Storage System for Structured Data</a></li><li><a href="http://ianvarley.com/UT/MR/Varley_MastersReport_Full_2009-08-07.pdf">No Relation: The Mixed Blessings of Non-Relational Databases</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
            <tag> hadoop流水账 </tag>
            
            <tag> HBase </tag>
            
            <tag> 数据库设计 </tag>
            
            <tag> 数据模型 </tag>
            
            <tag> 网页库 </tag>
            
            <tag> pagedb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java/Scala杂记之二</title>
      <link href="/2015/12/14/java-scala-za-ji-zhi-er/"/>
      <url>/2015/12/14/java-scala-za-ji-zhi-er/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>最近的Java/Scala项目又积累了一些工具，研究不深，权当记录。至于spray系列，等把akka研究明白再写吧(巨型坑)。</p><h1 id="typesafe-config"><a href="#typesafe-config" class="headerlink" title="typesafe-config"></a><a href="https://github.com/typesafehub/config" title="Configuration library for JVM languages">typesafe-config</a></h1><p>最早接触这个配置库是在spray的时候，当时觉得语法还不错，而且这个库是纯Java写的，没有什么第三方依赖，这是最爽的，省得解决依赖蛋疼。</p><p>配置:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;application.confSqlExecutorJDBC &#123;  zkQuorum &#x3D; &quot;datanode0,datanode1,datanode2&quot;  zkPort &#x3D; 2181  zkRoot &#x3D; &quot;&#x2F;hbase-unsecure&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先来个Java的例子:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Config</span> conf <span class="token operator">=</span> <span class="token class-name">ConfigFactory</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> zkQuorum <span class="token operator">=</span> <span class="token string">"datanode0,datanode1,datanode2"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>conf<span class="token punctuation">.</span><span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token string">"SqlExecutorJDBC.zkQuorum"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>zkQuorum <span class="token operator">=</span> conf<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"SqlExecutorJDBC.zkQuorum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"zkQuorum[&#123;&#125;]"</span><span class="token punctuation">,</span> zkQuorum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> zkPort <span class="token operator">=</span> <span class="token number">2181</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>conf<span class="token punctuation">.</span><span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token string">"SqlExecutorJDBC.zkPort"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>zkPort <span class="token operator">=</span> conf<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"SqlExecutorJDBC.zkPort"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"zkPort[&#123;&#125;]"</span><span class="token punctuation">,</span> zkPort<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> zkRoot <span class="token operator">=</span> <span class="token string">"/hbase-unsecure"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>conf<span class="token punctuation">.</span><span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token string">"SqlExecutorJDBC.zkRoot"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>zkRoot <span class="token operator">=</span> conf<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"SqlExecutorJDBC.zkRoot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"zkRoot[&#123;&#125;]"</span><span class="token punctuation">,</span> zkRoot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再来个Scala的例子:</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> config <span class="token operator">=</span> ConfigFactory<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">lazy</span> <span class="token keyword">val</span> zkQuorum <span class="token operator">=</span> Try<span class="token punctuation">(</span>config<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"SqlExecutorJDBC.zkQuorum"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"datanode0,datanode1,datanode2"</span><span class="token punctuation">)</span><span class="token keyword">lazy</span> <span class="token keyword">val</span> zkPort <span class="token operator">=</span> Try<span class="token punctuation">(</span>conf<span class="token punctuation">.</span>getInt<span class="token punctuation">(</span>SqlExecutorJDBC<span class="token punctuation">.</span>zkPort"<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token number">2181</span><span class="token punctuation">)</span><span class="token keyword">lazy</span> <span class="token keyword">val</span> zkRoot <span class="token operator">=</span> Try<span class="token punctuation">(</span>conf<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"SqlExecutorJDBC.zkRoot"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"/hbase-unsecure"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用起来挺简单的，而且支持更多层级的配置，支持的类型也更多，比原始的.properties更强大，可读性更好，也比xml写起来更方便，所以以后有配置就用这个了。不过话说来，JVM的配置化简直是扯淡，所有程序都打在jar包里，改一个配置还得先解包，改完再重新打包，这和写程序里好像并没有什么卵区别啊？</p><h1 id="HikariCP"><a href="#HikariCP" class="headerlink" title="HikariCP"></a><a href="https://github.com/brettwooldridge/HikariCP" title="光 HikariCP・A solid high-performance JDBC connection pool at last">HikariCP</a></h1><p>说来也巧，最早知道HikariCP也是在研究spray的时候，话说现在HikariCP现在号称JDBC界性能第一连接池。当初搞JavaEE的时候，用iBatis比较多，对连接池基本采用配置封装，没有实际用过，那时候还是c3p0的天下，看来c3p0躺着睡觉的时候，HikariCP已经成为了老大。一开始还以为这个库是个日本人写的，不过在github上看了一下作者，是个在日本生活的欧美人。废话不多说，直接上代码：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">class</span> SqlExecutorJDBC<span class="token punctuation">(</span>zkQuorum<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> zkPort<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> zkRoot<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">val</span> logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>getClass<span class="token punctuation">)</span>  <span class="token keyword">val</span> config <span class="token operator">=</span> <span class="token keyword">new</span> HikariConfig<span class="token punctuation">(</span><span class="token punctuation">)</span>  config<span class="token punctuation">.</span>setJdbcUrl<span class="token punctuation">(</span>s<span class="token string">"jdbc:phoenix:$zkQuorum:$zkPort:$zkRoot"</span><span class="token punctuation">)</span>  config<span class="token punctuation">.</span>addDataSourceProperty<span class="token punctuation">(</span><span class="token string">"cachePrepStmts"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>  config<span class="token punctuation">.</span>addDataSourceProperty<span class="token punctuation">(</span><span class="token string">"prepStmtCacheSize"</span><span class="token punctuation">,</span> <span class="token string">"250"</span><span class="token punctuation">)</span>  config<span class="token punctuation">.</span>addDataSourceProperty<span class="token punctuation">(</span><span class="token string">"prepStmtCacheSqlLimit"</span><span class="token punctuation">,</span> <span class="token string">"2048"</span><span class="token punctuation">)</span>  config<span class="token punctuation">.</span>setAutoCommit<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  config<span class="token punctuation">.</span>setMaximumPoolSize<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>  config<span class="token punctuation">.</span>setMinimumIdle<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> HikariDataSource<span class="token punctuation">(</span>config<span class="token punctuation">)</span>  <span class="token keyword">def</span> getTaskResult<span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> sql <span class="token operator">=</span> s<span class="token string">"SELECT DATA_VALUE,DATA_STATUS FROM DATA_STATUS WHERE DATA_KEY='$key'"</span>    Try<span class="token punctuation">(</span>ds<span class="token punctuation">.</span>getConnection<span class="token punctuation">)</span> <span class="token keyword">match</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> Success<span class="token punctuation">(</span>conn<span class="token punctuation">)</span> <span class="token keyword">=></span>        Try<span class="token punctuation">(</span>conn<span class="token punctuation">.</span>createStatement<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>executeQuery<span class="token punctuation">(</span>removeTailing<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">match</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">case</span> Success<span class="token punctuation">(</span>rs<span class="token punctuation">)</span> <span class="token keyword">=></span>            Try<span class="token punctuation">(</span>rs<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> value <span class="token operator">=</span> Try<span class="token punctuation">(</span>rs<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> status <span class="token operator">=</span> Try<span class="token punctuation">(</span>rs<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span>            Try<span class="token punctuation">(</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">(</span>value<span class="token punctuation">,</span> status<span class="token punctuation">)</span>          <span class="token keyword">case</span> Failure<span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token keyword">=></span>            logger<span class="token punctuation">.</span>warn<span class="token punctuation">(</span>s<span class="token string">"execute sql failed, $&#123;e.toString&#125;"</span><span class="token punctuation">)</span>            Try<span class="token punctuation">(</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"-1"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token keyword">case</span> Failure<span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token keyword">=></span>        logger<span class="token punctuation">.</span>warn<span class="token punctuation">(</span>s<span class="token string">"get connection from cp failed, $&#123;e.toString&#125;"</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"-1"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">def</span> stop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ds<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> removeTailing<span class="token punctuation">(</span>query<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>query <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> query<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> query<span class="token punctuation">.</span>endsWith<span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> query<span class="token punctuation">.</span>substring<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> query<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    query  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HikariCP初始化配置的方式很多，因为我项目里已经选用了typesafe-config做配置管理，就不采用配置文件的形式初始化了，直接用JDBC url，这里是一个apache phoenix的例子。之前没怎么用过JDBC，ResultSet在读取值之前先next一下真是蛋疼，这里卡了我好久……这里有一处比较蛋疼的，因为我要主动归还连接给连接池，所以要调用<code>Connection.close()</code>方法，但是本来可以只写一个Try的，但是为保留一个conn的引用，不得不多写了一些。</p><h1 id="Apache-Phoenix"><a href="#Apache-Phoenix" class="headerlink" title="Apache Phoenix"></a><a href="http://phoenix.apache.org/" title="High performance relational database layer over HBase for low latency applications">Apache Phoenix</a></h1><p>apache的大坑之一，简单的说是一个构建在HBase上的SQL引擎，将普通SQL语句翻译成HBase的基本api，兼容JDBC，对SQL的支持并不是什么都可以，有它自己的<a href="http://phoenix.apache.org/language/index.html" title="Grammar">语法</a>。这个项目坑的地方在于，文档一点不实用，只说了它是干嘛，能用SQL语法怎么怎么样，但是一个example都没有，可能觉得JDBC大家应该都会吧……坑的第二个地方在于引入一个<code>phoenix-core</code>的包导致maven编译出现各种依赖冲突的问题，它自己依赖的下面都是各种冲突，真是搞不清楚maven的机制。</p><p>这个东西是之前<a href="http://www.jone.tech/" title="焦文斌的blog">焦老师</a>引入用来做DMP数据存储的，之前用了一个开源的<a href="https://github.com/jdye64/PhoenixRESTServer" title="Proxy Server to accepting REST requests and translating them into the appropritate Phoenix JDBC calls">PhoenixRESTServer</a>，但是这货有一个问题，就是经常整个服务阻塞住了，不清楚是因为发生异常导致服务状态无法恢复，还是它的连接池的连接并不释放(没主动调用close)的缘故，反正就是很坑，我一怒之下就给改成自己通过JDBC连接了。不过这东西Google都搜不到，貌似是Hortonworks的一个员工自己做的。</p><p>具体怎么用在上面HikariCP的例子已经有说明了，所以这里也不多说。总之东西倒是不错的东西，就是文档太简略了。而且最好自己通过JDBC连接，千万别用那个坑爹的PhoenixRESTServer。</p><h1 id="spray-json"><a href="#spray-json" class="headerlink" title="spray-json"></a><a href="https://github.com/spray/spray-json" title="spray-json is a lightweight, clean and efficient JSON implementation in Scala.">spray-json</a></h1><p>话说spray让我接触了好多库，<code>spray-json</code>是独立发布的一个json的序列化反序列化工具，通过引入一个叫做json protocal的东西，定义如果把json序列化成一个scala对象，这点比jackson这种序列化成map的要好一些，毕竟强类型支持。这个库的文档还是比较细的(相对于其他spray的文档)，所以先不上例子了。强类型不方便的地方在于写转换方法比较麻烦，这点和go的变准json库差太多了，go的那个是目前我认为用起来最方便的。<code>spray-json</code>还有一个比较坑的地方在于，它写反序列化方法时，模式匹配的竟然是一个序列，特么的序列是什么鬼，如果有字段忽略的情况，那顺序就变了啊，好歹给个map啊……</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>已经到了第二期，JVM写一个服务真是蛋疼菊紧，1/3时间写代码，1/3时间等编译和JVM启动，1/3时间解决引入库之间的依赖版本冲突，还是Go又快又好啊。希望到了下一期，就可以写spray/slick/akka了……</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://github.com/typesafehub/config">Configuration library for JVM languages</a></li><li><a href="https://github.com/brettwooldridge/HikariCP">光 HikariCP・A solid high-performance JDBC connection pool at last</a></li><li><a href="http://phoenix.apache.org/">High performance relational database layer over HBase for low latency applications</a></li><li><a href="https://github.com/spray/spray-json">spray-json is a lightweight, clean and efficient JSON implementation in Scala</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Scala </tag>
            
            <tag> typesafe-config </tag>
            
            <tag> HikariCP </tag>
            
            <tag> Phoenix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小试ESXi做虚拟化</title>
      <link href="/2015/12/07/xiao-shi-esxi-zuo-xu-ni-hua/"/>
      <url>/2015/12/07/xiao-shi-esxi-zuo-xu-ni-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>之前家里的机器做虚拟化用的是KVM，后来听小胖推荐了ESXi，之前用KVM比较不爽的是clone虚拟机实在太慢了，而且没有啥好用的管理软件，virt-manager需要有x-window软件，而mac os上那货又不太好使(不清楚是网速问题，还是软件问题)，所以这次公司的服务器搞虚拟化决定试试ESXi，反正公司的机器，玩坏了又不要钱，2333333</p><p>很多Linux的分发都是以iso文件的形式，它是一个光盘镜像，一般来说刻录成光盘安装毫无问题，但是现在有光驱的机器越来越少了，一般还是u盘安装方便一些。但是Linux的u盘安装略蛋疼，按各种wiki上给的dd的方法，根本不好使。之前弄CentOS的安装盘，用的<a href="http://sourceforge.net/projects/win32diskimager/" title="win32 disk imager">win32 disk imager</a>在windows下制作启动u盘没啥问题，但是这两天想弄个ESXi的启动盘就不好使了，当然目前不确定是因为我们服务器不支持6.0，还是win32_disk_imager不支持ESXi。因为公司这边手头没有Windows，用mac的dd试了n次均启动失败，而且最麻烦的是想修改isolinux.cfg也因为镜像是只读的没办法改。找了半天资料才在<a href="http://pubs.vmware.com/vsphere-55/index.jsp?topic=/com.vmware.vsphere.install.doc/GUID-33C3E7D5-20D0-4F84-B2E3-5CD33D32EAA8.html" title="Format a USB Flash Drive to Boot the ESXi Installation or Upgrade">VMWare官网</a>找到可以用的了。</p><h1 id="制作安装u盘方法"><a href="#制作安装u盘方法" class="headerlink" title="制作安装u盘方法"></a>制作安装u盘方法</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>一台装有syslinux 4.x以上的linux，ESXi的镜像，注意选对版本，我看官方文档，老的55xx/56xx系列的CPU是6.0不支持的，只能下5.5版本。</p><h2 id="格式化u盘"><a href="#格式化u盘" class="headerlink" title="格式化u盘"></a>格式化u盘</h2><p>假如u盘是/dev/sdb，<code>fdisk /dev/sdb</code>进入fdisk的界面。按以下步骤操作：</p><ul><li>按<code>d</code>删除原有分区</li><li>按<code>n</code>新建分区</li><li>按<code>t</code>格式化为fat32文件系统</li><li>按<code>a</code>设置分区1为活动分区</li><li>按<code>p</code>打印当前分区</li><li>按<code>w</code>写入分区</li></ul><p>之后执行<code>mkfs.vfat -F 32 -n USB /dev/sdb1</code>，初始化工作就OK了</p><h2 id="用syslinux制作启动盘"><a href="#用syslinux制作启动盘" class="headerlink" title="用syslinux制作启动盘"></a>用syslinux制作启动盘</h2><p>注意<code>sdb</code>是设备，<code>sdb1</code>是分区</p><pre class="line-numbers language-none"><code class="language-none"># syslinux &#x2F;dev&#x2F;sdb1# cat &#x2F;usr&#x2F;share&#x2F;syslinux&#x2F;mbr.bin &gt; &#x2F;dev&#x2F;sdb# mkdir &#x2F;mnt&#x2F;usb &amp;&amp; mount &#x2F;dev&#x2F;sdb1 &#x2F;mnt&#x2F;usb# mkdir &#x2F;mnt&#x2F;cdrom &amp;&amp; mount -o loop VMware-VMvisor-Installer-5.x.x-XXXXXX.x86_64.iso &#x2F;mnt&#x2F;cdrom# cp -rf &#x2F;mnt&#x2F;cdrom&#x2F;* &#x2F;mnt&#x2F;usb&#x2F;# mv &#x2F;mnt&#x2F;usb&#x2F;isolinux.cfg &#x2F;mnt&#x2F;usb&#x2F;syslinux.cfg# mv &#x2F;usr&#x2F;share&#x2F;syslinux&#x2F;menu.c32 &#x2F;mnt&#x2F;usb&#x2F;### 这两步改完syslinux.cfg再执行。# umount &#x2F;mnt&#x2F;usb&#x2F;# umount &#x2F;mnt&#x2F;cdrom&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来修改<code>syslinux.cfg</code>，将<code>APPEND -c boot.cfg</code>改为<code>APPEND -c boot.cfg -p 1</code>。</p><h1 id="ESXi杂记"><a href="#ESXi杂记" class="headerlink" title="ESXi杂记"></a>ESXi杂记</h1><p>ESXi安装过程就不详述了，没遇到啥问题。比较蛋疼的是VMWare只提供了Windows的管理工具，并没有提供Mac下的图形工具，但是Fusion Pro是可以管理虚拟机的，而且，Fusion 8破解非常简单，只要一个序列号就行了……</p><h2 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h2><p>在管理界面的Diagnose中把ssh打开，因为fusion里没有克隆，只能通过命令行来完成，克隆时最好还是停个机吧。</p><pre class="line-numbers language-none"><code class="language-none"># 克隆磁盘vmkfstools -i src.vmdk -d thin dest.vmdk# 拷贝配置文件cp -rf &#x2F;vmfs&#x2F;volumes&#x2F;&lt;current-uuid&gt;&#x2F;src &#x2F;vmfs&#x2F;volumes&#x2F;&lt;current-uuid&gt;&#x2F;destrm -rf &#x2F;vmfs&#x2F;volumes&#x2F;&lt;current-uuid&gt;&#x2F;dest&#x2F;*.logrm -rf &#x2F;vmfs&#x2F;volumes&#x2F;&lt;current-uuid&gt;&#x2F;dest&#x2F;*.nvramfor file in &#96;ls &#x2F;vmfs&#x2F;volumes&#x2F;&lt;current-uuid&gt;&#x2F;dest&#x2F;&#96;; do SUF&#x3D;&#96;echo $file | awk -F&#39;.&#39; &#39;&#123; print $NF &#125;&#39;&#96;; mv &#x2F;vmfs&#x2F;volumes&#x2F;&lt;current-uuid&gt;&#x2F;dest&#x2F;$file &#x2F;vmfs&#x2F;volumes&#x2F;&lt;current-uuid&gt;&#x2F;dest&#x2F;dest.$SUF; donevim-cmd solo&#x2F;registervm &#x2F;vmfs&#x2F;volumes&#x2F;&lt;current-uuid&gt;&#x2F;dest&#x2F;dest.vmx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后需要手动修改一下<code>/vmfs/volumes/&lt;current-uuid&gt;/dest/</code>下的配置文件，把原来的虚拟机名改成新的名字。之后在fusion里面打开虚拟机的时候，就会询问这个虚拟机重复了，是移动过来的还是复制的，选复制的就会自动分配网卡的MAC了，再在系统里修改一下机器名、ip、网卡mac就行了，这个具体改法可以参考<a href="http://odinliu.com/2015/11/11/%E5%9C%A8CentOS-6%E4%B8%8A%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2KVM%E8%99%9A%E6%8B%9F%E6%9C%BA/#%E5%85%8B%E9%9A%86%E8%99%9A%E6%8B%9F%E6%9C%BA" title="在CentOS 6上安装部署KVM虚拟机">之前的文章</a>，这里不再重复了。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>从使用上来说，ESXi要比KVM方便一些，主要是clone磁盘的速度非常快，感觉机器的速度也要好于KVM，但是还要手动改clone后的配置文件这个比较不爽，应该有命令吧，要不也太土了……</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="http://pubs.vmware.com/vsphere-51/index.jsp#com.vmware.vsphere.storage.doc/GUID-9CC98802-82D9-44B0-9735-97675258FAAE.html">Supported Disk Formats</a></li><li><a href="http://blog.csdn.net/zhengmengjia/article/details/25620757">请使用命令clone esxi虚拟机</a></li><li><a href="http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=1006160">Registering or adding a virtual machine to the inventory on vCenter Server or on an ESX/ESXi host (1006160)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟化 </tag>
            
            <tag> ESXi </tag>
            
            <tag> syslinux </tag>
            
            <tag> isolinux </tag>
            
            <tag> U盘启动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java/Scala杂记之一</title>
      <link href="/2015/12/04/java-scala-za-ji-zhi-yi/"/>
      <url>/2015/12/04/java-scala-za-ji-zhi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>最近工作中都是些Java/Scala的项目，这块的技术栈(Technology stack，咱也赶个时髦)都停留在5年前了，现在需要补充一下，平时遇到的东西就随手摘抄一下好了。</p><h1 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h1><h2 id="Option"><a href="#Option" class="headerlink" title="Option"></a><a href="http://www.scala-lang.org/files/archive/api/2.10.4/index.html#scala.Option" title="scala.Option">Option</a></h2><p>Scala里的Option非常好用，主要就是取代了Java里的null，避免了漫天飞的NullPointerException。结合case match简直是神器啊，例如</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> test<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token comment">//someting</span>test <span class="token keyword">match</span> <span class="token punctuation">&#123;</span>  Some<span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token keyword">=></span> doSometingWithString<span class="token punctuation">(</span>v<span class="token punctuation">)</span>  None <span class="token keyword">=></span> doSometingWithNull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="scala-util-Try"><a href="#scala-util-Try" class="headerlink" title="scala.util.Try"></a><a href="http://www.scala-lang.org/files/archive/api/2.10.4/index.html#scala.util.Try" title="scala.util.Try">scala.util.Try</a></h2><p>Try是一个让人兴奋的“语法糖”，用于取代Java非常讨厌的try-catch，结合模式匹配，比繁琐的try-catch方便多了，话不多说，直接上例子：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">def</span> updateKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  rowkey <span class="token operator">=</span> Try<span class="token punctuation">(</span>MessageDigest<span class="token punctuation">.</span>getInstance<span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">match</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> Success<span class="token punctuation">(</span>digger<span class="token punctuation">)</span> <span class="token keyword">=></span> Express<span class="token punctuation">.</span>byte2hex<span class="token punctuation">(</span>digger<span class="token punctuation">.</span>digest<span class="token punctuation">(</span>filecont<span class="token punctuation">.</span>getBytes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> _ <span class="token keyword">=></span> f<span class="token string">"$&#123;MurmurHash3.stringHash(filecont)&#125;%08x"</span>  <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是一个如果调用Java的md5库失败，就用Scala的MurmurHash3的用法，使用了Try和case match直接让代码变得非常简洁。</p><h2 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h2><p>字符串插值一直是我觉得perl用起来非常爽的东西，现在Scala也支持了，而且还有一种带格式的，简直爽到不要不要的。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> lll <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token string">"s1"</span><span class="token punctuation">,</span> <span class="token string">"s2"</span><span class="token punctuation">)</span><span class="token keyword">val</span> a <span class="token operator">=</span> <span class="token number">0xabcd</span><span class="token keyword">val</span> str1 <span class="token operator">=</span> s<span class="token string">"I am $&#123;lll(0)&#125;"</span><span class="token keyword">val</span> str2 <span class="token operator">=</span> s<span class="token string">"number is $a"</span><span class="token keyword">val</span> str3 <span class="token operator">=</span> f<span class="token string">"number in hex is $a%x"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fold-foldLeft-foldRight"><a href="#fold-foldLeft-foldRight" class="headerlink" title="fold/foldLeft/foldRight"></a>fold/foldLeft/foldRight</h2><p>其实fp范式对于集合操作foreach/map/filter/fold/flatMap等等都非常好用，这也是为什么个别函数式语言连循环都没有的原因，写起来逼格特别高，这里给一个byte数组生成十六进制字符串表示的例子，Java版和Scala版都上：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">def</span> byte2hex<span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">Byte</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  arr<span class="token punctuation">.</span>map<span class="token punctuation">(</span>n <span class="token keyword">=></span> f<span class="token string">"$&#123;n &amp; 0xff&#125;%02x"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foldLeft<span class="token punctuation">(</span><span class="token keyword">new</span> StringBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token keyword">=></span> sb<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">byte2hex</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然说Java版的看上去可读性更好一点，更符合思维习惯，但是Scala版本J的简直帅爆了有没有，各种one-line code。</p><h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><h2 id="jsoup"><a href="#jsoup" class="headerlink" title="jsoup"></a><a href="http://jsoup.org/" title="jsoup: Java HTML Parser">jsoup</a></h2><p>第一个工具是jsoup，虽然说对于Scala，xml是一等公民，但是坑爹是html它不是标准的xml，只能说近似xml，所以直接用Scala的xml库会遇到各种问题，这里只能用第三方库了。jsoup是Java写的库，用起来还是挺方便的，功能也很强大，所以这里就果断学习了一下。</p><p>我用jsoup的场景是从网页里抽取我要的信息，基本就是一个xpath的用法。基本上jsoup提供了两种api，一种是js的dom的方式，另外一种是xpath的selector式的，我主要是用第二种，下面上个我从<a href="http://www.smzdm.com/" title="什么值得买">什么值得买</a>的发现频道目录页抽取正文页url的代码片段，一般来说网页抽取是以xpath+正则过滤的方式，所以这里也是这样做的。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">private</span> <span class="token keyword">val</span> hrefRegex <span class="token operator">=</span> <span class="token keyword">new</span> Regex<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""/p/\d+/$"""</span><span class="token punctuation">)</span><span class="token keyword">def</span> parseUrl<span class="token punctuation">(</span>result<span class="token operator">:</span> Result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">val</span> doc <span class="token operator">=</span> Jsoup<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span>toString<span class="token punctuation">(</span>result<span class="token punctuation">.</span>getValue<span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"dt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"cont"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"http://faxian.smzdm.com/"</span><span class="token punctuation">)</span>  <span class="token comment">//select在scala这种fp范式语言里用着简直爽</span>  doc<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>n <span class="token keyword">=></span> n<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>urlFilter<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> urlFilter<span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  hrefRegex<span class="token punctuation">.</span>findFirstIn<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">match</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> Some<span class="token punctuation">(</span>hrefRegex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token boolean">true</span>    <span class="token keyword">case</span> _ <span class="token keyword">=></span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Scala-Java混合项目的pom文件写法"><a href="#Scala-Java混合项目的pom文件写法" class="headerlink" title="Scala/Java混合项目的pom文件写法"></a>Scala/Java混合项目的pom文件写法</h2><p>公司里大多数人是用Java的，但是我不是特别喜欢写Java，毕竟好马不吃回头草，最近一个项目和同事合作的一个项目，必须用Java，但很多业务逻辑(比如SQL查询生成)用Scala写非常方便，Java和Scala之间互相调用比较方便，所以就准备用Scala写一部分业务逻辑，对外接口全是Java的。Java项目用Maven比较多，而Scala都是用sbt，在写pom.xml时，混合项目踩了不少坑，不太清楚sbt有没有这个问题。</p><p>Scala官网给的范例都太老了，根本没法用，google了半天才在github上找到了个<a href="https://github.com/xflin/mixed-scala-java-in-maven" title="mixed-scala-java-in-maven">样板配置</a>，把<code>&lt;build&gt;&lt;/build&gt;</code>之间的插件配上去就可以了。这里不贴配置了，大家去那个github项目clone吧。</p><h2 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a><a href="http://www.eclipse.org/jetty/" title="Jetty">Jetty</a></h2><p>Jetty是eclipse的一个项目，是一个web server，这里主要用Jetty的http client，基于netty/nio之类的做的，性能应该比较靠谱，所以需要用到http client的地方就准备用Jetty了。</p><p>虽然说Scala/Java本身也提供一些http api，但是毕竟缺少封装，用起来还是麻烦。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> jettyClient <span class="token operator">=</span> <span class="token keyword">new</span> HttpClientjettyClient<span class="token punctuation">.</span>setFollowRedirects<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>jettyClient<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> res <span class="token operator">=</span> jettyClient<span class="token punctuation">.</span>newRequest<span class="token punctuation">(</span><span class="token string">"http://somehost/phoenix/dml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>param<span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">,</span> <span class="token string">"SELECT DATA_VALUE,DATA_STATUS FROM DATA_STATUS WHERE DATA_KEY='test';"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getContentAsString<span class="token punctuation">(</span><span class="token punctuation">)</span>jettyClient<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pom配置：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.eclipse.jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jetty-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>9.3.6.v20151106<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="play-json"><a href="#play-json" class="headerlink" title="play-json"></a>play-json</h2><p>Scala的JSON库倒是也挺多的，各种web框架几乎都有自己的库，什么play-json, lift-json的。说起play，这是当年看走眼的一个框架，最早play1.0的年代是一个Java框架，印象中和servlet/jsp那套很不一样，当时觉得理念接收着别扭，所以没怎么研究过，还是搞起了熟悉的servlet/jsp，没想到这货现在发展的这么好，typesafe的一员啊。</p><p>当初玩Scala选择的web框架是lift，如今貌似势头没有play2好，不过之前在stackoverflow上看到一篇比较贴，lift的作者David Pollak还亲自回了，对play2不屑一顾，感兴趣的同学<a href="http://stackoverflow.com/questions/12424617/comparing-lift-with-play2" title="Comparing Lift with Play2">可以看看</a>。</p><p>话说回来，play-json用着还比较简单，语法上有点像scala的xml库的<code>\</code>，所以用着比较熟悉，直接上一段代码吧。</p><p>pom配置，比较蛋疼的是play-json依赖的jackson和其他包冲突，所以这里展示一下exclusion的用法。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.typesafe.play<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>play-json_2.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>scala-library<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token comment">//返回是&#123;"result":[["t1","1"]]&#125;类似这样</span><span class="token keyword">val</span> json <span class="token operator">=</span> <span class="token punctuation">(</span>Json<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> \ <span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asOpt<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token keyword">match</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> Some<span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token keyword">=></span> v<span class="token punctuation">.</span>toInt  <span class="token keyword">case</span> None <span class="token keyword">=></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="下集预告"><a href="#下集预告" class="headerlink" title="下集预告"></a>下集预告</h1><p>最近事情比较多，所以这篇只能简单记录下用到的一些东西吧。最近的项目是基于spray做的一个restful服务，下一篇可能会说spray, akka, slick什么的吧。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="http://jsoup.org/apidocs/">jsoup: Java HTML parser that makes sense of real-world HTML soup.</a></li><li><a href="http://jsoup.org/cookbook/introduction/parsing-a-document">Parsing and traversing a Document</a></li><li><a href="http://xflin.blogspot.com/2013/08/mixed-scala-and-java-in-maven-project.html">Mixed Scala and Java in Maven Project</a></li><li><a href="http://www.eclipse.org/jetty/documentation/current/http-client.html">Chapter 27. HTTP Client</a></li><li><a href="https://www.playframework.com/documentation/2.4.x/ScalaJson">JSON basics</a></li><li><a href="http://stackoverflow.com/questions/12424617/comparing-lift-with-play2">Comparing Lift with Play2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> scala </tag>
            
            <tag> jsoup </tag>
            
            <tag> maven </tag>
            
            <tag> play-json </tag>
            
            <tag> jetty </tag>
            
            <tag> Option </tag>
            
            <tag> Try </tag>
            
            <tag> 字符串插值 </tag>
            
            <tag> fold </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop流水账之HBase,Spark和在Spark上操作HBase</title>
      <link href="/2015/11/20/hadoop-liu-shui-zhang-zhi-hbase-spark-he-zai-spark-shang-cao-zuo-hbase/"/>
      <url>/2015/11/20/hadoop-liu-shui-zhang-zhi-hbase-spark-he-zai-spark-shang-cao-zuo-hbase/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>话说最近搜索相关工作没啥改进空间，所以正好抽出时间来学习一下hadoop的上层工具，这边用的挺多的，但是之前在某搜索引擎大厂基本都是在用hadoop streaming，对于Hadoop上的上层工具基本上没用过，也不了解，而且2年了hadoop也有了很多发展，和之前有了很多变化，所以磨刀不误砍柴功(强行打酱油)，还是需要研究研究的。</p><h1 id="背景设计"><a href="#背景设计" class="headerlink" title="背景设计"></a>背景设计</h1><p>没有目标的学习都是耍流氓，所以得给自己设计一个虚拟的目标。这里场景假设为将抓取下来的网页存入到HBase中，然后再通过Spark对网页进行处理，解析出有用的字段。所以主要学习目标如下：</p><ol><li>将之前抓的存在文件系统中的网页存入HBase</li><li>对HBase的基本API操作</li><li>Spark上处理HBase内的网页</li></ol><p>好吧，其实这也是之前挖过的坑<a href="http://odinliu.com/2015/11/09/%E5%A4%A7%E5%9E%8B%E5%9D%91%E4%B9%8Bnaive-qie%E6%8A%93%E5%8F%96%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/" title="大型坑之naive-qie抓取系统设计">Naive-Qie</a>系列，坑还没填呢，就推到重构了，2333333</p><h1 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h1><p>这部分有空再写一篇总结一下心得吧，直接用的小胖推荐的<a href="http://www.cloudera.com/content/www/en-us/documentation/enterprise/latest/topics/cm_ig_install_path_a.html" title="Automated Installation by Cloudera Manager">Cloudera Manager</a>，虽然和Red Hat一样，用着免费服务收费的模式，但是界面还挺不错的，自动模式也省心，虽然踩了不少坑。这类Hadoop全家桶的工具挺多的，这边好像用的是<a href="http://ambari.apache.org/" title="Apache Ambari project">Apache Ambari</a>。哪个更好用就不知道了，不过开源项目，你懂的。</p><h1 id="HBase建库"><a href="#HBase建库" class="headerlink" title="HBase建库"></a>HBase建库</h1><p>关于HBase的设计，目前还没有仔细了解，就纯粹当成NoSQL去用，不考虑性能。这里RowKey用url的md5，但其实这是不对的，虽然可以把数据散列开，但是最大的问题是没办法利用key是有序的特点，进行范围查询，所以有空会研究一下HBase表设计的最佳实践，再设计一个实用的网页库。包括两个列族，<code>meta</code>用于存储url等信息，<code>data</code>用于存储网页内容。用HBase的shell建表：</p><pre class="line-numbers language-none"><code class="language-none">hbase(main):004:0&gt; create &#39;pagedb&#39;, &#39;meta&#39;, &#39;data&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="网页入库"><a href="#网页入库" class="headerlink" title="网页入库"></a>网页入库</h1><p>之前抓了1000多某电商网站的网页，正好全部丢到HBase里去，省得重新抓了，也省略了抓取部分(反正就是个perl脚本)。正好最近刚填完了<a href="http://odinliu.com/2015/11/13/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/" title="Golang学习笔记——高级特性">Golang学习笔记</a>的坑，HBase还有thrift接口，正好Scala才开始复习，就打算用Go了。虽然thrift之前没用过，但是github上有封装好的<a href="https://github.com/sdming/goh" title="golang client of hbase (via thrift)">goh</a>。大致了解了一下，HBase的thrift接口目前有v1和v2两个版本，v2是在v1上重构的，提供了更简洁的接口，然而，goh还是基于v1的，所以反正我懒得研究thrift了，先用v1吧就。废话不多说，先上代码，这里就是把go当成脚本写了，写的丑别怪我，毕竟之前0行Go的工程经验：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"bufio"</span><span class="token string">"os"</span><span class="token string">"strings"</span><span class="token string">"crypto/md5"</span><span class="token string">"io"</span><span class="token string">"io/ioutil"</span><span class="token string">"github.com/sdming/goh"</span><span class="token string">"github.com/sdming/goh/Hbase"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"need filename"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>address <span class="token operator">:=</span> <span class="token string">"datanode2:9090"</span>client<span class="token punctuation">,</span> err <span class="token operator">:=</span> goh<span class="token punctuation">.</span><span class="token function">NewTcpClient</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> goh<span class="token punctuation">.</span>TBinaryProtocol<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//读入一个url\t/path/to/html的文件</span>f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>table <span class="token operator">:=</span> <span class="token string">"pagedb"</span>reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>line<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span>vs <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"\t"</span><span class="token punctuation">)</span>bv<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>vs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span>key <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span> md5<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>vs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mutations <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Hbase<span class="token punctuation">.</span>Mutation<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>mutations<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> goh<span class="token punctuation">.</span><span class="token function">NewMutation</span><span class="token punctuation">(</span><span class="token string">"meta:url"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>vs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mutations<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> goh<span class="token punctuation">.</span><span class="token function">NewMutation</span><span class="token punctuation">(</span><span class="token string">"data:content"</span><span class="token punctuation">,</span> bv<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">MutateRow</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> mutations<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Go其实还是非常简单实用的，这部分花的时间最少，因为不涉及什么依赖，目标也简单，Go写起来还比较舒服的，小研究了一下就写出来了。</p><h1 id="SBT"><a href="#SBT" class="headerlink" title="SBT"></a>SBT</h1><p>yet another build tools…话说JVM圈的构建工具真是太多了，从大学开始接触过的开源构建工具就有<code>ant</code>, <code>maven</code>, <code>gradle</code>, <code>ivy</code>, <code>sbt</code>，就这还不算他们的不同版本。sbt(跟我一起念shi bian tai)是scala主推的构建工具，既然决定要学习一下Scala，那么sbt肯定不能放过，工具还是很简单的，但是感觉主要还是编译用，打包功能还得靠插件，配置上就是scala程序，感觉还是挺蛋疼的，不过也比maven的xml舒服一点。<br><img src="http://7xi8sr.com1.z0.glb.clouddn.com/sbt-tree.jpg" alt="一个典型的SBT项目组织结构"></p><p>project目录下的<code>plugins.sbt</code>是配置插件用的，我这里主要是配置一个<a href="https://github.com/sbt/sbt-assembly" title="Deploy fat JARs. Restart processes">sbt-assembly</a>插件，虽然并没有用上，不过也写着吧。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token comment">// project/plugins.sbt</span>addSbtPlugin<span class="token punctuation">(</span><span class="token string">"com.eed3si9n"</span> <span class="token operator">%</span> <span class="token string">"sbt-assembly"</span> <span class="token operator">%</span> <span class="token string">"0.14.0"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="HBase基本操作"><a href="#HBase基本操作" class="headerlink" title="HBase基本操作"></a>HBase基本操作</h1><h2 id="build-sbt"><a href="#build-sbt" class="headerlink" title="build.sbt"></a>build.sbt</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">name <span class="token operator">:</span><span class="token operator">=</span> <span class="token string">"hbase test"</span>version <span class="token operator">:</span><span class="token operator">=</span> <span class="token string">"1.0"</span>scalaVersion <span class="token operator">:</span><span class="token operator">=</span> <span class="token string">"2.10.4"</span>javacOptions <span class="token operator">++</span><span class="token operator">=</span> Seq<span class="token punctuation">(</span><span class="token string">"-source"</span><span class="token punctuation">,</span> <span class="token string">"1.6"</span><span class="token punctuation">,</span> <span class="token string">"-target"</span><span class="token punctuation">,</span> <span class="token string">"1.6"</span><span class="token punctuation">)</span>libraryDependencies <span class="token operator">++</span><span class="token operator">=</span> Seq<span class="token punctuation">(</span>  <span class="token string">"org.apache.hadoop"</span> <span class="token operator">%</span> <span class="token string">"hadoop-common"</span> <span class="token operator">%</span> <span class="token string">"2.6.0"</span><span class="token punctuation">,</span>  <span class="token string">"org.apache.hbase"</span> <span class="token operator">%</span> <span class="token string">"hbase-common"</span> <span class="token operator">%</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"org.apache.hbase"</span> <span class="token operator">%</span> <span class="token string">"hbase-client"</span> <span class="token operator">%</span> <span class="token string">"1.0.0"</span><span class="token punctuation">)</span>assemblyOption in assembly <span class="token operator">:</span><span class="token operator">=</span> <span class="token punctuation">(</span>assemblyOption in assembly<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>includeScala <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>odinliu<span class="token punctuation">.</span>test</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>HBaseConfiguration<span class="token punctuation">,</span>TableName<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>ConnectionFactory<span class="token punctuation">,</span>HBaseAdmin<span class="token punctuation">,</span>HTable<span class="token punctuation">,</span>Put<span class="token punctuation">,</span>Get<span class="token punctuation">,</span>Scan<span class="token punctuation">,</span>Result<span class="token punctuation">,</span>ResultScanner<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Bytes<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span>Path<span class="token keyword">import</span> <span class="token namespace">scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>matching<span class="token punctuation">.</span></span>Regex<span class="token keyword">object</span> TestHbase <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> printRowKey<span class="token punctuation">(</span>rs<span class="token operator">:</span> ResultScanner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> rs<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      println<span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span>toString<span class="token punctuation">(</span>result<span class="token punctuation">.</span>getRow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">//println(Bytes.toString(result.getValue(Bytes.toBytes("meta"), Bytes.toBytes("title"))))</span>      printRowKey<span class="token punctuation">(</span>rs<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span>createConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token keyword">val</span> admin <span class="token operator">=</span> connection<span class="token punctuation">.</span>getAdmin<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> listtables <span class="token operator">=</span> admin<span class="token punctuation">.</span>listTables<span class="token punctuation">(</span><span class="token punctuation">)</span>    listtables<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token keyword">val</span> table <span class="token operator">=</span> connection<span class="token punctuation">.</span>getTable<span class="token punctuation">(</span>TableName<span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span><span class="token string">"pagedb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> rs <span class="token operator">=</span> table<span class="token punctuation">.</span>getScanner<span class="token punctuation">(</span><span class="token keyword">new</span> Scan<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    printRowKey<span class="token punctuation">(</span>rs<span class="token punctuation">)</span>    rs<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> table<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token keyword">new</span> Get<span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"fbc9fdefb5e1391c34abd4da2c88a13f"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> value <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toString<span class="token punctuation">(</span>result<span class="token punctuation">.</span>getValue<span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    table<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实Scala也是一门挺强大的语言，就是语法糖太多，太甜，但是好处就是写起来比较随意，当成Java来写倒是也不会出什么问题。因为读写HBase是本地的，直接<code>sbt clean run</code>就可以运行了，还是挺方便的。唯一需要注意的是各个依赖版本的问题，最好和CDH的各个版本一致。HBase这里没出啥问题，不过由于HBase新的API和之前不大一样，网上很多范例都没办法用，特别是HBase自己的手册也是用的老版本，真是无语。</p><h1 id="Spark基本操作"><a href="#Spark基本操作" class="headerlink" title="Spark基本操作"></a>Spark基本操作</h1><h2 id="build-sbt-1"><a href="#build-sbt-1" class="headerlink" title="build.sbt"></a>build.sbt</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">name <span class="token operator">:</span><span class="token operator">=</span> <span class="token string">"spark with hbase"</span>version <span class="token operator">:</span><span class="token operator">=</span> <span class="token string">"1.0"</span>scalaVersion <span class="token operator">:</span><span class="token operator">=</span> <span class="token string">"2.10.4"</span>javacOptions <span class="token operator">++</span><span class="token operator">=</span> Seq<span class="token punctuation">(</span><span class="token string">"-source"</span><span class="token punctuation">,</span> <span class="token string">"1.6"</span><span class="token punctuation">,</span> <span class="token string">"-target"</span><span class="token punctuation">,</span> <span class="token string">"1.6"</span><span class="token punctuation">)</span>libraryDependencies <span class="token operator">++</span><span class="token operator">=</span> Seq<span class="token punctuation">(</span>  <span class="token string">"org.apache.spark"</span> <span class="token operator">%</span><span class="token operator">%</span> <span class="token string">"spark-core"</span> <span class="token operator">%</span> <span class="token string">"1.3.0"</span> <span class="token operator">%</span> <span class="token string">"provided"</span><span class="token punctuation">,</span>  <span class="token string">"org.apache.hadoop"</span> <span class="token operator">%</span> <span class="token string">"hadoop-common"</span> <span class="token operator">%</span> <span class="token string">"2.6.0"</span> <span class="token operator">%</span> <span class="token string">"provided"</span><span class="token punctuation">,</span>  <span class="token string">"org.apache.hbase"</span> <span class="token operator">%</span> <span class="token string">"hbase-common"</span> <span class="token operator">%</span> <span class="token string">"1.0.0"</span> <span class="token operator">%</span> <span class="token string">"provided"</span><span class="token punctuation">,</span>  <span class="token string">"org.apache.hbase"</span> <span class="token operator">%</span> <span class="token string">"hbase-server"</span> <span class="token operator">%</span> <span class="token string">"1.0.0"</span> <span class="token operator">%</span> <span class="token string">"provided"</span><span class="token punctuation">,</span>  <span class="token string">"org.apache.htrace"</span> <span class="token operator">%</span> <span class="token string">"htrace-core"</span> <span class="token operator">%</span> <span class="token string">"3.1.0-incubating"</span><span class="token punctuation">,</span>  <span class="token string">"org.apache.hbase"</span> <span class="token operator">%</span> <span class="token string">"hbase-client"</span> <span class="token operator">%</span> <span class="token string">"1.0.0"</span> <span class="token operator">%</span> <span class="token string">"provided"</span><span class="token punctuation">)</span>assemblyOption in assembly <span class="token operator">:</span><span class="token operator">=</span> <span class="token punctuation">(</span>assemblyOption in assembly<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>includeScala <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里这些包都是编译用的，提交到Spark集群上是用CDH的包，所以版本一定要注意，我用的<strong>CDH-5.4.8-1.cdh5.4.8.p0.4</strong>版本相关版本是这样的，如果不注意版本是要踩坑的。</p><h2 id="主程序-1"><a href="#主程序-1" class="headerlink" title="主程序"></a>主程序</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>odinliu<span class="token punctuation">.</span>test</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span></span>SparkContext<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span></span>SparkContext<span class="token punctuation">.</span>_<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span></span>SparkConf<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>HBaseConfiguration<span class="token punctuation">,</span>TableName<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>ConnectionFactory<span class="token punctuation">,</span>HBaseAdmin<span class="token punctuation">,</span>HTable<span class="token punctuation">,</span>Put<span class="token punctuation">,</span>Get<span class="token punctuation">,</span>Scan<span class="token punctuation">,</span>Result<span class="token punctuation">,</span>ResultScanner<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Bytes<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ImmutableBytesWritable<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>TableInputFormat<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>TableOutputFormat<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span>Path<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>JobConf<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>matching<span class="token punctuation">.</span></span>Regex<span class="token keyword">object</span> SparkHbase <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> titleRegex <span class="token operator">=</span> <span class="token keyword">new</span> Regex<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""&lt;title>([^&lt;]+)&lt;/title>"""</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> saveTitle<span class="token punctuation">(</span>result<span class="token operator">:</span> Result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> key <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toString<span class="token punctuation">(</span>result<span class="token punctuation">.</span>getRow<span class="token punctuation">)</span>    <span class="token keyword">val</span> title <span class="token operator">=</span> parseTitle<span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span>toString<span class="token punctuation">(</span>result<span class="token punctuation">.</span>getValue<span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"rowkey["</span><span class="token operator">+</span>key<span class="token operator">+</span><span class="token string">"] title["</span><span class="token operator">+</span>title<span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> p <span class="token operator">=</span> <span class="token keyword">new</span> Put<span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>addColumn<span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"meta"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token keyword">new</span> ImmutableBytesWritable<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">def</span> parseTitle<span class="token punctuation">(</span>page<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">=</span> titleRegex<span class="token punctuation">.</span>findFirstMatchIn<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> sconf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"HBase With Spark"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sconf<span class="token punctuation">)</span>    <span class="token keyword">val</span> hconf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    hconf<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.property.clientPort"</span><span class="token punctuation">,</span> <span class="token string">"2181"</span><span class="token punctuation">)</span>    hconf<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"datanode1,datanode2,datanode0"</span><span class="token punctuation">)</span>    hconf<span class="token punctuation">.</span>set<span class="token punctuation">(</span>TableInputFormat<span class="token punctuation">.</span>INPUT_TABLE<span class="token punctuation">,</span> <span class="token string">"pagedb"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> jobConf <span class="token operator">=</span> <span class="token keyword">new</span> JobConf<span class="token punctuation">(</span>hconf<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">)</span>    jobConf<span class="token punctuation">.</span>setOutputFormat<span class="token punctuation">(</span>classOf<span class="token punctuation">[</span>TableOutputFormat<span class="token punctuation">]</span><span class="token punctuation">)</span>    jobConf<span class="token punctuation">.</span>set<span class="token punctuation">(</span>TableOutputFormat<span class="token punctuation">.</span>OUTPUT_TABLE<span class="token punctuation">,</span> <span class="token string">"pagedb"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> dbRDD <span class="token operator">=</span> sc<span class="token punctuation">.</span>newAPIHadoopRDD<span class="token punctuation">(</span>hconf<span class="token punctuation">,</span> classOf<span class="token punctuation">[</span>TableInputFormat<span class="token punctuation">]</span><span class="token punctuation">,</span>      classOf<span class="token punctuation">[</span>ImmutableBytesWritable<span class="token punctuation">]</span><span class="token punctuation">,</span>      classOf<span class="token punctuation">[</span>Result<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> count <span class="token operator">=</span> dbRDD<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"pagedb count: "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span>    dbRDD<span class="token punctuation">.</span>cache<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//处理网页</span>    <span class="token keyword">val</span> save <span class="token operator">=</span> dbRDD<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token keyword">=></span> saveTitle<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    save<span class="token punctuation">.</span>saveAsHadoopDataset<span class="token punctuation">(</span>jobConf<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里主程序解析网页直接用正则了，因为主要是试验一下在Spark里读写HBase，所以用正则意思意思，正常还是要用xpath。提交任务:</p><pre class="line-numbers language-none"><code class="language-none">[odin@DannyGreen tmp]$ sudo -u spark spark-submit --class &quot;com.odinliu.test.SparkHbase&quot; &#x2F;tmp&#x2F;spark-with-hbase_2.10-1.0.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="那些踩过的坑"><a href="#那些踩过的坑" class="headerlink" title="那些踩过的坑"></a>那些踩过的坑</h2><h3 id="spark用户提交无法读取用户目录"><a href="#spark用户提交无法读取用户目录" class="headerlink" title="spark用户提交无法读取用户目录"></a>spark用户提交无法读取用户目录</h3><p>这个比较诡异，有的机器有，有的没有，但是在我写码的机器就不行，只能把包拷贝到/tmp/下，并到那个目录下面执行spark-submit。</p><h3 id="缺少org-apache-htrace"><a href="#缺少org-apache-htrace" class="headerlink" title="缺少org.apache.htrace"></a>缺少org.apache.htrace</h3><blockquote><p>ERROR TableInputFormat: java.io.IOException: java.lang.reflect.InvocationTargetException<br>Caused by: java.lang.NoClassDefFoundError: org/apache/htrace/Trace<br>Caused by: java.lang.ClassNotFoundException: org.apache.htrace.Trace</p></blockquote><p>CDH的Spark的classpath中引入的是<code>/opt/cloudera/parcels/CDH/jars/htrace-core-3.0.4.jar</code>，而这个版本的时候，htrace还是<code>org.htrace</code>，而3.1.0的时候已经贡献给Apache了，改叫<code>org.apache.htrace</code>了。虽然Spark里也有3.1.0的jar包，但是并没有引入，我没找到Cloudera Manager在哪里配这个，只能手动修改作业提交机器的<code>/etc/alternatives/spark-conf/classpath.txt</code>，在最后添上<code>/opt/cloudera/parcels/CDH-5.4.8-1.cdh5.4.8.p0.4/jars/htrace-core-3.1.0-incubating.jar</code>即可。虽然说spark-submit可以通过<code>--jars</code>指定提交哪些jar包，但是我试了一下，不能用，而且把3.1.0的jar包assemble到我的任务jar里也不行，就只能用这个土办法了，不好的地方就是重新deploy client configuration后可能需要再修改一下。</p><h3 id="Scala版本和集群不对"><a href="#Scala版本和集群不对" class="headerlink" title="Scala版本和集群不对"></a>Scala版本和集群不对</h3><blockquote><p>Exception in thread “main” java.lang.NoSuchMethodError: scala.Predef$.$conforms()Lscala/Predef$$less$colon$less;</p></blockquote><p>一开始我用系统的Scala 2.11版本做编译，但是提交到集群上会报这个错，原来是CDH的Scala版本是2.10，所以会出问题，把build.sbt的Scala版本改一下就行了。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>总的来说，在Spark上操作HBase还是挺方便的，但是网上很多文章的API版本都比较旧，在新版本集群里程序根本跑不了。而且JVM的classpath简直是蛋疼，各种依赖版本不对，虽然这东西和linux的<code>LD_LIBRARY_PATH</code>是一个东西，但是感觉完全不是那么回事啊，能编译过的，各种运行时异常，都是因为JVM上加载的类和编译的不是一个。另外CDH虽然安装挺方便的，但是很多东西不知道在哪改，但反正“又不是不能用”。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="http://spark.apache.org/docs/latest/quick-start.html">Spark Quick Start</a></li><li><a href="https://hbase.apache.org/book.html">Apache HBase Reference Guide</a></li><li><a href="http://0b4af6cdc2f0c5998459-c0245c5c937c5dedcca3f1764ecc9b2f.r43.cf2.rackcdn.com/9353-login1210_khurana.pdf">Introduction to HBase Schema Design</a></li><li><a href="http://wuchong.me/blog/2015/04/06/spark-on-hbase-new-api/">Spark 下操作 HBase（1.0.0 新 API）</a></li><li><a href="http://www.qt4.net/spark-load-hbase/">spark读取hbase内容及在集群环境下的配置</a></li><li><a href="http://www.zhihu.com/question/34099679">scala代码能够在spark-shell运行，但是不能通过spark-submit提交运行，why？</a></li><li><a href="http://hadoop.apache.org/docs/r2.6.0/api/index.html">Apache Hadoop Main 2.6.0 API</a></li><li><a href="https://hbase.apache.org/apidocs/index.html">Apache HBase 2.0.0-SNAPSHOT API</a></li><li><a href="http://spark.apache.org/docs/latest/api/scala/index.html">Apache Spark Apidoc</a></li><li><a href="http://www.scala-sbt.org/0.13/tutorial/zh-cn/index.html">sbt 入门</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
            <tag> hadoop </tag>
            
            <tag> hadoop流水账 </tag>
            
            <tag> 分布式存储 </tag>
            
            <tag> HBase </tag>
            
            <tag> Go </tag>
            
            <tag> Spark </tag>
            
            <tag> SBT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记——高级特性</title>
      <link href="/2015/11/13/golang-xue-xi-bi-ji-gao-ji-te-xing/"/>
      <url>/2015/11/13/golang-xue-xi-bi-ji-gao-ji-te-xing/</url>
      
        <content type="html"><![CDATA[<p><strong>这个坑好像坑了很久，终于填好了……</strong></p><h1 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h1><h2 id="接口与多态"><a href="#接口与多态" class="headerlink" title="接口与多态"></a>接口与多态</h2><p>这里有一篇不错的文章<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go" title="How to use interfaces in Go">How to use interfaces in Go</a><br>go的接口有点<code>Trait</code>的意思，并且不需要显式实现，这点不是很爽，虽然结果上没啥区别，但是总觉得看到定义时知道它实现了哪些接口比较方便。实际上interface除了是一组方法外，还是一种类型。</p><h3 id="作为接口"><a href="#作为接口" class="headerlink" title="作为接口"></a>作为接口</h3><p>一个简单的接口的例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Animal <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d Dog<span class="token punctuation">)</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Woof!"</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c Cat<span class="token punctuation">)</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Meow!"</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Llama <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>l Llama<span class="token punctuation">)</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"?????"</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> JavaProgrammer <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>j JavaProgrammer<span class="token punctuation">)</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Design patterns!"</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    animals <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Animal<span class="token punctuation">&#123;</span>Dog<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Cat<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Llama<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> JavaProgrammer<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> animal <span class="token operator">:=</span> <span class="token keyword">range</span> animals <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span><span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作为类型"><a href="#作为类型" class="headerlink" title="作为类型"></a>作为类型</h3><p><code>interface&#123;&#125;</code>作为类型时可以看做是一个实现了0个方法的匿名接口，任何类型都至少实现了0个方法，因此任何类型都可以实现了<code>interface&#123;&#125;</code>接口，因为Go实现一个接口不需要显式实现，只要满足了接口的定义，就等于实现了这个接口，这里和c中的<code>void *</code>有点像。前文提到的那篇文章中有一个有趣的<strong>错例</strong>：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//注意，这是一个错误的例子！！！</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">PrintAll</span><span class="token punctuation">(</span>vals <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> vals <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    names <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"stanley"</span><span class="token punctuation">,</span> <span class="token string">"david"</span><span class="token punctuation">,</span> <span class="token string">"oscar"</span><span class="token punctuation">&#125;</span>    <span class="token function">PrintAll</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里并不能将<code>[]T</code>转化成<code>[]interface&#123;&#125;</code>，除非显式的进行转换。这里我的理解是<code>[]T</code>本身是一个类型，而<code>[]interface&#123;&#125;</code>则是“一个组类型”的类型，因此二者显然不是同一个类型，不能进行传递。</p><h3 id="接口与指针"><a href="#接口与指针" class="headerlink" title="接口与指针"></a>接口与指针</h3><p>Go在定义接口时是没有指定到底是值还是指针作为receiver的，这里怎么定义都行，但是使用时需要注意，如果是指针作为receiver，当使用值作为该接口的实例调用会出现编译错，而相反的，使用值作为receiver，使用指针作为接口实例调用没有问题。这里主要是因为一个指针同一时间只能指向同一固定的对象实例，而一个对象实例同一时间可能有很多指针存在。</p><h3 id="接口检查"><a href="#接口检查" class="headerlink" title="接口检查"></a>接口检查</h3><p>因为Go不要求显式实现接口，因此有些时候需要对对象是否实现接口进行判断。当需要做runtime接口时，一般的：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> val<span class="token punctuation">.</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>Marshaler<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span><span class="token comment">//do something</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但运行时接口检查比较麻烦，假如我们知道某类型需要实现某接口时，可以定义：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token boolean">_</span> json<span class="token punctuation">.</span>Marshaler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>RawMessage<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，可以在编译时确保<code>*RawMessage</code>实现了<code>json.Marshaler</code>接口。</p><h3 id="Embedding"><a href="#Embedding" class="headerlink" title="Embedding"></a><a href="https://golang.org/doc/effective_go.html#embedding">Embedding</a></h3><p>Go没啥继承的概念，所以发明了一个“嵌入”的概念，例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Reader <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Writer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token function">Write</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> ReadWriter <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    Reader    Writer<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现<code>ReadWriter</code>就等于实现了<code>Reader</code>和<code>Writer</code>。这里需要主要接口里只能embedding接口。类似的，struct也可以embedding:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// ReadWriter stores pointers to a Reader and a Writer.</span><span class="token comment">// It implements io.ReadWriter.</span><span class="token keyword">type</span> ReadWriter <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token operator">*</span>Reader  <span class="token comment">// *bufio.Reader</span>    <span class="token operator">*</span>Writer  <span class="token comment">// *bufio.Writer</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里不用写成员名，不写它是一个嵌入，写了就是一个成员了，嵌入用在struct里有点多重继承的味道。在struct的方法中可以直接以struct名调用这个“成员”：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>job <span class="token operator">*</span>Job<span class="token punctuation">)</span> <span class="token function">Logf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    job<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"%q: %s"</span><span class="token punctuation">,</span> job<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p><code>defer</code>就是在当前区块生命周期结束前执行某函数，这点在关闭资源方面比较实用。defer相当于一个栈，每次调用会把方法推到栈里，执行defer时也是按出栈顺序(LIFO)。defer比较方便的是，可以在打开的时候写好defer，后面退出时就不需要再写了。c/c++里要实现类似的只写一处回收资源代码时，还得用上<code>goto</code>。一个defer的例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Contents</span><span class="token punctuation">(</span>filename <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> err    <span class="token punctuation">&#125;</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// f.Close will run when we're finished.</span>    <span class="token keyword">var</span> result <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>    buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        n<span class="token punctuation">,</span> err <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// append is discussed later.</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> err  <span class="token comment">// f will be closed if we return here.</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token comment">// f will be closed if we return here.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h2><p>Go的并发模型是协程的，因此goroutine相当于轻量级线程，用法上和线程大同小异，只是协程间切换成本更低。Go中创建一个goroutine也非常简单：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//这里创建一个匿名函数非常方便</span><span class="token keyword">go</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要共享变量，还是需要同步的，可以使用<code>sync</code>包。</p><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>channel是go中goroutine之间用来共享<strong>值</strong>的一个FIFO队列，默认是阻塞的。存取数据均使用符号<code>&lt;-</code>，这里存变量时为毛不用<code>-&gt;</code>，真是太不形象了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//创建一个channel</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token comment">//把v push到队列里</span>ch <span class="token operator">&lt;-</span> v<span class="token comment">//取出来</span>v <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果创建channel时指定了size，那么将创建一个buffered channel，buffered channel只有在channel满的时候存数据才会阻塞，而在空的时候读数据会阻塞。(好像废话一样)</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//buffered channles</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="range-amp-close"><a href="#range-amp-close" class="headerlink" title="range&amp;close"></a>range&amp;close</h3><p>channel的生产者可以显式<code>close</code>，这时消费者可以接收到这一状态，一般来说消费者不主动关闭channel：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一个例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> c <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>c <span class="token operator">&lt;-</span> xx<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span class="token operator">+</span>y<span class="token punctuation">&#125;</span><span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> c <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>select和linux的select类似，相当于同时监听多个channel，一直阻塞直到某个case分句可以执行，当多个case分句可以执行时，随机选择一个，一个例子如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> quit <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> c <span class="token operator">&lt;-</span> x<span class="token punctuation">:</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span class="token operator">+</span>y<span class="token keyword">case</span> <span class="token operator">&lt;-</span>quit<span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"quit"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>quit <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>quit <span class="token operator">&lt;-</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fibonacci</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> quit<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>select可以加上default分句，以实现非阻塞，当没有case分句满足时执行default分句。</p><h3 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h3><p>很多异步框架里Timer是个很重要的组件，Go里也提供了Timer，它是一个特殊的channel，有两种方式设置Timer/Ticker, 他们在使用上有一些差别：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 直接创造一个channel</span>timer1 <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token operator">&lt;-</span>timer1<span class="token comment">// 创造一个timer对象，它的C成员是我们需要的channel</span>timer2 <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token operator">&lt;-</span>timer2<span class="token punctuation">.</span>C<span class="token comment">//同上</span>ticker1 <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token operator">&lt;-</span>ticker1ticker2 <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token operator">&lt;-</span>ticker2<span class="token punctuation">.</span>C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>自己定义一个异常比较简单，就是实现接口：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> <span class="token builtin">error</span> <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里上一个<a href="http://tour.golang.org/methods/9" title="A Tour of Go">A Tour of Go</a>的练习的例子说明：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> ErrNegativeSqrt <span class="token builtin">float64</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e ErrNegativeSqrt<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"cannot Sqrt negative number: %v"</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Sqrt</span><span class="token punctuation">(</span>x <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">ErrNegativeSqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，实现<code>Error</code>方法时<code>float64(e)</code>是必须的，否则就会导致无限循环，因为Sprintf会调用error接口的Error方法，而这里Error方法又调用Sprintf。</p><h3 id="Panic"><a href="#Panic" class="headerlink" title="Panic"></a>Panic</h3><p>panic和linux kernel的panic意思差不多，就是出现fatal级错误，程序要挂了。和异常不一样，panic挂的非常彻底，所以一般的库中尽量少用panic，panic一般用在初始化阶段：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> user <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> user <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"no value for $USER"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Recover"><a href="#Recover" class="headerlink" title="Recover"></a>Recover</h3><p>recover一般用在defer函数中，当发生panic时可以捕获错误。一般的模块设计中可以用recover把panic和调用者隔离，一个recover的例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Error is the type of a parse error; it satisfies the error interface.</span><span class="token keyword">type</span> Error <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e Error<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// error is a method of *Regexp that reports parsing errors by</span><span class="token comment">// panicking with an Error.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>regexp <span class="token operator">*</span>Regexp<span class="token punctuation">)</span> <span class="token function">error</span><span class="token punctuation">(</span>err <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Compile returns a parsed representation of the regular expression.</span><span class="token keyword">func</span> <span class="token function">Compile</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>regexp <span class="token operator">*</span>Regexp<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    regexp <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Regexp<span class="token punctuation">)</span>    <span class="token comment">// doParse will panic if there is a parse error.</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> e <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>            regexp <span class="token operator">=</span> <span class="token boolean">nil</span>    <span class="token comment">// Clear return value.</span>            err <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token punctuation">(</span>Error<span class="token punctuation">)</span> <span class="token comment">// Will re-panic if not a parse error.</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> regexp<span class="token punctuation">.</span><span class="token function">doParse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="http://coolshell.cn/articles/8460.html">Go 语言简介（上）— 语法</a></li><li><a href="http://coolshell.cn/articles/8489.html">Go 语言简介（下）— 特性</a></li><li><a href="http://tour.golang.org/">A Tour of Go(FuckGFW)</a></li><li><a href="https://gobyexample.com/">Go by Example</a></li><li><a href="http://golang.org/pkg/">Package Documentation(FuckGFW)</a></li><li><a href="http://golang.org/doc/effective_go.html">Effective Go(FuckGFW)</a></li><li><a href="http://pan.baidu.com/s/1bnAOroV">学习Go语言</a></li><li><a href="http://golang.org/ref/spec">The Go Programming Language Specification(FuckGFW)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> 语法 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在CentOS 6上安装部署KVM虚拟机</title>
      <link href="/2015/11/11/zai-centos-6-shang-an-zhuang-bu-shu-kvm-xu-ni-ji/"/>
      <url>/2015/11/11/zai-centos-6-shang-an-zhuang-bu-shu-kvm-xu-ni-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>很多新的开源库对kernel的要求是3.0+，对gcc的要求是4.8+，但是我的开发机用的是旧版本的CentOS 6，升级kernel和gcc比较麻烦，因此在由于要不要一步到位升级成CentOS 7。CentOS 7修改了一些系统管理方面的应用，由于不太熟悉，所以不大想升级。正好后面考虑自己搞个小集群玩玩，于是准备研究一下虚拟化技术。</p><p>系统选型方面由于没装X，放弃了比较常见的virtualbox和vmware等老牌虚拟机技术。主要考虑两个，一个是老牌企业级虚拟化技术<a href="http://www.xenproject.org/" title="The Xen Project">Xen</a>和Linux本身主推的<a href="http://www.linux-kvm.org/page/Main_Page" title="KVM (for Kernel-based Virtual Machine)">KVM</a>技术。</p><p>最终选定的是KVM，主要原因是，Xen被收购之后和RedHat的使用免费服务收费模式一样，尽管Xen历史更久更成熟，还是放弃了Xen。而且Xen本身被踢出了CentOS 6的默认安装，并且采用编译内核的方式，侵入性太高。而KVM是Linux主推的技术，本身集成性已经比较好了，而且安装也比Xen方便一些，所以简单起见，还是选择了KVM。</p><h1 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h1><h2 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h2><p><img src="http://7xi8sr.com1.z0.glb.clouddn.com/virtual.png" alt="理想条件的家里网络拓扑图"><br>网络的话，虚拟机桥连宿主机网卡和路由器相连，这样可以实现从工作地方便访问虚拟机的目的，互联也方便。</p><h2 id="安装KVM"><a href="#安装KVM" class="headerlink" title="安装KVM"></a>安装KVM</h2><h3 id="确认cpu支持"><a href="#确认cpu支持" class="headerlink" title="确认cpu支持"></a>确认cpu支持</h3><p>理论上现代的intel服务器cpu都支持KVM，特别是x86_64架构的cpu。需要确认一下cpu是否有vmx指令集，AMD信仰系列的话叫svm：</p><pre class="line-numbers language-none"><code class="language-none">[root@DannyGreen ~]# grep vmx &#x2F;proc&#x2F;cpuinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="通过yum安装KVM"><a href="#通过yum安装KVM" class="headerlink" title="通过yum安装KVM"></a>通过yum安装KVM</h3><pre class="line-numbers language-none"><code class="language-none">[root@DannyGreen ~]# yum install -y kvm virt-* libvirts bridge-utils qemu-img<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="加载kernel模块"><a href="#加载kernel模块" class="headerlink" title="加载kernel模块"></a>加载kernel模块</h3><pre class="line-numbers language-none"><code class="language-none">[root@DannyGreen ~]# modprobe kvm-intel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="重启并确认内存模块加载"><a href="#重启并确认内存模块加载" class="headerlink" title="重启并确认内存模块加载"></a>重启并确认内存模块加载</h3><pre class="line-numbers language-none"><code class="language-none">[root@DannyGreen ~]# reboot[root@DannyGreen ~]# lsmod | grep kvmkvm_intel              55624  0 kvm                   341551  1 kvm_intel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><pre class="line-numbers language-none"><code class="language-none">[root@DannyGreen ~]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-br0 DEVICE&#x3D;br0HWADDR&#x3D;78:e3:b5:08:82:54TYPE&#x3D;BridgeUUID&#x3D;fcf1edd7-40a6-429a-aa33-32eae87a480aONBOOT&#x3D;yesNM_CONTROLLED&#x3D;yesBOOTPROTO&#x3D;staticIPADDR&#x3D;192.168.199.14NETMASK&#x3D;255.255.255.0GATEWAY&#x3D;192.168.199.1DNS1&#x3D;192.168.199.1IPV6INIT&#x3D;noUSERCTL&#x3D;no[root@DannyGreen ~]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0DEVICE&#x3D;eth0HWADDR&#x3D;78:e3:b5:08:82:54TYPE&#x3D;EthernetUUID&#x3D;fcf1edd7-40a6-429a-aa33-32eae87a480aONBOOT&#x3D;yesNM_CONTROLLED&#x3D;yesBOOTPROTO&#x3D;noneBRIDGE&#x3D;br0IPV6INIT&#x3D;noUSERCTL&#x3D;no[root@DannyGreen ~]# service network restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，KVM宿主机的系统环境就部署好了。</p><h3 id="安装xterm"><a href="#安装xterm" class="headerlink" title="安装xterm"></a>安装xterm</h3><p>在纯命令行创建虚拟机时，出不来安装界面，错误提示：</p><blockquote><p>cpu0 disabled perfctr wrmsr: 0xc1 data 0xffff</p></blockquote><p>网上信息比较少，也不知道在说啥，只有一个<a href="http://superuser.com/questions/693509/kvm-cpu0-disabled-perfctr-wrmsr-hangs" title="kvm cpu0 disabled perfctr wrmsr - hangs">比较靠谱</a>，大概问题就是要想用libvirtd，必须得有x环境才行。我在windows上得装一个<a href="http://sourceforge.net/projects/xming/" title="Xming X Server for Windows">Xming</a>，然后ssh客户端(xshell)开启x11转发，用xterm才看到安装界面。用xterm安装时终于见到了安装界面，其实上面那段提示一点关系都没有，主要问题就是纯文本模式显示不出来……<br><img src="http://7xi8sr.com1.z0.glb.clouddn.com/xterm.jpg" alt="使用xterm后终于看到了安装界面"></p><pre class="line-numbers language-none"><code class="language-none"># 不确定是否需要安装x window，因为之前打算装gnome了，结果只要xterm就搞定了[root@DannyGreen ~]# yum groupinstall -y &#39;X Window System&#39;[root@DannyGreen ~]# yum install -y xterm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>update:</strong> MacOS下可以用<a href="http://www.xquartz.org/" title="XQuartz">XQuartz</a>来启动xterm。在XQuartz的terminal里直接输入<code>ssh -Y [host]</code>就可以登录了。</p><h1 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h1><h2 id="创建虚拟机的磁盘"><a href="#创建虚拟机的磁盘" class="headerlink" title="创建虚拟机的磁盘"></a>创建虚拟机的磁盘</h2><p>由于我/home分区的磁盘空间最大，所以我的镜像主要放在<code>/home/kvmdisk/</code>下。</p><pre class="line-numbers language-none"><code class="language-none">[root@DannyGreen ~]# qemu-img create -f qcow2 -o preallocation&#x3D;metadata &#x2F;home&#x2F;kvmdisk&#x2F;centos7.img 50G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建虚拟机-1"><a href="#创建虚拟机-1" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><pre class="line-numbers language-none"><code class="language-none">[root@DannyGreen ~]# virt-install --name&#x3D;centos7 --ram 4096 --vcpus&#x3D;4 -f &#x2F;home&#x2F;kvmdisk&#x2F;centos7.img --cdrom&#x3D;&#x2F;home&#x2F;kvmdisk&#x2F;CentOS-7-x86_64-Minimal-1503-01.iso --arch&#x3D;x86_64 --os-type&#x3D;linux --bridge&#x3D;br0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令之后会启动<code>virt-manager</code>进行安装，注意这里一定要X环境才能看得见……之后就和正常安装系统一样，网络配置方法和真机差不多。</p><h1 id="管理虚拟机"><a href="#管理虚拟机" class="headerlink" title="管理虚拟机"></a>管理虚拟机</h1><ul><li>开机<code>virsh start [name]</code></li><li>关机<code>virsh shutdown [name]</code></li><li>强制关闭<code>virsh destroy [name]</code></li><li>查看全部虚拟机<code>virsh list --all</code></li><li>删除虚拟机<code>virsh undefine [name]</code></li><li>修改虚拟机配置<code>virsh edit [name]</code></li></ul><h1 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h1><p>在原始虚拟机关闭的情况下，就可以克隆虚拟机了：</p><pre class="line-numbers language-none"><code class="language-none">virt-clone --original&#x3D;datanode0 --name&#x3D;datanode1 --file&#x3D;&#x2F;home&#x2F;kvmdisk&#x2F;datanode1.img<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>克隆好虚拟机之后因为是完全克隆的，所以网卡配置啥的是和源机器一样，所以还得改一下，这里用virsh console登陆之后，首先打开文件<code>/etc/udev/rules.d/70-persistent-net.rules</code>，这里有两个eth0的MAC地址，一般第一个是源机器的，删了就行，然后修改<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>，将MAC改成另外一个，这个也可以通过<code>virsh edit [name]</code>查询到，UUID不知道不改行不行，反正顺手改了吧，然后重启虚拟机，网卡就能用了。</p><p>看到网上文章说直接cp镜像文件，然后添加一个xml配置也能克隆虚拟机，但是我试过是不行的，镜像文件是个空洞文件，拷贝完实际大小和原始不一样，也不清楚是为什么。虽然执行virt-clone时间很久，我250G的镜像要克隆1小时多，但好歹能用……</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="http://taokey.blog.51cto.com/4633273/1540873">Centos6.5 x86_64系统安装kvm虚拟机—基础篇</a></li><li><a href="http://taokey.blog.51cto.com/4633273/1541022">Centos6.5系统安装kvm虚拟机之克隆、拷贝文件安装新虚拟机</a></li><li><a href="http://blog.csdn.net/zhangzxing/article/details/8066384">通过 libvirt和convirt来管理 KVM 虚拟机</a></li><li><a href="http://www.linuxidc.com/Linux/2012-05/61445.htm">Redhat/CentOS6.2 x86系统KVM虚拟机网络配置NAT方式</a></li><li><a href="http://www.linuxidc.com/Linux/2012-12/76248.htm">CentOS Linux解决Device eth0 does not seem to be present</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟化 </tag>
            
            <tag> KVM </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> CentOS6 </tag>
            
            <tag> Linux </tag>
            
            <tag> Xen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大型坑之naive-qie抓取系统设计</title>
      <link href="/2015/11/09/da-xing-keng-zhi-naive-qie-zhua-qu-xi-tong-she-ji/"/>
      <url>/2015/11/09/da-xing-keng-zhi-naive-qie-zhua-qu-xi-tong-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>话说最近工作中有一些去别人网站抓数据的需求，一般就是写俩脚本搞定，一两个需求还好，多了挺麻烦的，而且网页就丢硬盘上，太多了的话速度也慢。话说做了5年搜索一直都没做过spider，只是有一些了解，所以想尝试着自己设计一套抓取系统，这套系统的实现不一定严谨，可能平时接触的一些开源库就直接拿来用了，也算是练手吧。</p><p>这套系统命名为naive-qie，naive意为simple，怎么简单怎么来，如果以后不坑，会出一系列naive-xxx的。窃，抓取无非就是到别人网站上偷数据嘛，但是互联网人的事情怎么能叫做偷呢，要叫“窃”，所以这套抓取系统就命名为naive-qie了。</p><p>当然，除了日常工作外，还有各种事情，还要玩各种游戏，所以这个系列坑不坑无法保证，所以系列名为大型坑。</p><p>大致想了一下，这套系统包含三个部分，网页库naive-pagedb，抓取端naive-spider还有任务中心naive-crawlcenter。大概有些想法的是前面两个，最重要的crawlcenter还没想好包括哪些职能，大体架构如下：<br><img src="http://7xi8sr.com1.z0.glb.clouddn.com/naive-qie.png" alt="naive-qie抓取系统"></p><h1 id="数据环"><a href="#数据环" class="headerlink" title="数据环"></a>数据环</h1><p>qie的设计场景是垂直抓取，也就是定向抓取，不做网页大搜索的爬取只用，也是比较懒，省略了抓取后抽取回灌的步骤。一切任务从crawlcenter发起，crawlcenter提交任务(url等)到task-queue中，spider从task-queue总获取任务，抓取到网页，灌入pagedb。而crawlcenter根据配置定时从pagedb中seek出一批网页增量，解析内部的定向url，再提交都task-queue中，从而完成一个数据回路。</p><p>对于垂直抓取来说，还有一个比较重要的问题，时效性问题。因为crawlcenter从设计上不接收spider直接发回网页数据，而是通过pagedb进行交互，因此这条通路并不具备时效性。这里给pagedb添加一个订阅功能，crawlcenter可以向pagedb发起订阅请求，订阅那些需要时效性关注的页面抓取状况，由pagedb实时push给crawlcenter。</p><h1 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h1><h2 id="naive-pagedb"><a href="#naive-pagedb" class="headerlink" title="naive-pagedb"></a>naive-pagedb</h2><p>一个网页库，需要支撑以下业务需求：</p><ol><li>支持批量的查询、写入请求</li><li>支持按特定pattern(或前缀)对key进行seek</li><li>支持seek某一时间段的页面</li><li>支持按特定pattern(或前缀)的key进行订阅</li></ol><p>因为网页库可能非常大，所以还需要考虑分布式的问题，这里就省略了，因为分布式存储需要设计的点太多了，重点在于可用性、安全性。后续实现可能也已单机版为主，即使涉及到分布式，也是简单的设计，不考虑高可用性问题。理论上可以用其他分布式数据服务代替。</p><h2 id="task-queue"><a href="#task-queue" class="headerlink" title="task-queue"></a>task-queue</h2><p>一个任务消息队列，可以用redis等实现。可以按照site/domain进行分环，分成多条队列。</p><h2 id="naive-spider"><a href="#naive-spider" class="headerlink" title="naive-spider"></a>naive-spider</h2><p>抓取客户端，从task-queue中获取若干任务，多线程进行抓取(分环后不会对同一站点同时抓取，避免封禁)。如果抓取成功，将网页存入到pagedb中。spider可以同时部署多套，提高抓取能力。</p><h2 id="naive-crawlcenter"><a href="#naive-crawlcenter" class="headerlink" title="naive-crawlcenter"></a>naive-crawlcenter</h2><p>任务中心，负责提交任务、解析网页。这其实是整个qie系统的最核心部分，毕竟spider和pagedb的业务都很简单。这里crawlcenter包含哪些职能还没完全想清楚，怎么去做集成也没想好，等想明白了再说吧(深坑!)……</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>由于目前考察的工作语言比较多，所以这套系统很可能是异构的。目前比较确定的是pagedb，主要以c/c++为主进行开发，具体的模块后面会有单独的文章详细说明。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> 抓取系统 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 总体设计 </tag>
            
            <tag> 大型坑 </tag>
            
            <tag> naive系列 </tag>
            
            <tag> naive-spider </tag>
            
            <tag> naive-pagedb </tag>
            
            <tag> naive-crawlcenter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吐槽一下Lucene的Field接口变化(更新再吐槽)</title>
      <link href="/2015/11/02/tu-cao-yi-xia-lucene-de-field-jie-kou-bian-hua/"/>
      <url>/2015/11/02/tu-cao-yi-xia-lucene-de-field-jie-kou-bian-hua/</url>
      
        <content type="html"><![CDATA[<p><a href="http://lucene.apache.org/" title="Apache Lucene">Lucene</a>是老牌搜索引擎索引工具了，我最早接触是10年夏天在淘宝实习的时候，作为一个小本科生，那是第一次接触到搜索引擎技术，当时的项目是基于<a href="http://lucene.apache.org/solr/" title="Apache Solr">Solr</a>做的。再之后的工作虽然都是搜索相关的，但都是自己实现的索引系统。月初入职小麦公社，这边的搜索是基于Lucene做的，所以又开始用了一下Lucene。</p><h1 id="一吐槽"><a href="#一吐槽" class="headerlink" title="一吐槽"></a>一吐槽</h1><p>话说是这样一个需求，增加一个生成的<code>Field</code>，不能分词，不用存储，需要设置特殊权重。看了一下Lucene的接口，<code>TextField</code>是分词的，而<code>StringField</code>是整体使用不分词的，因此自然选择了<code>StringField</code>。但是运行时问题就来了：</p><blockquote><p>Exception in thread “main” java.lang.IllegalArgumentException: You cannot set an index-time boost on an unindexed field, or one that omits norms<br>仔细查了一下，虽然<code>StringField</code>和<code>TextField</code>都是继承<code>Field</code>接口的，但实际上<code>StringField</code>属于”omits norms”，是不能调用<code>setBoost(float b)</code>接口的，而且坑爹的是那么多<code>XxxField</code>中只有<code>TextField</code>可以调用，简直无情啊。但还好Lucene还可以自己指定<code>Field</code>的分词、存储方法:</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Field</span><span class="token punctuation">(</span>FIELD_NAME<span class="token punctuation">,</span> <span class="token string">"somestring"</span><span class="token punctuation">,</span> <span class="token class-name">Field<span class="token punctuation">.</span>Store</span><span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token class-name">Field<span class="token punctuation">.</span>Index</span><span class="token punctuation">.</span>NOT_ANALYZED<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会运行时就妥儿妥儿的了，等等，为什么有删除线，这个构造函数竟然被标记成<code>@Deprecated</code>了？！强迫症不能忍啊，赶紧看看还有哪些没过时的接口。发现了这么一个<code>org.apache.lucene.document.Field.Field(String name, String value, FieldType type)</code>，赶紧试试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Field</span><span class="token punctuation">(</span>FIELD_NAME<span class="token punctuation">,</span> <span class="token string">"somestring"</span><span class="token punctuation">,</span> <span class="token class-name">StringField</span><span class="token punctuation">.</span>TYPE_NOT_STORED<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果和直接使用<code>StringField</code>没啥区别，这应该就是另一种表达形式。</p><p>找了半天，还是没有找到不分词、不存储、可以设置boost且不deprecated的方法……这接口简直坑啊，毕竟搜索引擎中对字段的使用方式千变万化。而且<code>StringField</code>继承了接口，调用<code>setBoost</code>却抛出运行时异常到底是什么鬼？！真是不得不吐槽一下。没发现，实现这么简单的需求，总不能自定义一个Field吧，只能在方法钱加上<code>@SuppressWarnings(&quot;deprecation&quot;)</code>眼不见心不烦了……</p><h1 id="二吐槽-2015-11-03更新"><a href="#二吐槽-2015-11-03更新" class="headerlink" title="二吐槽(2015.11.03更新)"></a>二吐槽(2015.11.03更新)</h1><p>话说今天做一个搜索需求，要求在某一分类下进行搜索，之前用的是<code>Filter</code>，但是<code>IndexSeacher</code>的</p><pre class="line-numbers language-none"><code class="language-none">void org.apache.lucene.search.IndexSearcher.search(Query query, Filter filter, Collector results) throws IOException<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法被标注为<code>@Deprecated</code>了，还是强迫症不能忍，看了一下这个方法的文档，是这么写的：</p><blockquote><p>Deprecated. Use boolean queries with BooleanClause.Occur.FILTER clauses instead</p></blockquote><p>嗯，说的挺明白的，说用就用呗，把Query Filter改成了一个<code>BooleanClause.Occur.FILTER</code>的<code>BooleanClause</code>，其实挺简单的，但是评估结果时突然发现，只匹配到这个分句的结果全部被召回了，也就是说原先想表达的query是A AND B，从<code>Filter</code>改成<code>BooleanClause</code>之后，语义变成了A OR B，这完全不对啊。再仔细看<a href="http://lucene.apache.org/core/5_2_0/core/org/apache/lucene/search/BooleanClause.Occur.html#FILTER" title="FILTER">BooleanClause.Occur.FILTER</a>的文档：</p><blockquote><p>Like MUST except that these clauses do not participate in scoring.</p></blockquote><p>原来它只是一个不参与打分的<code>MUST</code>分句，这其实和<code>Filter</code>语义是不完全相同的，既然不能完全取代，怎么能直接给deprecated呢……这其实和一吐槽的问题差不多，就是新接口的语义是比旧接口小的。</p><p>google了一下，找到了当初加<code>FILTER</code>这个feature时的<a href="https://issues.apache.org/jira/browse/LUCENE-6227" title="Add BooleanClause.Occur.FILTER">讨论</a>：</p><blockquote><p>Now that we have weight-level control of whether scoring is needed or not, we could add a new clause type to BooleanQuery. It would behave like MUST exept that it would not participate in scoring.<br>Why do we need it given that we already have FilteredQuery? The idea is that by having a single query that performs conjunctions, we could potentially take better decisions. It’s not ready to replace FilteredQuery yet as FilteredQuery has handling of random-access filters that BooleanQuery doesn’t, but it’s a first step towards that direction and eventually FilteredQuery would just rewrite to a BooleanQuery.<br>I’ve been calling this new clause type FILTER so far, but feel free to propose a better name.</p></blockquote><p>这个<code>BooleanClause</code>的目标其实就是必含这个clause并且不参与评分，和FilteredQuery不完全一样啊，简直莫名其妙，也许我们之前的用法不那么lucene吧……</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Lucene </tag>
            
            <tag> 搜索引擎 </tag>
            
            <tag> 索引 </tag>
            
            <tag> TextField </tag>
            
            <tag> StringFeild </tag>
            
            <tag> Field </tag>
            
            <tag> Filter </tag>
            
            <tag> BooleanClause.Occur.FILTER </tag>
            
            <tag> BooleanClause </tag>
            
            <tag> FilteredQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自用服务器配置小记-系统篇不定期更新</title>
      <link href="/2015/11/02/zi-yong-fu-wu-qi-pei-zhi-xiao-ji-xi-tong-pian-bu-ding-qi-geng-xin/"/>
      <url>/2015/11/02/zi-yong-fu-wu-qi-pei-zhi-xiao-ji-xi-tong-pian-bu-ding-qi-geng-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>按照我取机器名用马刺队员的习惯，我决定将这台机器命名为<code>DannyGreen</code>，希望这台屌丝的DIY服务器可以像格林一样，成为一个廉价但是超值的服务器。</p><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="系统选择"><a href="#系统选择" class="headerlink" title="系统选择"></a>系统选择</h2><p>操作系统自然选择国内生产环境使用最多的CentOS(RHEL)系列，目前最新版本是7.x，使用gcc 4.8+和kernel 3.x，不过7的系统配置管理方面修改了太多，我用6.x的比较多，而且国内基本还是用6的多，所以我还是选择了6系的最新版本6.7。</p><h2 id="关于用U盘安装"><a href="#关于用U盘安装" class="headerlink" title="关于用U盘安装"></a>关于用U盘安装</h2><p>我最开始用UltraISO做的启动U盘，但是启动时一直卡在<code>Press the &lt;Enter&gt; key to begin the installation process</code>画面，用<a href="http://sourceforge.net/projects/win32diskimager/" title="Win32 Disk Imager">Win32 Disk Imager</a>制作就没问题了。之前做前厂的系统也用过一次U盘，也是卡在那，还以为是镜像的问题。安装的具体过程就不说了，反正大家都会。</p><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><h3 id="etc-sudoers"><a href="#etc-sudoers" class="headerlink" title="/etc/sudoers"></a>/etc/sudoers</h3><p>root密码被我设置成一个复杂的密码了，所以自己账号的sudo权限加上比较方便，注意这个文件是没有写权限的，所以先给一个u的w权限，编辑完再去掉即可，在文件中添加：</p><pre class="line-numbers language-none"><code class="language-none">odin    ALL&#x3D;(ALL)       NOPASSWD: ALL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="etc-sysctl-conf"><a href="#etc-sysctl-conf" class="headerlink" title="/etc/sysctl.conf"></a>/etc/sysctl.conf</h3><p>这里主要配置最大打开文件数，配置完后执行<code>sysctl -p /etc/sycctl.conf</code>生效，在文件结尾添加：</p><pre class="line-numbers language-none"><code class="language-none"># max open filesfs.file-max &#x3D; 409600<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打开路由转发功能：</p><pre class="line-numbers language-none"><code class="language-none">net.ipv4.ip_forward &#x3D; 1net.ipv4.conf.default.rp_filter &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="etc-security-limits-conf"><a href="#etc-security-limits-conf" class="headerlink" title="/etc/security/limits.conf"></a>/etc/security/limits.conf</h3><p>这里主要是配置最大打开文件数和core文件限制，也就是ulimit的配置，在文件中添加：</p><pre class="line-numbers language-none"><code class="language-none">* soft nofile 409600* hard nofile 409600* soft core unlimited* hard core unlimited<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h3><p>这东西没卵用，还是禁用了吧，编辑<code>/etc/selinux/config</code>将<code>SELINUX</code>改成<code>disabled</code>，貌似要重启，即：</p><pre class="line-numbers language-none"><code class="language-none">SELINUX&#x3D;disabled<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="etc-profile"><a href="#etc-profile" class="headerlink" title="/etc/profile"></a>/etc/profile</h3><p>这里其实就是把<code>/usr/local</code>系的加入到相关环境变量，免得各个用户再配，在文件中添加：</p><pre class="line-numbers language-none"><code class="language-none">export PATH&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;bin:$PATH&quot;export LD_LIBRARY_PATH&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;lib:$LD_LIBRARY_PATH&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="同步时间"><a href="#同步时间" class="headerlink" title="同步时间"></a>同步时间</h3><p>每次装完系统，时间都不对，只能重新设置一下：</p><pre class="line-numbers language-none"><code class="language-none">ntpdate time.windows.com &amp;&amp; hwclock -w<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h3><p>直接上执行<code>service iptables save</code>命令后的<code>/etc/sysconfig/iptables</code>好了：</p><pre class="line-numbers language-none"><code class="language-none"># Generated by iptables-save v1.4.7 on Tue Nov  3 19:56:09 2015*nat:PREROUTING ACCEPT [2:486]:POSTROUTING ACCEPT [0:0]:OUTPUT ACCEPT [0:0]-A PREROUTING -d 199.9.249.0&#x2F;24 -i eth0 -j REDIRECT-A PREROUTING -d 199.9.251.0&#x2F;24 -i eth0 -j REDIRECT-A POSTROUTING -o eth0 -j MASQUERADECOMMIT# Completed on Tue Nov  3 19:56:09 2015# Generated by iptables-save v1.4.7 on Tue Nov  3 19:56:09 2015*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [6117:1304278]-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -p tcp -m state --state NEW -m multiport --dports 80,1935,2012 -j ACCEPT-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -s 192.168.199.0&#x2F;24 -j ACCEPT-A FORWARD -d 192.168.199.0&#x2F;24 -j ACCEPT-A FORWARD -j REJECT --reject-with icmp-host-prohibitedCOMMIT# Completed on Tue Nov  3 19:56:09 2015<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sshd监听端口"><a href="#sshd监听端口" class="headerlink" title="sshd监听端口"></a>sshd监听端口</h3><p>服务器放在家里，白天上班时在公司通过ssh访问，但是国内22端口root密码暴利破解的太多了，安全起见还是改一下端口吧，修改<code>/etc/ssh/sshd_config</code>：</p><pre class="line-numbers language-none"><code class="language-none">Port 2012<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CPU温度检测"><a href="#CPU温度检测" class="headerlink" title="CPU温度检测"></a>CPU温度检测</h3><pre class="line-numbers language-none"><code class="language-none">sudo yum install -y lm_sensorssudo sh -c &quot;yes|sensors-detect&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后执行<code>sensors</code>就行。</p><h3 id="samba"><a href="#samba" class="headerlink" title="samba"></a>samba</h3><pre class="line-numbers language-none"><code class="language-none">yum install -y samba samba-client samba-swat# 给用户设置samba密码smbpasswd -a odin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h3><p>详见<a href="http://odinliu.com/2015/11/11/%E5%9C%A8CentOS-6%E4%B8%8A%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2KVM%E8%99%9A%E6%8B%9F%E6%9C%BA/">在CentOS 6上安装部署KVM虚拟机</a></p><h3 id="CDH"><a href="#CDH" class="headerlink" title="CDH"></a>CDH</h3><p>详见<a href="http://www.cloudera.com/content/www/en-us/documentation/enterprise/latest/topics/cm_ig_install_path_a.html">Installation Path A - Automated Installation by Cloudera Manager</a></p><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><h3 id="epel"><a href="#epel" class="headerlink" title="epel"></a>epel</h3><p>epel相当于一个比较全的第三方仓库</p><pre class="line-numbers language-none"><code class="language-none">wget http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;epel-release-latest-6.noarch.rpm &amp;&amp; rpm -ivh epel-release-latest-6.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="其他库"><a href="#其他库" class="headerlink" title="其他库"></a>其他库</h3><p>这里收录所有用yum安装的类库</p><ul><li>mcelog</li><li>clang</li><li>clang-devel</li><li>pcre-devel</li><li>lm_sensors</li><li>libicu-devel</li><li>samba</li><li>samba-client</li><li>samba-swat</li></ul><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><pre class="line-numbers language-none"><code class="language-none">git config --global user.email&#x3D;odinushuaia@gmail.comgit config --global user.name&#x3D;&quot;Liu Yiding&quot;git config --global core.editor&#x3D;vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;markgandolfo&#x2F;git-bash-completion.git#再在.bashrc中添加一段source即可：source &#x2F;path&#x2F;to&#x2F;git-completion.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><h3 id="基本配置-1"><a href="#基本配置-1" class="headerlink" title="基本配置"></a>基本配置</h3><p>vim基本只要把<code>$HOME/.vimrc</code>和<code>$HOME/.vim</code>拷贝一下就能用，这里有空再整理吧</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h2 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>由于node.js最新版编译安装需要g++ 4.8以上，而CentOS 6默认是4.4，所以直接用二进制安装就好。</p><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v5.0.0&#x2F;node-v5.0.0-linux-x64.tar.gz&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在.bashrc中添加<code>NODE_HOME</code>环境变量，以及将<code>$NODE_HOME/bin</code>添加到<code>PATH</code>下</p><h3 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h3><p>npm太慢，直接上淘宝的cnpm</p><pre class="line-numbers language-none"><code class="language-none">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="其他包"><a href="#其他包" class="headerlink" title="其他包"></a>其他包</h3><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>首先需要卸载openjdk，<code>rpm -qa | grep java</code>，看看安装了哪些包，卸载一下就行。Oracle坑爹的网站下载真是太慢了，下好之后解压缩就行，然后配环境变量，顺便下个maven，很多工程要用到。在.bashrc中添加相关环境变量，记得把bin加到<code>PATH</code>中：</p><pre class="line-numbers language-none"><code class="language-none">export M2_HOME&#x3D;&quot;$HOME&#x2F;app&#x2F;maven&quot;export JAVA_HOME&#x3D;&quot;$HOME&#x2F;app&#x2F;jdk&quot;export CLASS_PATH&#x3D;&quot;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;rt.jar&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="nginx-with-rtmp"><a href="#nginx-with-rtmp" class="headerlink" title="nginx(with rtmp)"></a>nginx(with rtmp)</h2><p>首先用yum安装<code>pcre-devel</code>，之后下载nginx和nginx-rtmp-module。</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;configure --add-module&#x3D;..&#x2F;nginx-rtmp-module --with-http_ssl_module --prefix&#x3D;&#x2F;opt&#x2F;nginxmake -j 10 &amp;&amp; sudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><p>懒得编译一个了，所以直接下载二进制分发就行。主要配置两个环境变量:</p><pre class="line-numbers language-none"><code class="language-none"># for goexport GOROOT&#x3D;&quot;$HOME&#x2F;app&#x2F;go&quot;export GOPATH&#x3D;&quot;$HOME&#x2F;gospace&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中<code>GOROOT</code>是解压出来的go目录，而<code>GOPATH</code>是go的包管理体系需要用到的路径，前者系统共用无所谓，后者放到自己家目录比较方便。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><a href="http://www.colm.net/files/ragel/ragel-6.9.tar.gz">ragel-6.9</a></li><li><a href="https://github.com/ajwans/libtoml.git">libtoml</a></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统运维 </tag>
            
            <tag> Linux </tag>
            
            <tag> DIY </tag>
            
            <tag> 双路工作站 </tag>
            
            <tag> CentOS 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自用服务器配置小记(硬件篇)</title>
      <link href="/2015/11/01/zi-yong-fu-wu-qi-pei-zhi-xiao-ji-ying-jian-pian/"/>
      <url>/2015/11/01/zi-yong-fu-wu-qi-pei-zhi-xiao-ji-ying-jian-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>因为家里的台式机要用来打游戏，所以只能装Windows，平时做点业余开发娱乐都是用虚拟机装个Linux环境。最近虚拟机磁盘差不多满了，感觉用的非常不爽，正好一个朋友有DIY双路工作站的经验，于是果断决定自己配一台服务器算了，预算就定在3000以内。</p><h1 id="硬件篇"><a href="#硬件篇" class="headerlink" title="硬件篇"></a>硬件篇</h1><h2 id="CPU-主板-内存"><a href="#CPU-主板-内存" class="headerlink" title="CPU/主板/内存"></a>CPU/主板/内存</h2><p>淘宝上拆机服务器硬件不少，比较廉价的是四五年前的1366平台，相对较新的2011平台价格比较高，肯定不在我预算范围内了，所以果断选择了1366。1366平台的CPU之前比较流行的是X5650，不过买的人多人价格自然水涨船高，之前是350，现在都六七百了。主要考虑的就三款：X5677，E5645和L5640。主板方面选定了HP的<a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.71Jpoo&id=521158541569&_u=13m0g608797" title="惠普HP1366双路主板">180g6</a>，其他双路X58的板子都太贵了。内存用的<a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.71Jpoo&id=13978621463&_u=13m0g609572" title="原厂 三星4G 8G DDR3 1333 ECC REG服务器内存">三星4G ECC REG内存马甲版</a>，直接12条插满，48G也够用了。</p><ul><li>X5677，360元，4核8线程，主频3.46G，睿频3.73G，虽然不如另外两个6核的核心多，但是主频很高，比较适合游戏什么的，但是功率太高了，TDP达到了130W，而180g6主板的最大功耗支持到95W的，所以这个首先被排除了</li><li>E5645，430元，6核12线程，主频2.4G，睿频2.67G，E系列的U，TDP是80W，看官网价格是L5640的一半，而且睿频也比较低，所以放弃</li><li><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.71Jpoo&id=43816312951&_u=13m0g606d73" title="英特尔XEON L5640 2.26G 散片">L5640</a>，350元，6核12线程，主频2.26G，睿频2.8G，低电压L系列，性能基本够用，TDP是60W，估计散热啥的也比较低，所以就选择了这个，价格也便宜不少，反正主题不就是省钱么……</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>机箱最便宜的就是<a href="http://item.yixun.com/item-2215394.html" title="先马（SAMA）坦克(透彻标准雪装)">先马坦克</a>了，黑的199，白的209，个人选择白的，这个机箱内部比较宽敞，但是其实还是不是为E-ATX板设计的，光驱位有个鼓包，容易触到主板底部，老板让“摁”一下压扁点，不过挺硬的，我是拿板子给压弯不少，反正不影响外观……因为ATX只有两排固定孔，而E-ATX需要三排，所以还要配点<a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.71Jpoo&id=25121660451&_u=13m0g60d0e2" title="电脑机箱主板PCB电路板塑料脚垫间隔离绝缘柱">塑料柱</a>，另外主板是不配<a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.71Jpoo&id=520350450971&_u=13m0g60507d" title="HP DL160 G6 Sl160z G6 SE316M1 DL180 G6 SE1220挡板">挡板</a>的，需要单独购买。主板后面还有一个定位灯，要把外壳卸下来才能放进去……电源的话我选择的是<a href="http://item.yixun.com/item-1961656.html" title="振华（SUPER FLOWER）战蝶模组500电源">振华战蝶</a>，半模组，带蓝光(虽然机箱有电源仓看不见)，由于L5640两颗功耗才120W，因此我只买了500W的，反正我不上显卡。正好赶上了易迅的机箱电源500-80活动，比较超值。硬盘就选择了希捷2T的台式机硬盘，正好赶上易迅300-30活动，399到手。</p><p>CPU散热器方面，我选择的是<a href="http://item.yixun.com/item-1960102.html" title="九州风神（DEEPCOOL）冰凌 MINI 旗舰双刃版">冰凌min双风扇版</a>，价格便宜，虽然只有双铜柱，但是一来有俩风扇呢，二来L5640的功耗不高，发热自然不多，应该够用了。值得注意的是，这个散热器由于双风扇，需要俩3pin的风扇口，主板上是没有的，所以还得买电源接口转换线，我是买了根<a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.JLLYzb&id=43975988749&_u=13m0g605d74" title="电源SATA转接3PIN风扇">sata一转四3pin</a>的线，这样机箱风扇、北桥风扇啥的都够了。(<strong>update</strong>: sata一拖四没现货了，只买到了一拖三的，后来再我一奶机的主板盒里找到了D口一拖四的转接线，这钱可以省啊……)</p><p>1366平台北桥发热比较厉害，都推荐买个<a href="https://item.taobao.com/item.htm?spm=a230r.1.14.16.HQlPWo&id=42874463221" title="台达4CM/厘米4015 12V双滚珠/大风量/机箱电源显卡南北桥散热风扇">4cm风扇</a>加上，这个还没买呢，朋友推荐台达的风扇，风量很足，但估计噪音不会小吧……</p><p><strong>update</strong>: 昨晚塑料柱到了准备上机箱时才发现主板24pin的电源线不够长，由于E-ATX主板的主板电源在机箱顶部，而电源在底部，24pin的线几乎要跨越整个机箱高度。我用皮尺量了一下，大概线需要40cm长才可以接上，只能淘宝买个24pin延长线了，好在搞机箱DIY布线的很多，也比较好买，价格大概10元每10cm的样子，基本上20cm是够用的，我买了30cm的，成本又上去了T_T</p><p><strong>update2</strong>: 之前买的北桥散热风量比较大，所以噪音非常大，按在散热片上简直像个吸尘器，不能忍啊，于是又在奶茶店上买了个<a href="http://item.jd.com/1862052.html" title="捷领 (GELID)Silent 5 5cm小机箱风扇 4000转高转速小风扇 3针接口">5cm的风扇</a>，淘宝有便宜的，但是因为物流慢，所以选择了奶茶店稍微贵一点的。量了一下尺寸，5cm刚好装的下，因为没有螺丝固定位，所以用扎带绑在了散热片的卡孔上。</p><h2 id="总价"><a href="#总价" class="headerlink" title="总价"></a>总价</h2><table><thead><tr><th>配件</th><th>数量</th><th>单价</th></tr></thead><tbody><tr><td>CPU</td><td>2</td><td>355.00</td></tr><tr><td>主板</td><td>1</td><td>430.00</td></tr><tr><td>内存</td><td>12</td><td>55.00</td></tr><tr><td>机箱+电源</td><td>1</td><td>458.00</td></tr><tr><td>硬盘</td><td>1</td><td>399.00</td></tr><tr><td>散热、风扇、线材</td><td>1</td><td>104.60</td></tr><tr><td>挡板</td><td>1</td><td>24.00</td></tr><tr><td>塑料柱</td><td>1</td><td>25.80</td></tr><tr><td>转接线</td><td>1</td><td>23.00</td></tr><tr><td>北桥散热</td><td>1</td><td>15.00</td></tr><tr><td>北桥散热二代目</td><td>1</td><td>29.90</td></tr><tr><td>24pin主板供电延长线</td><td>1</td><td>36.84</td></tr><tr><td>灯条</td><td>1</td><td>6.90</td></tr><tr><td>机箱风扇2</td><td>1</td><td>13.90</td></tr><tr><td>总价</td><td></td><td>2936.94</td></tr></tbody></table><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p><img src="http://7xi8sr.com1.z0.glb.clouddn.com/qian.png"><br>总体来说这次DIY还是挺折腾的，各种买配件买了一周，主要是有些东西要到货后才发现缺的。最折腾的要数E-ATX的主板，实在太大了，和机箱不般配，卡吧喜闻乐见的锯机箱，在我这变成摁机箱了。标准的ATX板子双路的话布局就太紧凑了，这也是没办法，有钱上个10核20线程什么的也可以啊，所以说到底还是没钱……</p><h1 id="多图杀猫"><a href="#多图杀猫" class="headerlink" title="多图杀猫"></a>多图杀猫</h1><p><img src="http://7xi8sr.com1.z0.glb.clouddn.com/%E4%B8%BB%E6%9D%BF%E5%88%B0%E8%B4%A7.jpg" alt="主板到货"><br><img src="http://7xi8sr.com1.z0.glb.clouddn.com/cpu.jpg" alt="CPU到货"><br><img src="http://7xi8sr.com1.z0.glb.clouddn.com/%E5%8E%8B%E6%89%81%E6%9C%BA%E7%AE%B1.jpg" alt="需要压扁的机箱"><br><img src="http://7xi8sr.com1.z0.glb.clouddn.com/%E5%AE%9A%E4%BD%8D%E7%81%AF%E7%9B%96.jpg" alt="需要卸掉的灯盖"><br><img src="http://7xi8sr.com1.z0.glb.clouddn.com/%E7%BB%84%E8%A3%85%E5%AE%8C%E6%AF%95.jpg" alt="组装完毕"><br><img src="http://7xi8sr.com1.z0.glb.clouddn.com/24%E6%A1%86%E7%A5%9E%E7%A7%98%E5%8A%A0%E6%88%90.jpg" alt="24框神秘加成(手动斜眼)"><br><img src="http://7xi8sr.com1.z0.glb.clouddn.com/%E6%BB%A1%E8%BD%BD%E6%B8%A9%E5%BA%A6.png" alt="满载温度"><br><img src="http://7xi8sr.com1.z0.glb.clouddn.com/beiqiaosanre.jpg" alt="北桥散热绑定"><br><img src="http://7xi8sr.com1.z0.glb.clouddn.com/zhengmianxian.jpg" alt="内视理线"><br><img src="http://7xi8sr.com1.z0.glb.clouddn.com/beimian.jpg" alt="背面理线"><br><img src="http://7xi8sr.com1.z0.glb.clouddn.com/zhenglian.jpg" alt="正脸效果"><br><img src="http://7xi8sr.com1.z0.glb.clouddn.com/dengtiao.jpg" alt="灯条加特效"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统运维 </tag>
            
            <tag> DIY </tag>
            
            <tag> 双路工作站 </tag>
            
            <tag> 1366 </tag>
            
            <tag> L5640 </tag>
            
            <tag> 180g6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从国外券商提取现金回国</title>
      <link href="/2015/03/24/cong-guo-wai-quan-shang-ti-qu-xian-jin-hui-guo/"/>
      <url>/2015/03/24/cong-guo-wai-quan-shang-ti-qu-xian-jin-hui-guo/</url>
      
        <content type="html"><![CDATA[<p>13年美股大热，于是果断开了美股账户，当时选择的券商是美国的第一理财(Firstrade)。可惜好景不长，在美联储加息等消息的刺激下，中概股一直萎靡不振，加上去年下半年开始A股走强，投资美股中概已经类似赌博了，再加上懒得半夜看盘，所以很久都没有进行过交易了。赶上年后在老爸的带领下开始了A股的旅程，于是打算把美股的钱全部转回来，毕竟A股不太用我自己操心。</p><p>于是研究了一下怎么从美国券商提钱，这里以第一理财为例，其他的券商应该也大同小异。首先必须有一张招行的香港一卡通，其他行在境外的借记卡应该也可以，直接提回国内没试过，但因为我国的外汇管制，应该直接提会比较难，所以这里在招行的香港分行做一下中转。登录券商网站之后，在我的账户这里找到存款/提款，可以看到提款有三种方式，第一种ACH大概就是国内银证互转，也注明收款行必须时美国境内的银行，这个不能用；支票的话应该也不好弄，所以要用香港一卡通收款还是得用汇款的方式，这里选择之后会提示我们首先要填写<a href="https://d4l0yihtmj3iw.cloudfront.net/forms/zh-cn/wire_fund_authorization_iwre.pdf">国际汇出款授权表格</a>，然后传真到+1-718-961-3919，或者扫描后通过email发送至<a href="mailto:&#99;&#97;&#115;&#x68;&#105;&#x65;&#x72;&#64;&#102;&#x69;&#x72;&#115;&#x74;&#x72;&#97;&#x64;&#x65;&#x2e;&#x63;&#x6f;&#x6d;">&#99;&#97;&#115;&#x68;&#105;&#x65;&#x72;&#64;&#102;&#x69;&#x72;&#115;&#x74;&#x72;&#97;&#x64;&#x65;&#x2e;&#x63;&#x6f;&#x6d;</a>。之前本来以为用电子签名是可以的，但是寄过去之后对方表示必须是手写签名，所以只能手签之后扫描，填表可以直接在pdf上用电脑填。</p><p><img src="http://7xi8sr.com1.z0.glb.clouddn.com/huikuandan.jpg" alt="国际会出款授权表格"></p><p>填表的话除了自己在第一理财的账户信息，还有香港招行的汇款信息，第一栏里主要是香港招行的帐号还有自己的英文名，地址就自己的地址就行了。第二栏是香港招行的银行名称和SWIFT码，还有地址:</p><pre><code>收款银行名称: CHINA MERCHANTS BANK (HONG KONG BRANCH)SWIFT码: CMBCHKHH收款银行地址: 21/F, Bank of America Tower,12 Harcourt Road, Central, Hong Kong</code></pre><p>第三栏是中介行信息，香港招行有三个中介行，选哪个貌似都一样的，我个人选择的是摩根大通:</p><pre><code>富国银行: Wells Fargo Bank N.A., New York  SWIFT码: PNBPUS3NNYC摩根大通: JP Morgan Chase Bank, New YorkSWIFT码: CHASUS33德意志信孚银行: Deutsche Bank Trust Company Americas, New YorkSWIFT码: BKTRUS33</code></pre><p>第四栏签上自己的名字和日期就OK了。</p><p>填好表，扫描完，用email发送到指定email后就可以了。如果汇款金额大于一万美元，客服会打电话给你确认。这里注意检查一下在第一理财个人设定中的电话，我之前的电话就是错的，还耽误了一下，email给我让我修改自己资料之后才接到电话，电话是国内客服打来的，是中文，所以不用担心口语问题。电话确认后，客服会告诉你当天会把钱汇出。因为我是周五汇出的，周一早上香港一卡通才提示钱已入账，不知道正常的话需要几个工作日，应该第二天就能到吧。手续费的话扣了我80刀，貌似国际汇款是50刀，另外30刀可能是汇到美国境内中介行的费用，反正够贵的。好在这两年美股虽然没咋赚，但好歹够各种手续费的……</p><p>之后就是把香港一卡通的钱转回到招行内地账户，直接通过它的货币转换，美元转人民币就可以汇入了，这里需要注意的是资金属性和交易编码，只能选前10个，其他的需要到柜台办理，这是我后来打电话给客服才知道的。可惜之前已经把美元转换成了港币，可能会损失一些汇率，不过貌似是不需要手续费的。</p><p><img src="http://7xi8sr.com1.z0.glb.clouddn.com/zhaohang.jpg" alt="香港一卡通转账"></p><p>每年个人转入的外汇不得超过5万美元，所以如果超过这个数了，要么就得过几年慢慢转回来，要么就得借亲戚朋友的身份证，汇给他们。货币转换还是很快的，基本上这边提完货币转换，那边就到我内地的一卡通账户了。</p><p>唉，不得不说和当初钱出去相比，钱回来还是蛮方便的，有张香港一卡通还是不错的，就是每月有8港币的账户管理费。</p><p>参考资料:</p><ol><li><a href="http://hk.cmbchina.com/Personal/Detail.aspx?guid=e5b0df64-976f-4555-bb57-66ad2006be98">香港招行汇入汇款</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 谈股论金 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Firstrade </tag>
            
            <tag> 美股 </tag>
            
            <tag> 香港一卡通 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不用采集卡搭建PS4直播环境&amp;CentOS 7网络设置</title>
      <link href="/2015/01/28/bu-yong-cai-ji-qia-da-jian-ps4-zhi-bo-huan-jing-centos-7-wang-luo-she-zhi/"/>
      <url>/2015/01/28/bu-yong-cai-ji-qia-da-jian-ps4-zhi-bo-huan-jing-centos-7-wang-luo-she-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>嗯，这么两个话题参杂在一起确实有点怪。最近买了台式机，为了不浪费我16G的内存，果断搞了个Linux的虚拟机作为开发机。选择系统时没有用常用的debian/ubuntu，选择了自己比较熟悉的CentOS系列，然后正好顺便试试最新的CentOS 7。然后发现坑了，7里很多系统管理规则都和6.x不一样了，特别是网络有关的部分。<br>为了实现直播写码月入百万的梦想，必须得开搞直播啊，作为一个屌丝码农，自然买不起采集卡。之前在网上看到过劫持PS4自带的twitch转播的帖子，于是果断操练一把。</p></blockquote><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>最早ps4劫持twitch流量到斗鱼其实非常简单，只需要搭建带ngx-rmtp模块的nginx，并且在路由器把live.twitch.tv解析到nginx上即可。但后来系统更新之后这个方法就不能用了，看了这两篇帖子之后也不是说的特别详细，而且比较详细的how to do还是基于windows的，对于我这种windows只用于打游戏的人来说还是linux熟悉些。目前来说，要劫持twitch流量必须对相关的ip做劫持。</p><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><h2 id="获取ip，并绑定到网卡上"><a href="#获取ip，并绑定到网卡上" class="headerlink" title="获取ip，并绑定到网卡上"></a>获取ip，并绑定到网卡上</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 得到ip列表</span><span class="token function">nslookup</span> live.twitch.tv <span class="token operator">|</span> perl -ne <span class="token string">'if(m/^Address:\s+(\d+\.\d+\.\d+\.\d+)$/) &#123; print $1, "\n" &#125;'</span> <span class="token operator">></span> ip.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后根据ip生成全部的网卡配置文件，这里用一个perl脚本来实现，我在虚拟机里的网卡是enp0s3，大家可以根据自己实际的网卡设备名来改。</p><pre class="line-numbers language-perl" data-language="perl"><code class="language-perl"><span class="token comment">#!/usr/bin/env perl</span><span class="token keyword">use</span> strict<span class="token punctuation">;</span><span class="token keyword">use</span> warnings<span class="token punctuation">;</span><span class="token keyword">my</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>defined <span class="token punctuation">(</span><span class="token keyword">my</span> <span class="token variable">$line</span> <span class="token operator">=</span> <span class="token filehandle symbol">&lt;STDIN></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    open OUT<span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">"/etc/sysconfig/network-scripts/ifcfg-enp0s3:$i"</span><span class="token punctuation">;</span>    chomp <span class="token variable">$line</span><span class="token punctuation">;</span><span class="token keyword">print</span> OUT <span class="token string">"TYPE=Ethernet\n"</span><span class="token punctuation">;</span><span class="token keyword">print</span> OUT <span class="token string">"BOOTPROTO=static\n"</span><span class="token punctuation">;</span><span class="token keyword">print</span> OUT <span class="token string">"IPV4_FAILURE_FATAL=no\n"</span><span class="token punctuation">;</span><span class="token keyword">print</span> OUT <span class="token string">"IPV6INIT=yes\n"</span><span class="token punctuation">;</span><span class="token keyword">print</span> OUT <span class="token string">"IPV6_AUTOCONF=yes\n"</span><span class="token punctuation">;</span><span class="token keyword">print</span> OUT <span class="token string">"IPV6_DEFROUTE=yes\n"</span><span class="token punctuation">;</span><span class="token keyword">print</span> OUT <span class="token string">"IPV6_PEERDNS=yes\n"</span><span class="token punctuation">;</span><span class="token keyword">print</span> OUT <span class="token string">"IPV6_PEERROUTES=yes\n"</span><span class="token punctuation">;</span><span class="token keyword">print</span> OUT <span class="token string">"IPV6_FAILURE_FATAL=no\n"</span><span class="token punctuation">;</span><span class="token comment"># 这里需要改的是两个设备名，改成自己实际的设备名，还有上面的网卡配置文件名</span><span class="token keyword">print</span> OUT <span class="token string">"DEVICE=enp0s3:$i\n"</span><span class="token punctuation">;</span><span class="token keyword">print</span> OUT <span class="token string">"NAME=enp0s3:$i\n"</span><span class="token punctuation">;</span><span class="token keyword">print</span> OUT <span class="token string">"ONBOOT=yes\n"</span><span class="token punctuation">;</span><span class="token keyword">print</span> OUT <span class="token string">"IPADDR=$line\n"</span><span class="token punctuation">;</span><span class="token keyword">print</span> OUT <span class="token string">"NETMASK=255.255.255.255\n"</span><span class="token punctuation">;</span><span class="token keyword">print</span> OUT <span class="token string">"DNS1=192.168.199.1\n"</span><span class="token punctuation">;</span>    close OUT<span class="token punctuation">;</span>    <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启网络之后，应该就已经用上了这几个ip了，6.x年代重启网络一般是<code>service network restart</code>，但是到了7.x年代引入了一个叫做systemctl的命令，虽然老命令也兼容，但实际执行的是<code>systemctl restart network</code>，不过我还是比较习惯用service相关的命令。之后就是开启Linux的路由功能，编辑<code>/etc/sysctl.conf</code>文件，在末尾添加：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.conf.default.rp_filter <span class="token operator">=</span> <span class="token number">1</span>kernel.sysrq <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后执行<code>sysctl -p /etc/sysctl.conf</code>应用配置，再给iptables添加转发功能，并开启80/1935端口，以便等下nginx连接。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables -A FORWARD -j ACCEPT<span class="token comment"># 改成自己的网卡名</span>iptables -t nat -A POSTROUTING -j MASQUERADE -o enp0s3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="编译安装nginx"><a href="#编译安装nginx" class="headerlink" title="编译安装nginx"></a>编译安装nginx</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://nginx.org/download/nginx-1.6.2.tar.gz<span class="token function">tar</span> zxvf nginx-1.6.2.tar.gz<span class="token function">git</span> clone https://github.com/arut/nginx-rtmp-module.git<span class="token builtin class-name">cd</span> nginx-1.6.2./configure --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/nginx-rtmp-module --with-http_ssl_module --prefix<span class="token operator">=</span>/opt/nginx<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译安装好nginx之后开始配置nginx，打开/opt/nginx/conf/nginx.conf，首先在最外层(和http同级)添加</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rtmp <span class="token punctuation">&#123;</span>    server <span class="token punctuation">&#123;</span>        listen <span class="token number">1935</span><span class="token punctuation">;</span>        chunk_size <span class="token number">131072</span><span class="token punctuation">;</span>        max_message 256M<span class="token punctuation">;</span>        application app <span class="token punctuation">&#123;</span>            live on<span class="token punctuation">;</span>            record off<span class="token punctuation">;</span>            meta copy<span class="token punctuation">;</span>            <span class="token comment"># 下面改成自己的stream key，除了斗鱼其他直播网站也一样能用，改下url就行</span>            push rtmp://send1.douyutv.com/live/<span class="token punctuation">[</span>stream key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后为了看到统计状态，还要配置一下rtmp模块的统计，先将<code>/path/to/nginx-rtmp-module/stat.xsl</code>拷贝到<code>/opt/nginx/html/</code>下，然后在http下的server下添加两个handler:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#This URL provides RTMP statistics in XML</span>location /stat <span class="token punctuation">&#123;</span>    rtmp_stat all<span class="token punctuation">;</span>    <span class="token comment"># Use this stylesheet to view XML as web page</span>    <span class="token comment"># in browser</span>    rtmp_stat_stylesheet stat.xsl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>location /stat.xsl <span class="token punctuation">&#123;</span>    <span class="token comment"># XML stylesheet to view RTMP stats.</span>    <span class="token comment"># Copy stat.xsl wherever you want</span>    <span class="token comment"># and put the full directory path here</span>    root /opt/nginx/html/<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动nginx如果1935端口已经监听，那么服务端的工作就已经配置好了</p><h2 id="配置ps4"><a href="#配置ps4" class="headerlink" title="配置ps4"></a>配置ps4</h2><p>配置一下ps4的网络，网关设置为linux机器的ip地址，然后dns设置一个设置路由器的ip就行了。接下来打开游戏，按下share键，选择twitch分享就可以将画面分享到斗鱼上了。试了一下，我这里上传应该是1m的，画质选中就不卡，但就是好模糊，还是采集卡靠谱一些，不过用这个方法省钱啊！</p><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>CentOS 7的系统管理改了好多，虽然老的配置方式还是兼容的，但还是感觉有点陌生。不过好处是gcc是4.8.2的，kernel是3.10.0的，相对公司用的6.4还是更新不少。不过安装界面也改了不少，选minimal安装好像不能自定义需要哪些包了，但也还能接受吧。</p><h1 id="广告"><a href="#广告" class="headerlink" title="广告"></a>广告</h1><p>之前斗鱼直播室n久没播被关了，然后客服打不开，因为绑定过身份证又不能注册新的，就死锁了。后来某Jim勾搭上了一个斗鱼的rd，然后终于把房间解锁了！<a href="http://www.douyutv.com/ushuaia">http://www.douyutv.com/ushuaia</a>，不定期播出，玩一些主机游戏或者用pc玩一些单机游戏。最近可能会播cod 11日常被吊打、风暴英雄打电脑做金币赚日常(对，你没看错)、恶灵附身、龙腾传说3审判等等，当然最重要的是偶尔插播写代码，不过主播是哑巴，从来不会说话的！</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li><a href="http://bbs.a9vg.com/thread-4160686-1-1.html">无需HDMI采集卡，PS4直播功能破解，支持录制</a></li><li><a href="http://bbs.a9vg.com/forum.php?mod=viewthread&tid=4199530">手把手教你搭建Windows环境PS4直播服务器</a></li><li><a href="https://github.com/arut/nginx-rtmp-module">nginx-rtmp-module</a></li><li><a href="http://www.douyutv.com/ushuaia">斗鱼直播室</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ps4 </tag>
            
            <tag> 直播 </tag>
            
            <tag> CentOS 7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记——基础</title>
      <link href="/2014/12/12/golang-xue-xi-bi-ji-ji-chu/"/>
      <url>/2014/12/12/golang-xue-xi-bi-ji-ji-chu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>平时工作语言是c/c++，做后端开发很强大，但是毕竟写起来还是麻烦了一些，缺乏现代语言特性。所以一直在找一门辅助语言，它有便捷的语法，可以随手写一些小工具甚至小服务啥的。之前考虑过node.js，写c bundle感觉还可以，但是v8的用法感觉写起来有点麻烦，而且最重要的是node里操作二进制数据太麻烦，日常工作中一半的工作都是和二进制打交道，所以node并不太合适。并且js的语法也相对比较随意，写起来不那么规范。正好最近感觉自己好久没有学习新语言了，于是打算研究研究golang，作为面向concurrency的语言之一，Scala/Erlang是跑在虚拟机上的语言，在现在的生产环境中用起来有点维护麻烦，同时这种fp的语言对我来说学习成本也比较高，所以看起来还是go更合适一些。</p></blockquote><h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行<code>$ go run hello.go</code>，编译<code>$ go build -o hello hello.go</code></p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="bool"><a href="#bool" class="headerlink" title="bool"></a><code>bool</code></h3><p>布尔类型，<code>true</code>和<code>false</code>，没啥好说的</p><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">uint8</span>       <span class="token comment">//the set of all unsigned  8-bit integers (0 to 255)</span><span class="token builtin">uint16</span>      <span class="token comment">//the set of all unsigned 16-bit integers (0 to 65535)</span><span class="token builtin">uint32</span>      <span class="token comment">//the set of all unsigned 32-bit integers (0 to 4294967295)</span><span class="token builtin">uint64</span>      <span class="token comment">//the set of all unsigned 64-bit integers (0 to 18446744073709551615)</span><span class="token builtin">int8</span>        <span class="token comment">//the set of all signed  8-bit integers (-128 to 127)</span><span class="token builtin">int16</span>       <span class="token comment">//the set of all signed 16-bit integers (-32768 to 32767)</span><span class="token builtin">int32</span>       <span class="token comment">//the set of all signed 32-bit integers (-2147483648 to 2147483647)</span><span class="token builtin">int64</span>       <span class="token comment">//the set of all signed 64-bit integers (-9223372036854775808 to 9223372036854775807)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">float32</span>     <span class="token comment">//the set of all IEEE-754 32-bit floating-point numbers</span><span class="token builtin">float64</span>     <span class="token comment">//the set of all IEEE-754 64-bit floating-point numbers</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">complex64</span>   <span class="token comment">//the set of all complex numbers with float32 real and imaginary parts</span><span class="token builtin">complex128</span>  <span class="token comment">//the set of all complex numbers with float64 real and imaginary parts</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="特殊类型"><a href="#特殊类型" class="headerlink" title="特殊类型"></a>特殊类型</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">byte</span>        <span class="token comment">//alias for uint8</span><span class="token builtin">rune</span>        <span class="token comment">//alias for int32</span><span class="token builtin">uint</span>     <span class="token comment">//either 32 or 64 bits</span><span class="token builtin">int</span>      <span class="token comment">//same size as uint</span><span class="token builtin">uintptr</span>  <span class="token comment">//an unsigned integer large enough to store the uninterpreted bits of a pointer value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记不清之前在哪个文档上看的，说<code>int</code>无论在32位还是64位机器上，都是32位的，但看<a href="http://golang.org/ref/spec" title="The Go Programming Language Specification(FuckGFW)">Language Specification</a>上还是说int的长度和机器的架构有关系，可能之前版本的go设计是统一32位，但由于某些原因，最新版本还是将int的设计为架构相关，这点和c不太一样。不过明确声明长度，用<code>uint64</code>之类的还是一个很好的习惯，循环之类的用用<code>int</code>还行。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>go的字符串和c有点像，但go的字符串是不可改变的，实际上c的静态字符串也是这样的，可以通过下标来取得每个字节的内容，和c是一模一样的，<code>len</code>函数用来求长度，类似<code>strlen</code>。不可以对<code>s[i]</code>取址，即<code>&amp;s[i]</code>是错误的。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>go的数组有点像python，提供各种切片操作。这点要比c灵活得多。go的数组是值，所以赋值时会复制每个元素。go的数组长度是它的类型的一部分，也就是说<code>[5]int</code>和<code>[10]int</code>是两种类型。如果go的数组要实现传址，必须要显示的求址才行，不过go的语法不推荐这么使用数组，go的语法习惯是使用切片(slice)，感觉切片叫着别扭，以后就统一叫slice好了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//类似int arr[5];</span><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token comment">//初始化了int arr[] = &#123;1, 2, 3, 4, 5&#125;;</span>b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>slice可以看做是一个特殊的数组，其实和c里面的数组非常像。slice作为参数时是传址的，也就是可以在函数内部修改参数中的slice并且外部看得到变化。slice可以做一些类似python中的下标范围操作。slice有两个重要的内建函数，<code>len</code>是返回当前数据的长度，而<code>cap</code>是返回最大容量。特殊的<code>len(nil)=0</code>, <code>cap(nil)=0</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//新建一个len=5, cap=5的slice</span>sli <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">//新建一个len=0, cap=10的slice</span>sli2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>sli2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span> <span class="token comment">//len(sli2)=5, cap(sli2)=10</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sli2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//&#123;1, 2, 3&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sli2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//&#123;1, 2, 3&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sli2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//&#123;3, 4, 5&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>伟大领袖xxx曾经说过，有哈希的语言都是好语言，嗯，没错，这是一个很常用的数据结构，go这种现代语言当然是内置的。hash和数组/slice很像，就像一个key(下标)不一定是整数的数组。如果尝试取一个hash中没有的值，会返回值类型的零值。任何定义了相等操作的类型都可以作为key的类型。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">mp <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token string">"hello"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"world"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//这里的,是允许的</span><span class="token punctuation">&#125;</span><span class="token comment">//使用map的值很简单</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> v<span class="token punctuation">,</span> exists <span class="token operator">:=</span> mp<span class="token punctuation">[</span><span class="token string">"no"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> exists <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"exists %d\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"not exists %d\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//not exists 0</span><span class="token punctuation">&#125;</span><span class="token comment">//删除一个k-v</span><span class="token function">delete</span><span class="token punctuation">(</span>mp<span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>go没有java/c++里类的概念，但是它有结构体，和c里的结构体类似。结构体中首字母大写的字段可以在外部被访问，小写开头的变量不能被外部访问。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义一个结构体</span><span class="token keyword">type</span> Intint <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    A <span class="token builtin">uint64</span>    B <span class="token builtin">uint64</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化赋值</span>ii <span class="token operator">:=</span> Intint<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token comment">//指定某个成员</span>ii2 <span class="token operator">:=</span> Intint<span class="token punctuation">&#123;</span>A<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">//B=0</span><span class="token comment">//全自动初始化为零值</span>ii3 <span class="token operator">:=</span> Intint<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//16</span><span class="token comment">//声明并初始化赋值一个结构体指针</span>ip <span class="token operator">:=</span> <span class="token operator">&amp;</span>Intint<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token comment">//使用new创建指针</span>ip2 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Intint<span class="token punctuation">)</span><span class="token comment">//type = *Intint</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="“枚举类型”"><a href="#“枚举类型”" class="headerlink" title="“枚举类型”"></a>“枚举类型”</h2><p>go不存在真正意义上的枚举类型，但可以通过自定义类型常量来实现，例如以下例子:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//自定义一个LogLevel类型作为enum的类型</span><span class="token keyword">type</span> LogLevel <span class="token builtin">int</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    <span class="token comment">//iota表示枚举初始值，这里是整型，所以是0, 这里声明成LogLevel型，可以实现类型约束</span>    LOG_L_DEBUG LogLevel <span class="token operator">=</span> <span class="token boolean">iota</span>    LOG_L_NOTICE    LOG_L_WARNING    LOG_L_FATAL<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h1><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>go使用package的概念来管理模块，可以有目录层次结构，导入使用<code>import</code>关键字，如果涉及到目录层次结构，一般程序里可以直接用最后一个元素来指代。在源文件的开头以<code>package</code>关键字声明这个程序属于哪个包。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//属于test包</span><span class="token keyword">package</span> test<span class="token comment">//引入俩包，第二个用rand.Xxxx来使用</span><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math/rand"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="包内全局变量，初始化函数"><a href="#包内全局变量，初始化函数" class="headerlink" title="包内全局变量，初始化函数"></a>包内全局变量，初始化函数</h3><p>当需要定义一些复杂的全局变量时，可以直接在函数体外定义，赋值可以是一些运行时确定的表达式，包内可以有多个名为init的函数，这个函数在初始化全局变量后会执行。每个包的init函数只执行一次，并且全局变量也指初始化赋值1次。例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//./util/a.go</span><span class="token keyword">package</span> util<span class="token keyword">import</span> <span class="token string">"./logger"</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    A <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">What</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> logger<span class="token punctuation">.</span><span class="token function">What</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//./util/logger/b.go</span><span class="token keyword">package</span> logger                                                                                                                                                                    <span class="token keyword">import</span> <span class="token string">"fmt"</span>                                                                                                                                                                      <span class="token keyword">var</span> <span class="token punctuation">(</span>                                                                                        a <span class="token operator">=</span> <span class="token number">0</span>                                                                                <span class="token punctuation">)</span>                                                                                                                                                                                 <span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                                                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"init has been invoked."</span><span class="token punctuation">)</span>                                                    a<span class="token operator">++</span>                                                                                  <span class="token punctuation">&#125;</span>                                                                                                                                                                                 <span class="token keyword">func</span> <span class="token function">What</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>                                                                            <span class="token keyword">return</span> a                                                                             <span class="token punctuation">&#125;</span>                                                                                                                                                                                 <span class="token keyword">func</span> <span class="token function">SetWhat</span><span class="token punctuation">(</span>v <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                                        a <span class="token operator">=</span> v                                                                                <span class="token punctuation">&#125;</span><span class="token comment">//./pkg.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"./util"</span>    <span class="token string">"./util/logger"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">What</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    logger<span class="token punctuation">.</span><span class="token function">SetWhat</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">What</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>util<span class="token punctuation">.</span><span class="token function">What</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//go run pkg.go</span>init has been invoked<span class="token punctuation">.</span><span class="token number">1</span><span class="token number">1000</span><span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>golang是一门静态类型语言，支持类型推导，声明变量赋值可以采用平行赋值，比较方便。常量因为是编译时必须确定值，所以只能是基本数值类型或者字符串。比如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> test <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token comment">// 类型推到之一</span><span class="token keyword">var</span> needType <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment">// 类型推到之二,等价于var msg string = "hello world!"</span>msg <span class="token operator">:=</span> <span class="token string">"hello world!"</span><span class="token comment">//常量声明</span><span class="token keyword">const</span> pi float <span class="token operator">=</span> <span class="token number">3.1415926</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>go对声明未赋值的变量统一初始化为其零值，如整数为0，字符串为空串””等等。</p><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>go的if和c很像，就是没有那个小括号，并且强制要求<code>&#123;</code>必须在上一行的末尾，而不是独占一行。嗯，对于这个用法我很习惯啊，也终于结束了c/c++中<code>&#123;</code>到底在哪的争论。不过不写()还是有些不习惯的。因为go的switch非常强大，所以如果if的分支比较多时，推荐使用switch代替。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token punctuation">&#123;</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//也可以先赋值在判断条件</span><span class="token keyword">if</span> f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//多分支</span><span class="token keyword">if</span> a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>    <span class="token function">doSth1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>    <span class="token function">doSth2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">doSth3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>go的switch要比c强大一些，除了枚举数值之外，还可以加入一些条件判断，取代if-else-if-else的结构。与c不同的是没有fallthrough，多值的情况用<code>,</code>分隔即可，也可以通过<code>fallthrough</code>关键字强制向下执行。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">switch</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> a<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>    <span class="token function">do1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">case</span> a<span class="token operator">>=</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">:</span>    <span class="token function">do2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">case</span> a<span class="token operator">>=</span><span class="token number">100</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">:</span>    <span class="token function">do3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">do4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="type-switch"><a href="#type-switch" class="headerlink" title="type switch"></a>type switch</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> t <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>t <span class="token operator">=</span> <span class="token function">functionOfSomeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">switch</span> t <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">default</span><span class="token punctuation">:</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"unexpected type %T"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>       <span class="token comment">// %T prints whatever type t has</span><span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"boolean %t\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>             <span class="token comment">// t has type bool</span><span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"integer %d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>             <span class="token comment">// t has type int</span><span class="token keyword">case</span> <span class="token operator">*</span><span class="token builtin">bool</span><span class="token punctuation">:</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"pointer to boolean %t\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>t<span class="token punctuation">)</span> <span class="token comment">// t has type *bool</span><span class="token keyword">case</span> <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">:</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"pointer to integer %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>t<span class="token punctuation">)</span> <span class="token comment">// t has type *int</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>go只有for一个循环关键字，while的功能也被for取代，用法也比c强大一些，还比较简洁。for-range操作时，一个基本单位是<code>rune</code>，如果是一个中文字符串，那么每次迭代都是其unicode编码。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//最常见的</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    <span class="token function">do</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//我是while</span>i <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> i<span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">&#123;</span>    <span class="token function">do</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token comment">//我是死循环</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>    <span class="token function">do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//foreach</span>arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d=>%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//1=>1\n2=>2\n3=>3\n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>和各种函数式编程语言一样，go也是first-class function，函数可以当做一个值来传递，也就有了各种匿名函数的用法。同时，自然也是支持闭包的。与c不同的是，go的函数可以返回多个值，这个用法在go里应用非常广泛，标准库中很多函数都是以错误作为第二个返回值返回的。另外go也支持命名返回值，也就是给出返回值的变量名，然后函数里可以直接赋值，最后直接return即可。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//一个2个参数2个返回值的函数</span><span class="token keyword">func</span> <span class="token function">some</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">,</span> a<span class="token operator">*</span>b<span class="token punctuation">&#125;</span><span class="token comment">//不定参数</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    total <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">&#123;</span>        total <span class="token operator">+=</span> num    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> total<span class="token punctuation">&#125;</span><span class="token comment">//匿名函数</span>f <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>但凡FP类的语言，都支持函数闭包。因为fp用的少，所以也不是特别清楚闭包的使用场景，大概意思就是函数实例化之后可以保存其局部变量，有点“小”对象的意思。来个斐波那契数列的例子吧。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//fibonacci是一个返回值类型为func() int的函数</span><span class="token keyword">func</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//通过闭包实现保存局部变量a,b的值</span>    a <span class="token operator">:=</span> <span class="token number">0</span>    b <span class="token operator">:=</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">:=</span> a <span class="token operator">+</span> b        a <span class="token operator">=</span> b        b <span class="token operator">=</span> sum        <span class="token keyword">return</span> a    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//函数的“实例化”</span>    f <span class="token operator">:=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>go是没有“类”的，但是你可以给任何本包内的结构体添加方法。和函数不同，方法有一个_method receiver_，也就是这个方法是属于哪个结构的。事实上除了结构体，go可以给<strong>本包</strong>内除了基本类型以外的任何类型添加方法。但需要注意，最好以指针类型作为method receiver，否则按值传递可能会起不到效果，并且造成效率降低。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//一个方法的例子</span><span class="token keyword">type</span> TwoInt <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    A <span class="token builtin">int</span>    B <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>TwoInt<span class="token punctuation">)</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> this<span class="token punctuation">.</span>A <span class="token operator">+</span> this<span class="token punctuation">.</span>B<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分配内存"><a href="#分配内存" class="headerlink" title="分配内存"></a>分配内存</h2><p>go有两种分配内存的方式，<code>new</code>和<code>make</code>。</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p><code>new(T)</code>返回一个<code>*T</code>类型的指针，同时<code>new</code>还将所有的值赋为零值。可以理解为分配了一块全为0的内存空间。这个特性比较有用，省去了c/c++自己赋零值的麻烦。当有需要初始化为非零值，也就是相当于构造函数的功能，go习惯上命名为NewT的函数。例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//一个“构造函数”的例子</span><span class="token keyword">func</span> <span class="token function">NewTwoInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>TwoInt <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>TwoInt<span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><p>go中make用于分配<code>slice</code>, <code>map</code>, <code>channel</code>，返回一个初始化(不一定是零值)的T类型的值，而<code>new</code>返回的是指针。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="http://coolshell.cn/articles/8460.html">Go 语言简介（上）— 语法</a></li><li><a href="http://coolshell.cn/articles/8489.html">Go 语言简介（下）— 特性</a></li><li><a href="http://tour.golang.org/">A Tour of Go(FuckGFW)</a></li><li><a href="https://gobyexample.com/">Go by Example</a></li><li><a href="http://golang.org/pkg/">Package Documentation(FuckGFW)</a></li><li><a href="http://golang.org/doc/effective_go.html">Effective Go(FuckGFW)</a></li><li><a href="http://pan.baidu.com/s/1bnAOroV">学习Go语言</a></li><li><a href="http://golang.org/ref/spec">The Go Programming Language Specification(FuckGFW)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> 语法 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给hexo/pacman增加“最新评论”的widget</title>
      <link href="/2014/12/03/gei-hexo-pacman-zeng-jia-zui-xin-ping-lun-de-widget/"/>
      <url>/2014/12/03/gei-hexo-pacman-zeng-jia-zui-xin-ping-lun-de-widget/</url>
      
        <content type="html"><![CDATA[<p>自从不买vps以来，已经很久没写过blog了，之前用bae还得备案啥的，看起来还是在国外托管比较方便。最近发现github pages速度还挺不错的，于是研究了一下用hexo搭还挺方便的，pacman主题用着也比较方便，不过还有一些blog的常见功能不支持，比如最新评论。pacman用的是多说的评论系统，多说有最新评论的嵌入代码。当然直接嵌入肯定是不行的，和整体风格不统一看着不好看，那么就搞个类似友情链接、目录之类的widget好了。</p><p>研究了一下links.ejs以及archives.ejs发现写一个widget其实不难，参考多说的嵌入代码，在新建一个<code>themes/pacman/layout/_widget/comment.ejs</code>文件，内容如下：</p><pre><code>&lt;% if (theme.duoshuo.enable &amp;&amp; theme.duoshuo.short_name.length) &#123; %&gt;&lt;div class=&quot;commentslist&quot;&gt;  &lt;p class=&quot;asidetitle&quot;&gt;&lt;%= __(&#39;comments&#39;) %&gt;&lt;/p&gt;  &lt;ul class=&quot;ds-recent-comments&quot; data-num-items=&quot;5&quot; data-show-avatars=&quot;0&quot; data-show-time=&quot;1&quot; data-show-admin=&quot;1&quot; data-excerpt-length=&quot;32&quot; data-show-title=&quot;1&quot;&gt;&lt;/ul&gt;&lt;/div&gt;&lt;!--多说js加载开始，一个页面只需要加载一次 --&gt;&lt;script type=&quot;text/javascript&quot;&gt;  var duoshuoQuery = &#123;short_name:&quot;&lt;%= theme.duoshuo.short_name %&gt;&quot;&#125;;  (function() &#123;    var ds = document.createElement(&#39;script&#39;);    ds.type = &#39;text/javascript&#39;;ds.async = true;    ds.src = &#39;http://static.duoshuo.com/embed.js&#39;;    ds.charset = &#39;UTF-8&#39;;    (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(ds);  &#125;)();&lt;/script&gt;&lt;!--多说js加载结束，一个页面只需要加载一次 --&gt;&lt;% &#125; %&gt;</code></pre><p>下面那段js是多说提供的嵌入代码，<code>&lt;ul&gt;</code>标签有一些参数可以指定评论的具体数量之类的，大致有以下可选参数</p><pre><code>//以下参数均为可选data-num-items=&quot;10&quot;     //显示最新评论的条数，最大支持200条data-show-avatars=&quot;1&quot;   //是否显示头像，1：显示，0：不显示data-show-time=&quot;1&quot;      //是否显示时间，1：显示，0：不显示data-show-title=&quot;0&quot;     //是否显示标题，1：显示，0：不显示data-show-admin=&quot;1&quot;     //是否显示管理员的评论，1：显示，0：不显示data-excerpt-length=&quot;70&quot;//最大显示评论汉字数</code></pre><p>写好了widget之后需要把它配置进去，首先先添加“最新评论”的多语言版本字符串值，即用变量<code>comments</code>表示，需要修改的相关文件为<code>themes/pacman/languages/*.yml</code>，看一下文件内容就知道怎么改了，这里不详细说了。最后还需要添加一下相关的css样式，我是以友情链接widget的css作为基准，稍加修改的，在<code>themes/pacman/source/css/_partial/aside.styl</code>文件末尾添加如下内容：</p><pre><code>//comments.commentslist  margin-top 0.5em   @media mini    width 45%     float left    margin 0 5% 0 0   @media tablet     width 100%    float none    margin 1em 0 0   ul      padding 0.5em 0    a         font-size 1em       line-height line-height      display block      padding 0      &amp;:hover        color color-theme        transition color .25s.ds-excerpt  font-size 1.1em  color color-theme.ds-recent-comments  margin-top -0.6em  margin-left 0.3em</code></pre><p>最后要做的工作就是在主题的<code>_config.yml</code>里开启comment这个widget了，这样最新评论就搞定了。hexo真是不错，做个二次开发基本照猫画虎就能搞定了。</p><p>我自己修改的pacman主题可以在这里找到: <a href="https://github.com/odinliu/pacman">pacman</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> pacman </tag>
            
            <tag> 多说评论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo/pacman的友情链接模块实现配置化</title>
      <link href="/2014/12/02/hexo-pacman-de-you-qing-lian-jie-mo-kuai-shi-xian-pei-zhi-hua/"/>
      <url>/2014/12/02/hexo-pacman-de-you-qing-lian-jie-mo-kuai-shi-xian-pei-zhi-hua/</url>
      
        <content type="html"><![CDATA[<p>为了seo外链，友情链接模块当然是必不可少的。pacman这个主题也是支持友情链接模块的，于是看了一下它的配置(<code>themes/pacman/_config.yml</code>)，发现相关配置有这么一段描述：</p><blockquote><p>modify links in <code>/layout/_widget/links.ejs</code>.</p></blockquote><p>然后打开了这个文件后发现内容是：</p><pre><code>&lt;div class=&quot;linkslist&quot;&gt;  &lt;p class=&quot;asidetitle&quot;&gt;&lt;%= __(&#39;links&#39;) %&gt;&lt;/p&gt;    &lt;ul&gt;      &lt;li&gt;&lt;a href=&quot;http://jimliu.net&quot; target=&quot;_blank&quot; title=&quot;Again, Jim Liu&#39;s Blog&quot;&gt;Jim Liu&#39;s Blog&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;&lt;a href=&quot;http://hexo.io&quot; target=&quot;_blank&quot; title=&quot;Hexo&quot;&gt;Hexo&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;</code></pre><p>我擦，我的狗眼，这也太麻烦了吧，要自己手写html，每次加新链接时简直蛋疼啊。虽然不是很懂<a href="http://www.embeddedjs.com/" title="EJS">EJS</a>，不过凭借着大学时代多年的Java Web开发经验，还是看得懂这个模板的，研究了一下同目录的<code>categories.ejs</code>，发现要想实现配置化似乎并不难。全局配置<code>_config.yml</code>会对象化成模板里的<code>config</code>对象，于是查了一下<a href="http://www.cnblogs.com/c9com/archive/2013/01/05/2845539.html" title="yaml简介以及在python上的应用">YAML</a>的数组写法，果断在全局的<code>_config.yml</code>后面添加<code>links</code>配置：</p><pre><code># for linkslinks:- url: http://jimliu.net  name: Jim Liu&#39;s Blog  title: Again, Jim Liu&#39;s Blog- url: http://github.com  name: github  title: 本博客托管在github pages- url: http://hexo.io  name: hexo  title: 本博客使用hexo搭建</code></pre><p>然后修改<code>links.ejs</code>文件内容如下即可：</p><pre><code>&lt;% if (config.links &amp;&amp; config.links.length) &#123; %&gt;&lt;div class=&quot;linkslist&quot;&gt;  &lt;p class=&quot;asidetitle&quot;&gt;&lt;%= __(&#39;links&#39;) %&gt;&lt;/p&gt;    &lt;ul&gt;    &lt;% config.links.forEach(function(item) &#123; %&gt;      &lt;li&gt;&lt;a href=&quot;&lt;%= item.url %&gt;&quot; target=&quot;_blank&quot; title=&quot;&lt;%= item.title %&gt;&quot;&gt;&lt;%= item.name %&gt;&lt;/a&gt;&lt;/li&gt;    &lt;% &#125;); %&gt;    &lt;/ul&gt;&lt;/div&gt;&lt;% &#125; %&gt;</code></pre><p>在遍历数组元素时，<code>categories.ejs</code>使用的是each方法，但我照抄之后发现报错，莫非分类不是对象化成数组了？Anyway, 改成JS的forEach之后就可以用了。</p><p>说句闲话，当年把玩<code>node.js</code>时，选择的模板引擎是<a href="http://jade-lang.com/" title="jade">jade</a>，主要就是看<a href="http://www.embeddedjs.com/" title="EJS">EJS</a>的写法和JSP实在太像了，看着蛋疼……</p>]]></content>
      
      
      <categories>
          
          <category> 垃圾箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> pacman </tag>
            
            <tag> ejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS在大硬盘机器上安装遇到的问题</title>
      <link href="/2014/12/01/centos-zai-da-ying-pan-ji-qi-shang-an-zhuang-yu-dao-de-wen-ti/"/>
      <url>/2014/12/01/centos-zai-da-ying-pan-ji-qi-shang-an-zhuang-yu-dao-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>上周四去客户那里安装，装系统时遇到一个问题。那台机器是8块硬盘做了一个raid 5，大概5T左右的可用空间，但是在装CentOS 6.4时只能分配到2T。一开始没在意，打算装完系统再用parted把剩下的分一个数据分区。但装完系统才发现parted也只能分配前2T，上网搜了一下发现是因为msdos格式的文件分配表只能支持2T的硬盘，必须改成gpt格式才行。用parted修改分区格式<code># /usr/sbin/parted -s /dev/sda mklabel gpt</code>为GPT，然后提示</p><blockquote><p>警告: The existing disk label on /dev/sda will be destroyed and all data on this disk will be lost.</p></blockquote><p>没办法，看来只能重装系统了。重装系统后，问题来了，竟然提示硬盘上没有操作系统！又在网上搜了一番，发现要想在GPT格式的硬盘上安装系统，必须得新BIOS支持UEFI才行。打开BIOS研究了半天，都没找到相关选项，后来打电话给HP询问，确实是不支持，只有比较新的机型才支持。没办法，和对方运维人员商讨解决方案，只用2T是肯定没办法接受的，只能退而求其次，用6块硬盘做一个raid 5，采用GPT格式，用做数据盘。然后2块硬盘做一个raid 1+0，大约900G，采用msdos的MBR。由于对方坚持硬盘不做raid数据安全没法保障，但实际上我们自己的服务器都没做raid也没发生过数据损坏的问题。重新做了raid之后重装系统，仔细的看了一下分区之后的提示，发现提示</p><blockquote><p>you are using a gpt bootdisk on a non-EFI system</p></blockquote><p>我擦，明明已经用msdos的mbr装系统了啊，为何还提示这个？难道是因为先做了那个raid 5的原因？因为先做了那个，所以CentOS识别硬盘时将GPT的硬盘识别成了<code>/dev/sda</code>而系统盘识别成了<code>/dev/sdb</code>，而BIOS默认选sda的MBR导致仍然无法启动系统。重做raid，这回先做小raid之后果然这个问题就没有了。唉，看来这个东西还真不智能，以后必须注意<code>/dev/sda</code>做系统盘，并且小于2T，并且采用msdos格式。目前来看，似乎大部分服务器的BIOS都不支持UEFI。</p><p>那么说了这么多，到底<a href="http://baike.baidu.com/view/10461841.htm?fr=aladdin" title="全局唯一标识分区表(GPT)">GPT</a>是啥呢？</p><blockquote><p>全局唯一标识分区表（GUID Partition Table，缩写：GPT）是一个实体磁盘的分区表的结构布局的标准。它是可扩展固件接口（EFI）标准（被Intel用于替代个人计算机的BIOS）的一部分，被用于替代BIOS系统中的一32bits来存储逻辑块地址和大小信息的主引导记录（MBR）分区表。<br>GPT分配64bits给逻辑块地址，因而使得最大分区大小在2-1个扇区成为了可能。对于每个扇区大小为512字节的磁盘，那意味着可以有9.4ZB(9.4 x 10字节)或8ZiB-512字节。</p></blockquote><p>所以，为了以后维护方便，操作系统所在物理硬盘(包括raid卡虚拟出来的硬盘)尽量小于2T，并且为第一个硬盘，采用msdos格式的<a href="http://baike.baidu.com/subview/9485/9079238.htm?fr=aladdin" title="主引导记录(MBR)">MBR</a>，这样就不会出问题了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统运维 </tag>
            
            <tag> 硬盘分区 </tag>
            
            <tag> CentOS </tag>
            
            <tag> GPT </tag>
            
            <tag> MBR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[旧文搬迁]有多少产品值得等待——悼Google Reader君</title>
      <link href="/2013/03/15/jiu-wen-ban-qian-you-duo-shao-chan-pin-zhi-de-deng-dai-dao-google-reader-jun/"/>
      <url>/2013/03/15/jiu-wen-ban-qian-you-duo-shao-chan-pin-zhi-de-deng-dai-dao-google-reader-jun/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感谢<a href="http://www.udpwork.com/item/6379.html">IT牛人博客聚合</a>上还能找到我之前博客的一些内容，因为之前主机没续费等各种原因，也懒得翻之前的备份文档了，就把那上面的文章直接拷过来整理一下好了，只搬迁一些还有意义的内容好了，其他的就让它随风而去吧。</p></blockquote><p>就在昨天，Google宣布Reader服务将于2013年7月1日正式关闭。一时间，无数忠实的Reader用户唏嘘不已。也有不少人感慨，RSS将死。</p><p>Since November 30, 2009 you have read a total of 248,588 items. 作为我日常生活的一部分，Reader留给了我这样一串数字，3年多的时间里，阅读了将近25万篇文章。从大学时代开始，Reader就是我了解互联网、关注技术牛人博客的窗口，直到现在，我还保持着每天看Reader订阅的习惯，尽管随着信息的爆发，已经从原来的每篇必读变成如今的选读，需要精读的，使用Read It Later保存，留着慢慢看。</p><p>RSS是Web 2.0时代的标志之一，“可订阅”也让信息流从人找信息变成了信息找人。但信息的爆发，也让Reader上的未读数成了我每天的负担。于是，很多更加“聪明”的阅读方式诞生了。而iPad这种大屏幕手持设备的诞生，使得阅读体验提升到了和阅读内容同等地位，也诞生了一批类似Flipboard这种强调阅读体验的应用。时代在变化，可是Reader除了UI改了一次版之外，似乎还停留在传统模式。即便是Reader忠实用户的我，每天使用Reader的时间也在减少。</p><p>首先，工作之后时间比较碎片化，很难再抽出大量时间去阅读互联网信息。而且随着各种“微阅读”渠道的丰富，在碎片时间内，我也更多的选择微博分享和微信公众号的信息。这类信息有其他人人工筛选，总要比我自己从Reader海量的文章里筛要好得多。</p><p>其次，随着兴趣的变化，订阅的内容也有很多渐渐的不感兴趣了，但又不想退订，毕竟Reader存在的意义已经是大而全了。其实市场上也出现了一些主打个性化阅读的产品，如国外涉足比较早的Zite(可以看做个性化版本的Flipboard)，以及推荐系统领域大牛谷文栋的指阅。但个人用这类app的感受就是，怕错过任何重要的内容，毕竟算法再靠谱也没有自己看一遍靠谱。插句题外话，我本科的毕业设计就是一款个性化阅读app，目标是打造阅读领域的豆瓣电台，根据我的口味来帮我筛选出我感兴趣的文章。</p><p>话说回来，即便Reader再落后于时代，抛开产品价值不谈，真的就没有用户价值么？不见得，从今天的timeline来看，周围的人还是对Reader的即将离去而唏嘘不已。这其实也是今天问题的那句话，到底有多少产品值得等待。自己也经历过这种前途不明的产品，很多时候都是犹豫在砍或不砍之间。坚持，可能早晚会走到死胡同，不坚持又始终有各种各样放不下的理由。也许时间会证明Larry Page这种大刀阔斧的改革才是对的，但不管怎么样，也无法弥补那些忠实用户以及Reader的RD、PM们心中的痛。</p>]]></content>
      
      
      <categories>
          
          <category> 产品乱弹 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旧文搬迁 </tag>
            
            <tag> Google Reader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[旧文搬迁]闲话移动app中c/s通信的身份验证——原理篇</title>
      <link href="/2011/11/25/jiu-wen-ban-qian-xian-hua-yi-dong-app-zhong-c-s-tong-xin-de-shen-fen-yan-zheng-yuan-li-pian/"/>
      <url>/2011/11/25/jiu-wen-ban-qian-xian-hua-yi-dong-app-zhong-c-s-tong-xin-de-shen-fen-yan-zheng-yuan-li-pian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感谢<a href="http://www.udpwork.com/item/6379.html">IT牛人博客聚合</a>上还能找到我之前博客的一些内容，因为之前主机没续费等各种原因，也懒得翻之前的备份文档了，就把那上面的文章直接拷过来整理一下好了，只搬迁一些还有意义的内容好了，其他的就让它随风而去吧。</p></blockquote><p>话说月初的时候曾想玩玩移动app开发，目前app开发比较流行c/s架构，不，用时髦点的话说是云端架构。对于网络应用来说，第一个遇到的问题就是用户身份验证。之前基本上就没做过c/s架构的东西（和b/s对应的c/s），所以在这方面算是空白。后来面试过两个Android开发者，把这个问题当做一个系统设计的题目来问，也没有得到更多的想法。</p><p>当年做b/s时，用户身份验证这种事靠的是cookie&amp;session，即浏览器发送请求时携带写入cookie的session_id，服务端通过session_id可以得到用户的一些信息。但session的局限性在于服务器必须维持这个状态。除此之外还有纯cookie，就是把需要维持key-value对写入浏览器的cookie里，为了安全还可以加个密。</p><p>在研究了新浪微博api的验证方式后，发现除了oauth外还有http basic auth这种方式。前者不多说，基本上用开放api开发应用都会用到。后者是通过将用户名和base64后的密码通过http headers发送给服务器进行验证的一种方式，缺点很明显，每次都得发送密码，尽管有加密，但还是有密码泄露的风险。</p><p>面试一个做过android上c/s app开发的同学时，他说他们app用的方法类似于以前open api的认证方式，就是每次请求中携带一个用作身份标识的token，服务器根据这个token来判断是谁发来的消息。这种认证方式的好处是不需要每次都发密码，但缺点同样明显，就是一旦token被截获，那么就可以随意向服务器发送请求了。</p><p>根据oauth的原理，以及脑海中仅存的上过几节的《信息安全》基础知识（这时候真恨大学时没怎么上过信息安全这门课），大概研究出了一种方案。实际上就是利用hmac这种加密算法，客户端用密钥对请求消息就行签名，然后将签名和请求消息一起发送给服务器，服务器继续利用密钥对请求消息签名，同时判断是否和客户端发送的签名结果一致。由于密钥并不随着网络交互进行发送，因此可以认为这种验证机制是安全的。</p><p>以微博客户端为例，用户在发微博时，服务器必须确认该客户端是这个用户，才能给这个用户发微博。不局限于http协议通信，假设客户端服务器通过普通tcp socket通信，消息为json。</p><p>当用户注册时，生成一对<code>(user_token, user_secret)</code>，其中user_token用于标识用户，而user_secret为密钥之一，随着密码的改变而改变。当用户登陆时，生成一对<code>(login_token, login_secret)</code>，这对的生命周期和登陆状态保存时间等同。比如客户端向服务器发送请求为<code>&#123;&quot;user_token&quot;:&quot;xxxx&quot;,&quot;login_token&quot;:&quot;yyyy&quot;,&quot;action&quot;:&quot;send&quot;,&quot;message&quot;:&quot;tweet a twitter&quot;&#125;</code>，因为对象的属性可以认为有无序性，因此需要将key按字典序排列，得到一个字符串进行签名，即对字符串<code>action=send&amp;login_token=yyyy&amp;message=tweet a twitter&amp;user_token=xxxx</code>进行签名，oauth中还需要对其进行urlencode，使用的密钥为<code>user_secret&amp;login_secret</code>，假设签名为abcdefg，同时客户端需要将token发送给服务器，以便服务器确定用哪个密钥进行签名，即最终发送的json消息为<code>&#123;&quot;user_token&quot;:&quot;xxxx&quot;,&quot;login_token&quot;:&quot;yyyy&quot;,&quot;action&quot;:&quot;send&quot;,&quot;message&quot;:&quot;tweet a twitter&quot;,&quot;signature&quot;:&quot;abcdefg&quot;&#125;</code>。服务器收到请求消息后，即可以通过token拿到密钥，并对除signature以外的部分进行签名验证是否和signature相同，从而确认这个消息是否是由合法的用户发出的。</p><p>当然，这只是自己根据oauth衍生出来的想法，不知道真正的移动应用c/s验证是怎么搞的。以前在淘宝实习时，曾经听过一堂web安全方面的分享，也提到过所谓的cookie双token验证，不知道原理和这个是不是类似。还有几个问题没有想明白：</p><ol><li><p>从安全的角度来说，虽然发送正常请求时，光有明文和密文没办法得到密钥，但登陆的时候总是要由服务器将密钥发送给客户端的，这个时候还是容易泄密。不过最终hmac签名的密钥可以再加上一段服务器和客户端约定好的字符串。但如果客户端被反编译，这段字符串仍然可以被找到。那么这段字符串就应该也是生成的，比如客户端的请求消息里加上timestamp，服务端用timestamp+user_token再签出一段字符串用作签名消息体的密钥的一部分。不过问题就是这个哈希算法应该也可以破解出来。不太明白oauth中的timestamp意义在哪？</p></li><li><p>第二个就是双token双secret到底有没有用，能否简化成只有login_token, login_secret, user_token。通过user_token和timestamp在客户端构造出一个临时的secret作为密钥的一部分，然后服务器利用相同的hash算法生成这个临时secret做签名，似乎也能保证安全。</p></li><li><p>还有就是虽然没有办法伪造消息，但如果截获这个消息，就可以无数次发这个包给服务器，这是一条有效消息。莫非timestamp的作用就是有个过期限制？</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旧文搬迁 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 身份验证 </tag>
            
            <tag> 移动app </tag>
            
            <tag> oauth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[旧文搬迁]推荐系统资料整理之二：常用相似度计算方法</title>
      <link href="/2010/12/28/jiu-wen-ban-qian-tui-jian-xi-tong-zi-liao-zheng-li-zhi-er-chang-yong-xiang-si-du-ji-suan-fang-fa/"/>
      <url>/2010/12/28/jiu-wen-ban-qian-tui-jian-xi-tong-zi-liao-zheng-li-zhi-er-chang-yong-xiang-si-du-ji-suan-fang-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感谢<a href="http://www.udpwork.com/item/6379.html">IT牛人博客聚合</a>上还能找到我之前博客的一些内容，因为之前主机没续费等各种原因，也懒得翻之前的备份文档了，就把那上面的文章直接拷过来整理一下好了，只搬迁一些还有意义的内容好了，其他的就让它随风而去吧。</p></blockquote><p>不论是推荐系统，还是搜索引擎，都经常需要比较两个项目之间的相似度。常见的思想是将项目的特征的权值表示为N维空间向量，然后利用代数方法，对两个空间向量之间的距离、夹角等进行度量，从而表示相似度。常用的相似度计算方法有如下几种：</p><h2 id="欧氏距离"><a href="#欧氏距离" class="headerlink" title="欧氏距离"></a>欧氏距离</h2><p><img src="http://blog.odichy.org/wp-content/uploads/2010/12/distance.jpg" alt="欧氏距离"><br>欧氏距离的计算中将空间向量看成是N维空间上的两个点，通过空间上两点之间的距离表示两个项目之间的联系。欧氏距离一般只用于简单的比较，并不能将值域投影到某一特定范围。</p><h2 id="余弦相似度"><a href="#余弦相似度" class="headerlink" title="余弦相似度"></a>余弦相似度</h2><p><img src="http://blog.odichy.org/wp-content/uploads/2010/12/cosine.jpg" alt="余弦相似度"><br>余弦相似度通过计算两个空间向量之间的夹角余弦来定义相似度，当用户未对该项评分时，认为该维的分量为0。余弦相似度计算时可先求出该项目的单位向量，继而只需要计算两个单位向量的内积即可得到其夹角余弦，减少计算量。</p><h2 id="皮尔森相关系数"><a href="#皮尔森相关系数" class="headerlink" title="皮尔森相关系数"></a>皮尔森相关系数</h2><p><img src="http://blog.odichy.org/wp-content/uploads/2010/12/pearson-300x40.jpg" alt="皮尔森相关系数"><br>皮尔森相关系数在打分制的体系中应用较广泛，但是只考虑两个空间向量都包含的维度进行计算，因此如果用于布尔类的兴趣体系（读过即为1，否则为0）其结果永远为0。皮尔森相关系数公式变形较多，是利用标准差的线性相关系数公式。</p><h2 id="修正余弦相似度"><a href="#修正余弦相似度" class="headerlink" title="修正余弦相似度"></a>修正余弦相似度</h2><p>在余弦相似性度量方法中没有考虑不同用户的评分尺度问题，修正的余弦相似性度量方法通过减去用户对项目的平均评分来改善上述缺陷。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旧文搬迁 </tag>
            
            <tag> 推荐系统 </tag>
            
            <tag> 余弦相似度 </tag>
            
            <tag> 欧氏距离 </tag>
            
            <tag> 皮尔森相关系数 </tag>
            
            <tag> 相似度计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[旧文搬迁]推荐系统资料整理之一：推荐方法</title>
      <link href="/2010/12/27/jiu-wen-ban-qian-tui-jian-xi-tong-zi-liao-zheng-li-zhi-yi-tui-jian-fang-fa/"/>
      <url>/2010/12/27/jiu-wen-ban-qian-tui-jian-xi-tong-zi-liao-zheng-li-zhi-yi-tui-jian-fang-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感谢<a href="http://www.udpwork.com/item/6379.html">IT牛人博客聚合</a>上还能找到我之前博客的一些内容，因为之前主机没续费等各种原因，也懒得翻之前的备份文档了，就把那上面的文章直接拷过来整理一下好了，只搬迁一些还有意义的内容好了，其他的就让它随风而去吧。</p></blockquote><h2 id="基于内容的推荐系统"><a href="#基于内容的推荐系统" class="headerlink" title="基于内容的推荐系统"></a>基于内容的推荐系统</h2><p>基于内容推荐是推荐系统中比较常见的一种做法，这种方法对于每个item基于其自身属性，抽取一些特征用来表示这个item的内容，从而推荐那些和当前item含有相同或相近特征的一些item。</p><p>这种推荐系统多用于一些资讯类的应用上，针对文章本身抽取一些tag作为该文章的关键词，继而可以通过这些tag来评价两篇文章的相似度。抽取tag经常采用的方案是基于TF-IDF得到的一系列权值较高的term，即认为：在一篇文章中，那些出现频率高的（除停用词）词，并且在其他文章中出现频率较低的词更能代表这篇文章的内容。经过TF-IDF公式计算，权重大于某一阈值的term作为该文章的tag。通常，也考虑tag的词性，一般来说名词和形容词更加适合作为tag。</p><p>这种推荐系统的优点在于易于实现，不需要用户数据因此不存在稀疏性和冷启动问题。基于item本身特征推荐，因此不存在过度推荐热门的问题。所涉及的技术都是搜索引擎中应用比较成熟的技术。</p><p>缺点在于抽取的特征既要保证准确性又要具有一定的实际意义，否则很难保证推荐结果的相关性。豆瓣网采用人工维护tag的策略，依靠用户去维护item的tag的准确性。</p><h2 id="基于关联规则的推荐系统"><a href="#基于关联规则的推荐系统" class="headerlink" title="基于关联规则的推荐系统"></a>基于关联规则的推荐系统</h2><p>基于关联规则的推荐更常见于电子商务系统中，并且也被证明行之有效。其实际的意义为购买了一些物品的用户更倾向于购买另一些物品。基于关联规则的推荐系统的首要目标是挖掘出关联规则，也就是那些同时被很多用户购买的物品集合，这些集合内的物品可以相互进行推荐。</p><p>目前关联规则挖掘算法主要从Apriori和FP-Growth两个算法发展演变而来。Apriori算法思路实现简单，通过迭代不断通过K-1元频繁项目集生成K元频繁项目集，直到不能生成为止，最终可以得到最大频繁项目集。Apriori算法存在的问题是每次迭代都要判断生成K元集合的K-1元子集是否都是频繁项目集，计算量巨大；并且Apriori算法是一个挖掘最大频繁项目集的算法，无法得到全部频繁模式集合。FP-Growth算法通过构建FP-Tree（频繁模式树），去发现频繁模式集。相比于Apriori算法，计算量较少，并且可以得出几乎所有的频繁项目集；但该算法实现起来要比Apriori复杂，并且FP-Growth需要将全部数据库事务加载到内存中，而Apriori虽然需要反复读取数据库事务，但是不需要全部载入内存。一般而言，FP-Growth要比Apriori快至少一个数量级。</p><p>关联规则挖掘中有两个主要的概念，支持度和置信度。支持度是指包含某频繁项目集的事务数和总数据库事务数的百分比。置信度指包含某频繁项目集的事务数和包含被推荐项目集的事务数的百分比。而最小支持度阈值和最小置信度阈值也是决定一个事务集合是否是频繁事务集和一个关联规则是否成立的决定因素。因此这两个阈值也决定了推荐系统的准确率和召回率。</p><p>基于关联规则的推荐系统一般转化率较高，因为当用户已经购买了频繁集合中的若干项目后，购买该频繁集合中其他项目的可能性更高。缺点在于计算量较大，但是可以离线计算，因此影响不大。同时基于关联规则的推荐系统由于采用用户数据，不可避免的存在冷启动和稀疏性问题。并且存在热门项目容易被过度推荐的问题。此外，基于item的推荐体系多采用1toN的推荐模式，因此实际的关联规则相当于从二元频繁项目集产生（即1to1的模式），1-&gt;1这种关联规则的相关性要远低于M-&gt;N这种最初关联规则的推荐形式。因此基于关联规则的推荐系统很少被应用于item的推荐体系。</p><h2 id="基于协同过滤的推荐系统"><a href="#基于协同过滤的推荐系统" class="headerlink" title="基于协同过滤的推荐系统"></a>基于协同过滤的推荐系统</h2><p>协同过滤是一种在推荐系统中广泛采用的推荐方法。这种算法基于一个假设，喜欢相同item的用户更有可能具有相同的兴趣。基于协同过滤的推荐系统一般应用于有用户评分的系统之中，通过分数去刻画用户对于item的好恶。协同过滤被视为利用集体智慧的典范，不需要对项目进行特殊处理，而是通过用户建立项目与项目之间的联系。</p><p>经过发展演变，协同过滤逐渐分化为两种类型：基于用户(User-based)的协同过滤系统和基于项目(Item-based)的协同过滤系统。</p><h3 id="User-based-协同过滤系统"><a href="#User-based-协同过滤系统" class="headerlink" title="User-based 协同过滤系统"></a>User-based 协同过滤系统</h3><p>采用这种方法的推荐系统通过比较当前用户和其他用户阅读的项目进行比较（其评分为权值），从而选择当前用户的TopN邻近用户，然后根据当前用户的临近用户，对当前用户的未评分项进行模拟评分，然后再将评分高的项目推荐给用户。</p><p>这种推荐系统的优点在于推荐项目之间在内容上可能完全不相关，因此可以发现用户的潜在兴趣，并且针对每个用户生成其个性化的推荐结果。缺点在于一般的Web系统中，用户的增长速度都远远大于项目的增长速度，因此其计算量的增长巨大，系统性能容易成为瓶颈。因此在业界中单纯的使用User-based协同过滤系统较少。</p><p>豆瓣网的“豆瓣猜”是一种个性化的推荐，因此推荐其背后可能采用了User-based协同过滤技术。但是可以看出，豆瓣猜页面上仍主要采用了基于tag的推荐技术，并且利用“友邻”代替了协同过滤技术中的临近用户计算，并且“豆瓣猜”也并非豆瓣网的主打推荐系统。</p><h3 id="Item-based-协同过滤系统"><a href="#Item-based-协同过滤系统" class="headerlink" title="Item-based 协同过滤系统"></a>Item-based 协同过滤系统</h3><p>这种协同过滤和User-based协同过滤相似，只不过是通过比较对当前item的用户评分和其他item的用户评分来选择当前item的相似item进行推荐。Item-based协同过滤可以看作是关联规则推荐的一种退化（尤其是进行1to1形式的推荐时），但由于协同过滤更多考虑了用户的实际评分，并且只是计算相似度而非寻找频繁集，因此可以认为Item-based协同过滤准确率较高并且覆盖率更高。</p><p>同User-based相比Item-based应用更为广泛，扩展性和算法性能更好。由于项目的增长速度一般较为平缓，因此性能变化不大。缺点就是无法提供个性化的推荐结果。</p><h2 id="基于用户模型学习的推荐系统"><a href="#基于用户模型学习的推荐系统" class="headerlink" title="基于用户模型学习的推荐系统"></a>基于用户模型学习的推荐系统</h2><p>这种推荐系统根据用户已阅读（或评分）项目进行监督学习，从而得到该用户的行为模型，继而根据该用户的模型去对用户未评分的项目进行分类预测，从而得到用户可能喜欢的项目。根据用户模型的学习算法，一般也需要抽取项目的一些特征。目前这种推荐系统的效果还没有生产环境应用的资料证实，因此尚无法判断其优缺点。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>推荐系统和搜索引擎都是海量信息的过滤器，因此有人提出利用搜索引擎的一些成熟技术去解决推荐系统的问题。例如，将item看作是一个doc，将对该item有过评价的用户看作是该doc的一个term，然后利用BM-25、TF-IDF等算法对item的相似度进行计算，这种方案可以避免热门问题，同时搜索引擎技术的发展相对要比推荐系统成熟。存在的问题就是，同基于用户模型学习的推荐系统并未有生产系统使用效果的资料。</p><p>除此之外还有基于效用和基于知识的推荐系统。</p><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>推荐系统的未来发展方向不会是用单一方案解决问题，很有可能是通过组合以上几种推荐方法，来确定最终的推荐结果。可以采用加权、变换、混合、特征组合等方法综合考虑这些推荐方法。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旧文搬迁 </tag>
            
            <tag> 推荐系统 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 关联规则挖掘 </tag>
            
            <tag> 协同过滤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[旧文搬迁]在不清楚发生了什么前，不要随便使用语法糖</title>
      <link href="/2010/12/04/jiu-wen-ban-qian-zai-bu-qing-chu-fa-sheng-liao-shi-me-qian-bu-yao-sui-bian-shi-yong-yu-fa-tang/"/>
      <url>/2010/12/04/jiu-wen-ban-qian-zai-bu-qing-chu-fa-sheng-liao-shi-me-qian-bu-yao-sui-bian-shi-yong-yu-fa-tang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感谢<a href="http://www.udpwork.com/item/6379.html">IT牛人博客聚合</a>上还能找到我之前博客的一些内容，因为之前主机没续费等各种原因，也懒得翻之前的备份文档了，就把那上面的文章直接拷过来整理一下好了，只搬迁一些还有意义的内容好了，其他的就让它随风而去吧。</p></blockquote><p>Perl有很多语法糖，可以帮助我们用很少的代码表达更多的意思，其中就包括了Perl的各种内置变量。例如我们今天的主角<code>$_</code>。</p><p><code>$_</code>代表循环中的当前元素，我一直以为<code>$_</code>是一个值copy，而且隐约记得小骆驼里说过，当嵌套循环时，内层<code>$_</code>会覆盖外层<code>$_</code>的值，但是当内层循环结束时，<code>$_</code>会恢复成原来的值。一直这么用相安无事，直到今天遇到了bad case，例如：</p><pre><code>my @ins = @ARGV;foreach(@ins) &#123;    open IN, $_;    while(my $line = chomp ) &#123;        print &quot;@ins\n&quot;;    &#125;    close IN;&#125;</code></pre><p>程序很简单，输入一组文件，然后读取他们的内容。注意到那条打印语句，按我想要的是@ins数组内插，也就是它的元素。但实际上打印出的却是读入的文件的内容。而在内层while循环结束后@ins数组完全被改变了。</p><p>百思不得其解，按道理说没有任何语句改变了@ins数组的值，但是它却真的变了。周围找不到人问，于是加了Perl的beginners邮件列表，问了这个问题。</p><p>总结起来原因是这样的，是内层的<code>$_</code>改变了外层循环的<code>$_</code>值，也就是改变了<code>@ins</code>数组的值。小骆驼那句话说的有问题？其实没错，只是<code>$_</code>会自动恢复发生在foreach嵌套foreach上，而当内层循环是while时，就不会自动恢复。那我想保留外层数组就只能copy一个？其实不是的，只要不用语法糖，显示的声明lexical variable就可以了。因此只要修改上述代码即可：</p><pre><code>my @ins = @ARGV;foreach my $file (@ins) &#123;    open $in, &#39;) &#123;        chomp;        print &quot;@ins\n&quot;;    &#125;    close $in;&#125;</code></pre><p>这样就能达到我们想要的效果，在open语句的格式上，maillist上面的朋友说用3个参数的比较好，因此帮我改了。另外，Shawn指出，实际上<code>$_</code>并不是foreach的element的值拷贝，而是真正代表数组的元素，也就是说当内层循环是while时，实际上执行了<code>$_ = current_line</code>的操作，因此会改变数组的值。</p><p>今晚收获颇丰，作为一个才写了两个月Perl的人，还是老老实实用显示变量吧，在不清楚Perl内部实际怎么用那些语法糖前，还是少用为妙。糖是甜的，但是吃多了蛀牙还长胖。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旧文搬迁 </tag>
            
            <tag> Perl </tag>
            
            <tag> 语法糖 </tag>
            
            <tag> 教训 </tag>
            
            <tag> 默认变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[旧文搬迁]偶有所感——为什么我想先做产品技术</title>
      <link href="/2010/09/01/jiu-wen-ban-qian-ou-you-suo-gan-wei-shi-me-wo-xiang-xian-zuo-chan-pin-ji-zhu/"/>
      <url>/2010/09/01/jiu-wen-ban-qian-ou-you-suo-gan-wei-shi-me-wo-xiang-xian-zuo-chan-pin-ji-zhu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感谢<a href="http://www.udpwork.com/item/6379.html">IT牛人博客聚合</a>上还能找到我之前博客的一些内容，因为之前主机没续费等各种原因，也懒得翻之前的备份文档了，就把那上面的文章直接拷过来整理一下好了，只搬迁一些还有意义的内容好了，其他的就让它随风而去吧。</p></blockquote><p>最近在淘宝处在一个转折点，一方面有转化面试，一方面就快回学校报到了，再另一方面也是关于自己更应该做什么的思考。刚到淘宝实习时，第一天培训，神奇般的得到了华黎的赏识，希望我能去他那组。当时因为怕社区线这边可能会做前端表现层去做业务逻辑，同时自己也是对中间件很感兴趣，就想去他那里。不过国藩没同意，因为毕竟我还没有真正到社区线实习过，也并不知道我就真的不喜欢这边的工作，所以还是让我现在社区线这边实习，如果实在感觉不给力，再考虑transfer的问题。现在看来，国藩老大是对的，原因一会再说。</p><p>然后就是开始在社区线的架构组实习，很幸运，我被分去做社区线的搜索引擎。虽然说这里做搜索引擎并不是想象中那么“高端”——搞分词，搞索引，搞匹配等等，只是基于lucene和solr进行开发，因为这个搜索其实现在也是处于成长阶段，正如育森老大所说的，先要让自身的架子稳定下来，才能想去做一些更高级的事情。但是，实际上在做搜索引擎的开发时也接触到很多以前在学校经验几乎为0的东西——分布式系统。</p><p>其实真正去做了才发现自己其实欠缺很多东西，如果真的要是去了平台架构组，我可能不会得到在社区线这么多机会，同时因为根本不了解淘宝的应用，就去盲目做中间件，我真能做的好么？也许在老大们的思想下写好代码还是很简单的，但是这样的东西真的是我的么？显然不是，也不会是，因为我根本不了解这个中间件所应用的场景。</p><p>一晃将近两个月过去了，就在转化面试的前一天晚上，华黎问我实习的感受，还有在社区线这边呆的怎么样，如果不爽可以来他那里。之前在和育森交流时，育森也说过，如果我想专心只做技术，可以推荐我去平台架构那边，之前他也有机会去那边，但是他没去，因为他觉得脱离业务很难搞好技术，而且技术也是为了服务于业务，因此他选择回到社区线。这点我还是很认同的，所以在和华黎交流时，我也说我觉得我应该先在社区线这边多锻炼锻炼，毕竟如果不对淘宝的产品应用有了解，很难做好中间件。华黎也是很认同我的想法，也说在SNS的架构组锻炼还是很有好处的，而且毕竟中间件也是产生于生产系统，是将那些共性提取出来，做通用的服务。</p><p>今天转化面试时，其实也是和毕玄交流了一下这方面的感想，也说自己做搜索引擎也是用到了淘宝很多中间件，但是站在用户的角度看问题，会发现这个视角和程序员是不一样的。从用户的角度才能更加清楚的知道如何去做中间件，如何能把中间做的易用、稳定、健壮、可扩展性高、通用等等。毕玄也是比较同意的，而且还就我说的底层透明，给我讲了HSF的底层透明带来了什么不便，所以这个底层透明到底是好还是不好，还是值得商榷的。</p><p>其实说到底，由于终搜的目标是一个通用性搜索框架，因此实际上终搜本身就是中间件。而且从这次做server-dump的相关接口设计实现上来说，真的重构了无数次，为什么？就是为了做到更加通用、易用、易于扩展等等。</p><p>今天负责协助淘女郎那边升级，他们的Dump需求是：从表a取主要数据，然后在根据表a的某字段去另外一个库（实际上是另外一个应用的数据）的表里去取其他信息，然后整个拼合起来做索引。问题来了，我们现在的模型就是单条SQL去dump数据，基本都来自一个应用，即使分库分表，也仅需配置相应规则即可。显然，这个需求不能套在原本的框架里。老大建议还是重写一个DataProvider，然后去管理连接什么的，但是要便于扩展，虽然另外那个辅助表只是分表而已，但是保不准哪天就分库了，所以你尽量帮他们做的好更改些。</p><p>于是我开始思考他们的业务逻辑，因为涉及分表，以后还可能涉及分库，所以在利用原本分库分表规则解析器的情况下，我需要得到一个反向索引——原先是数据源对应一堆分表后缀，现在要分表后缀对应数据源。但是我得想好怎么把数据源交给用户，既不用让他们做太多事，同时我也在考虑万一以后还有这种需求，我不是还得写个DataProvider么。既然这样，我不如不把数据源给你了，我只给你结果，剩下的交给我管理，于是有了下面接口：</p><pre><code>public interface SQLEngine &#123;    public Map&lt;String, String&gt; execute(String param) throws Exception;&#125;</code></pre><p>SQL语句是预先注入，然后根据传进来的参数进行相应替换。继而我又想，现在淘女郎是只要一个参数，如果需要多个参数的怎么办，于是接口变为：</p><pre><code>public interface SQLEngine &#123;    public Map&lt;String, String&gt; execute(Map&lt;String, String&gt; param) throws Exception;&#125;</code></pre><p>这样就给力多了嘛，然后又想，现在淘女郎是一一对应的关系，如果现在情况变成一对多了，该怎么办，于是接口变为：</p><pre><code>public interface SQLEngine &#123;    public List&lt;Map&lt;String, String&gt;&gt; execute(Map&lt;String, String&gt; param) throws Exception;&#125;</code></pre><p>经过一番改造，做后终于做出了一个比较通用的东西出来，只需要注入需替换的Sql语句以及分库分表规则（数据源本身就在配置文件里定义了），我就可以返回你要的东西。这样对于用户来说就简单多了。在请育森老大review代码时，他说你这个List实际上有内存溢出的风险，如果数据量比较大的话。不过这个可以在应用端控制，只是理论上的风险，不过iBatis也是这么做的。</p><p>iBatis也是这么做的，对啊，我这个东西基本上不就相当于是一个简化版只支持查询的iBatis么，尽管我完全不管O/R关系。但是，最关键的是，我可以支持分库分表啊。一直说想做个分布式数据访问层，对这个有点兴趣，但是现在竟然误打误撞做出这么一个Prototype来！这个，虽然是是在终搜体系中的，但实际上它也是一种中间件，可以应付80%的场景，除非你业务特别复杂。这就是所谓的中间件诞生于生产系统吧。</p><p>现在想想，为什么之前想做个DDAL玩玩但是始终没什么思路，但是现在却真的做出来了（虽然它不是一个完整意义上的DDAL）。首先，之前只接触了一些分库分表思想，但是没有实际去了解它的应用场景，一开始可能会无所适从。第二，我从一开始就是想的实现一个完整的DDAL，这样要考虑的点实在太多。又有多少中间件是从一开始就设计出一个伟大的架构然后去实现它，然后让用户去使用它呢？可能不会有，大多数中间件就是从一个小的点子慢慢扩展出来的。如果不是这次淘女郎的业务有需要，我可能不会去写这么一个东西，连这么一点小东西都实现不了，还空谈什么DDAL呢？</p><p>所以，我觉得我留在产品技术部门是一个正确的选择，一开始站在一个很高的起点上，虽然是高，但是脚下的铺垫不够厚实，摔下去也很容易。相反，如果每一步路都实实在在的踩下去，夯实基础，我一定会站的更高。</p>]]></content>
      
      
      <categories>
          
          <category> 垃圾箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旧文搬迁 </tag>
            
            <tag> 随笔 </tag>
            
            <tag> 实习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[旧文搬迁]走出“最小公开化”的误区</title>
      <link href="/2010/08/18/jiu-wen-ban-qian-zou-chu-zui-xiao-gong-kai-hua-de-wu-qu/"/>
      <url>/2010/08/18/jiu-wen-ban-qian-zou-chu-zui-xiao-gong-kai-hua-de-wu-qu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感谢<a href="http://www.udpwork.com/item/6379.html">IT牛人博客聚合</a>上还能找到我之前博客的一些内容，因为之前主机没续费等各种原因，也懒得翻之前的备份文档了，就把那上面的文章直接拷过来整理一下好了，只搬迁一些还有意义的内容好了，其他的就让它随风而去吧。</p></blockquote><p>记得刚接触面向对象的程序设计时，就知道了这样一个原则，就是类的成员最小公开化。由于当时做的基本是特定开发，再加上各种教程的“误导”，所以想当然的认为能private的绝不friendly，能friendly的绝不protected。当然，其实protected都很少会用，大部分时候都是public或者是private的。然而最近在做写终搜新版本以及看一些经典开源代码时，发现其实很多时候都是protected或者friendly的，并不是清一色的private，这不得不让我思考，到底什么是最小公开化原则。</p><p>首先先来复习一下Java中四种可见度，首先private是私有的，只有这个类的成员可以访问，可见度最小；可见度第二小的是friendly，只对同一包内的类及其成员可见；第三小的是protected，对该类的派生类及同一包内的类可见；public顾名思义。之所以会有可见度，是因为要避免这些方法或者成员在其作用域外被误用，导致程序出现不可预知的行为。</p><p>按照大多数POJO的例子，其域成员都是private的，然后通过getter和setter去读写其值。所以以前写的绝大多数类都是私有成员，但放在产品的角度来考虑，这样真的合适么？当你觉得某一个非final类的行为并不符合你的需求时，你的第一想法是什么？继承这个类，然后用派生类代替该类，重写不符合预期的想法。现在问题来了，既然很多成员都是私有的，那么在你的派生类中就不能直接利用这些成员了，要么自己定义成员，要么用臃肿的setter和getter吧。为么会有继承？很大程度上是为了实现代码的高度复用，但是现在你的代码的使用者不得不继承你的类，然后重写这些需要用到的成员，并一边骂着：“靠，用个protected会死啊！”</p><p>没错，最小公开化不代表完全私有化，在确保其不在作用域外被误用的情况下，还要尽可能的“开放”以为你的后人提供方便。那么到底什么情况下适合用private呢？如果你确信这个类永远也不可能被继承重写，那么你大可以给类加上个final，然后放心大胆的用private去标注那些需要隐藏的实现。另外一种情况，如果你的属性或者方法只是某个方法特殊的中间调用产物，而你有确信这段代码不会被其他人复用，那么你可以放心的用private。如果你觉得你的类可能会被继承重写，那么最后给每一个要隐藏的成员标注protected，这样既为你的代码的使用者提供方便，又起到了保护代码的作用。</p><p>但问题并不是这么简单，问题就在于Java中protected的语义，按照我们传统观念来说——也就是目前C#, Scala等语言中的protected那样，protected修饰的成员应该只对该类及其子类的成员可见，但很遗憾，不知道Java最初的设计者出于哪方面考虑，protected也可以被同包的类访问，也许是因为最初的类库一个包中的类经常共用一些成员，但是又与其他包的业务无关吧。总之，这是游戏规则的一个失误。你也许会说，大量使用protected也许会不小心被同一个包的类误用，但是，必须说的是，这个做法本身是一个错误的用例。而且，别忘了，Java提供了反射，这个足以改变游戏规则的武器，所以没有什么代码是真正安全的，除非你自己足够小心。</p><p>所以，尽量多用protected吧，当你有一天需要继承先前类，并且只重写一两个非公开方法时，你会感觉到非常爽的。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旧文搬迁 </tag>
            
            <tag> Java </tag>
            
            <tag> 继承 </tag>
            
            <tag> 设计思想 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[旧文搬迁]闲扯Java面向对象</title>
      <link href="/2010/08/17/jiu-wen-ban-qian-xian-che-java-mian-xiang-dui-xiang/"/>
      <url>/2010/08/17/jiu-wen-ban-qian-xian-che-java-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感谢<a href="http://www.udpwork.com/item/6379.html">IT牛人博客聚合</a>上还能找到我之前博客的一些内容，因为之前主机没续费等各种原因，也懒得翻之前的备份文档了，就把那上面的文章直接拷过来整理一下好了，只搬迁一些还有意义的内容好了，其他的就让它随风而去吧。</p></blockquote><p>继承和多态可以算是面向对象设计的两个最基本的概念了，而这两种技术的实现离不开接口和抽象类。曾经面试的时候被问过这样一个问题，就是Java的接口和抽象类有什么区别。不想谈太多语法上的区别，只想说说它们语义上的区别。接口，是用来描述类的抽象行为的；而抽象类更多是描述一个物种的某些共同属性的。从这个意义上讲，一个具体的事物是不可能既属于A物种又属于B物种的，所以Java中不允许多重继承，但是因为即便是不同物种也可以拥有相同行为，因此从接口上可以“多重实现”，但是因为物种不同，所以这个行为的表现上也是不同的，因此虽然行为是相同的，但是你得根据不同物种去不同实现。</p><p>根据Java的世界观，这个世界上有了生物接口，有一些共同的行为，比如吃饭、睡觉、打豆豆什么的，但不同种类的生物吃饭、睡觉、打豆豆的方式不一样，慢慢的生物出现了各种物种，比如人类和鸟类。但人类因为地域的不同相同的行为有衍生出不同的行为方式，所以人类只能算是抽象类，定义人有四肢有两个眼睛一个鼻子一个嘴。然后又具体有亚洲人、欧洲人、美洲人、非洲人等等，他们的行为方式是不同的。比如中国人吃饭用筷子，欧美人则用刀叉等等。</p><p>本来以为世界就此安静了，很可惜随着科学的进步，人兽杂交成为了可能，于是诞生了新的物种——鸟人。本来既然鸟人是新的物种，理所当然它应该实现生物接口，然后定义一个抽象的鸟人。但问题来了，我们有欧洲鸟人、亚洲鸟人、非洲鸟人、美洲鸟人，他们除了会飞其他行为和人类是一样的。但是碍于鸟人和人类是不同物种，你不得不重复实现人类所具有的功能，然后让他们再加上鸟人会飞的功能。或者说在鸟人体内安装一个人类代理，当需要进行人类动作时，就用这个人类代理去完成。</p><p>问题虽然能够解决，但是不够Clean。但是没办法，在这样一个世界观里，你能做到的就只有这些。不得不说说Scala的trait，特征，听着就让人激动。如果我们的世界观里有了特征，那么会飞只是一个特征而已，鸟的飞和鸟人的飞从本质上说是一样的，所以给欧洲人混入飞的特征那么他就成了欧洲鸟人，给亚洲人混入会飞的特征那么他就成了亚洲鸟人……更令人激动的是，即使不能形成鸟人这个物种，我们只有一个会飞的日本鸟人，我们只要给他插上翅膀，他就从一个日本人变成了一个日本鸟人！当然，此时日本人还是日本人，只有某人变成了日本鸟人。</p><p>抽象的行为固然是好的，但是很多时候我们也同样需要具体的特征，就像七巧板可以拼出不同的图形一样。可惜，世界观是一早就形成的，如果在接口和抽象类行为不变的情况下引入特征，那么势必会让很多程序员感到困惑。今天的闲扯就到这里，完全是因为工作中遇到了一些想使用多重继承但是碍于世界观又不得不使用copy代码的方式的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旧文搬迁 </tag>
            
            <tag> Java </tag>
            
            <tag> 开发技术 </tag>
            
            <tag> 多重继承 </tag>
            
            <tag> 抽象类 </tag>
            
            <tag> 接口 </tag>
            
            <tag> 特征 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[旧文搬迁]已经实习快两周了</title>
      <link href="/2010/07/17/jiu-wen-ban-qian-yi-jing-shi-xi-kuai-liang-zhou-liao/"/>
      <url>/2010/07/17/jiu-wen-ban-qian-yi-jing-shi-xi-kuai-liang-zhou-liao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感谢<a href="http://www.udpwork.com/item/6379.html">IT牛人博客聚合</a>上还能找到我之前博客的一些内容，因为之前主机没续费等各种原因，也懒得翻之前的备份文档了，就把那上面的文章直接拷过来整理一下好了，只搬迁一些还有意义的内容好了，其他的就让它随风而去吧。</p></blockquote><p>想了想还是决定写点什么吧，已经好久没有正经写过blog了。来杭州已经两个星期了，到杭州的第一感觉是这里比武汉还像个蒸笼，湿度更高，温度也不输。呆了两周发现这里有下不完的雨，而且说下雨就下雨，所以随身带一把雨伞还是很有必要的。记得07年十一假期来杭州时，就住在公司附近不远，记得有一次和老爸去超市回来，路过淘宝的大楼，老爸就说杭州也有不少IT企业，要不你毕业就到杭州来工作吧。结果，现在我真的到淘宝实习了。</p><p>上周二，经过一天的培训，终于被师兄们领到自己工作的地方了。淘宝很大，如果不是工作的地方离门口很近，我想我恐怕会迷路的。本以为到了淘江湖会被派去搞业务搞表现层，不过还好，分在了架构组，工作任务是搜索引擎。之前对搜索引擎并没有一个太大的了解，以为只是那个搜索框的后端，甚至到淘江湖上找了半天也只找到那么一个找朋友的框。通过一周的摸索，才知道其实搜索引擎的用途很广泛，很多数据库查询的场景都可以用到搜索引擎，毕竟等到数据上了一定级别，扫描无索引的数据库是个很耗资源的事情，所以这个时候搜索引擎就派上了用场。</p><p>虽然说目前这个搜索引擎没有涉及到分词、索引、匹配等算法，这些目前还是由lucene去完成，但是让我感到兴奋的是分布式应用的架构。在学校的时候几乎很难接触到什么分布式的应用，毕竟要分布式就必须有机器，而且如果负载压力没有上一定级别，搞分布式是个没有多少实际意义的事情。以前最多接触的是负载均衡，现在在淘宝，是真正的分布式应用，而且是大型分布式应用。这部分算是以前的一个不足，现在也有机会多搞搞。目前的目光不仅仅要放在工作上，socket编程和多线程并发编程，这两个以前最多算是了解，现在要更多去考虑了。</p><p>带我的师兄叫做育森，没错就是武林外传的老邢。育森很负责任，有空时也会来问问我有没有什么问题，代码看得怎么样了什么的。其实他是86年的，但是现在已经一个人扛下搜索和标签的事情，还是很强悍的。我还有很多东西要学啊，除了Lucene和Solr这两个做搜索必须的，还得看看那些和分布式应用相关的设计，虽然这部分几乎被HSF屏蔽了。</p><p>这两周的实习其实也没干什么事情，写了两份文档，部署了三台ZooKeeper服务器，研究明白95%的client代码，大致了解了Lucene, Solr还有信息检索的一些东西。这个效率还不够，因为每天还是有不少时间看Google Reader，资料基本上都是英文的，阅读起来还是有些吃力的，所以要靠GR来调剂一下。算是慢慢开始上手了吧，看client时还找到一处疏漏，算是认真分析了业务逻辑，毕竟要写用户手册出来，自己不真正会用是不可能写出来的。</p><p>读别人的代码肯定是不如自己写代码来的舒服，但是却是很重要的事情。想想坐在我左边的架构师，其实每天更多的事情就是从别人的代码里找到问题，所以读别人代码这个功力是必不可少的。</p><p>这两周虽然没有完全的自学打酱油，但是其实也没做多少事情，只是写写文档部署部署服务器而已。还是要努力啊，这点效率远远不够，不能让迅速的变强。同时自己的事情也不能丢，C和Python也要加把劲啊，这两个也是我很喜欢的。只是自己的private time比较少，在公司肯定要搞Java的，不然那么多资源就浪费了。只有每天晚上挤时间出来，同时周末尽量不加班，自己好好看看自己的书，要不我带20公斤的书来岂不白费？</p>]]></content>
      
      
      <categories>
          
          <category> 垃圾箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旧文搬迁 </tag>
            
            <tag> 随笔 </tag>
            
            <tag> 实习总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
